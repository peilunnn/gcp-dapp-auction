{"ast":null,"code":"const fs = require(\"fs\").promises;\nconst path = require(\"path\");\n\n// https://stackoverflow.com/questions/36856232/write-add-data-in-json-file-using-node-js\n// Accepts json data and stores in specified filePath.\n// If the file does not exists in specified location, it creates it\nconst storeDataToFile = async jsonData => {\n  try {\n    const filePath = path.join(__dirname, \"../../data/ipfsHash.json\");\n    const ipfsFileExists = await fileExists(filePath);\n    if (!ipfsFileExists) {\n      console.log(\"ipfsFileExists: \", ipfsFileExists);\n      // First time creating an empty file with [].\n      // We will be storing all ipfsHashes as array of objects\n      await fs.writeFile(filePath, JSON.stringify([]));\n    }\n    const data = await fs.readFile(filePath, \"utf8\");\n    const json = JSON.parse(data);\n    json.push(jsonData);\n    await fs.writeFile(filePath, JSON.stringify(json));\n  } catch (err) {\n    console.log(\"Error occured while storing data to file\", err);\n  }\n};\nasync function fileExists(path) {\n  try {\n    const res = await fs.access(path);\n    return true;\n  } catch (err) {\n    if (err.code == \"ENOENT\") {\n      return false;\n    }\n    console.log(\"Exception fs.statSync (\" + path + \"): \" + err);\n    throw err;\n  }\n}\nconst fillIpfsHashToMetaData = async metaDataFilePath => {\n  const ipfsFilePath = path.join(__dirname, \"../../data/ipfsHash.json\");\n  const data = await fs.readFile(ipfsFilePath, \"utf8\");\n  const json = JSON.parse(data);\n  const ipfsHash = json[json.length - 1].IpfsHash;\n  var metadata = await fs.readFile(metaDataFilePath, \"utf8\");\n  var metadataJson = JSON.parse(metadata);\n  metadataJson.image = \"https://gateway.pinata.cloud/ipfs/\" + ipfsHash;\n  fs.writeFile(metaDataFilePath, JSON.stringify(metadataJson));\n};\nmodule.exports = {\n  storeDataToFile,\n  fileExists,\n  fillIpfsHashToMetaData\n};","map":{"version":3,"names":["fs","require","promises","path","storeDataToFile","jsonData","filePath","join","__dirname","ipfsFileExists","fileExists","console","log","writeFile","JSON","stringify","data","readFile","json","parse","push","err","res","access","code","fillIpfsHashToMetaData","metaDataFilePath","ipfsFilePath","ipfsHash","length","IpfsHash","metadata","metadataJson","image","module","exports"],"sources":["/home/peilunnn/Downloads/Internship Projects/gcp-dapp-auction/client/src/scripts/ipfsHelper.js"],"sourcesContent":["const fs = require(\"fs\").promises;\nconst path = require(\"path\");\n\n// https://stackoverflow.com/questions/36856232/write-add-data-in-json-file-using-node-js\n// Accepts json data and stores in specified filePath.\n// If the file does not exists in specified location, it creates it\nconst storeDataToFile = async (jsonData) => {\n  try {\n    const filePath = path.join(__dirname, \"../../data/ipfsHash.json\");\n    const ipfsFileExists = await fileExists(filePath);\n    if (!ipfsFileExists) {\n      console.log(\"ipfsFileExists: \", ipfsFileExists);\n      // First time creating an empty file with [].\n      // We will be storing all ipfsHashes as array of objects\n      await fs.writeFile(filePath, JSON.stringify([]));\n    }\n    const data = await fs.readFile(filePath, \"utf8\");\n    const json = JSON.parse(data);\n    json.push(jsonData);\n    await fs.writeFile(filePath, JSON.stringify(json));\n  } catch (err) {\n    console.log(\"Error occured while storing data to file\", err);\n  }\n};\n\nasync function fileExists(path) {\n  try {\n    const res = await fs.access(path);\n    return true;\n  } catch (err) {\n    if (err.code == \"ENOENT\") {\n      return false;\n    }\n    console.log(\"Exception fs.statSync (\" + path + \"): \" + err);\n    throw err;\n  }\n}\n\nconst fillIpfsHashToMetaData = async (metaDataFilePath) => {\n  const ipfsFilePath = path.join(__dirname, \"../../data/ipfsHash.json\");\n  const data = await fs.readFile(ipfsFilePath, \"utf8\");\n  const json = JSON.parse(data);\n  const ipfsHash = json[json.length - 1].IpfsHash;\n  var metadata = await fs.readFile(metaDataFilePath, \"utf8\");\n  var metadataJson = JSON.parse(metadata);\n  metadataJson.image = \"https://gateway.pinata.cloud/ipfs/\" + ipfsHash;\n  fs.writeFile(metaDataFilePath, JSON.stringify(metadataJson));\n};\n\nmodule.exports = {\n  storeDataToFile,\n  fileExists,\n  fillIpfsHashToMetaData,\n};\n"],"mappings":"AAAA,MAAMA,EAAE,GAAGC,OAAO,CAAC,IAAI,CAAC,CAACC,QAAQ;AACjC,MAAMC,IAAI,GAAGF,OAAO,CAAC,MAAM,CAAC;;AAE5B;AACA;AACA;AACA,MAAMG,eAAe,GAAG,MAAOC,QAAQ,IAAK;EAC1C,IAAI;IACF,MAAMC,QAAQ,GAAGH,IAAI,CAACI,IAAI,CAACC,SAAS,EAAE,0BAA0B,CAAC;IACjE,MAAMC,cAAc,GAAG,MAAMC,UAAU,CAACJ,QAAQ,CAAC;IACjD,IAAI,CAACG,cAAc,EAAE;MACnBE,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEH,cAAc,CAAC;MAC/C;MACA;MACA,MAAMT,EAAE,CAACa,SAAS,CAACP,QAAQ,EAAEQ,IAAI,CAACC,SAAS,CAAC,EAAE,CAAC,CAAC;IAClD;IACA,MAAMC,IAAI,GAAG,MAAMhB,EAAE,CAACiB,QAAQ,CAACX,QAAQ,EAAE,MAAM,CAAC;IAChD,MAAMY,IAAI,GAAGJ,IAAI,CAACK,KAAK,CAACH,IAAI,CAAC;IAC7BE,IAAI,CAACE,IAAI,CAACf,QAAQ,CAAC;IACnB,MAAML,EAAE,CAACa,SAAS,CAACP,QAAQ,EAAEQ,IAAI,CAACC,SAAS,CAACG,IAAI,CAAC,CAAC;EACpD,CAAC,CAAC,OAAOG,GAAG,EAAE;IACZV,OAAO,CAACC,GAAG,CAAC,0CAA0C,EAAES,GAAG,CAAC;EAC9D;AACF,CAAC;AAED,eAAeX,UAAU,CAACP,IAAI,EAAE;EAC9B,IAAI;IACF,MAAMmB,GAAG,GAAG,MAAMtB,EAAE,CAACuB,MAAM,CAACpB,IAAI,CAAC;IACjC,OAAO,IAAI;EACb,CAAC,CAAC,OAAOkB,GAAG,EAAE;IACZ,IAAIA,GAAG,CAACG,IAAI,IAAI,QAAQ,EAAE;MACxB,OAAO,KAAK;IACd;IACAb,OAAO,CAACC,GAAG,CAAC,yBAAyB,GAAGT,IAAI,GAAG,KAAK,GAAGkB,GAAG,CAAC;IAC3D,MAAMA,GAAG;EACX;AACF;AAEA,MAAMI,sBAAsB,GAAG,MAAOC,gBAAgB,IAAK;EACzD,MAAMC,YAAY,GAAGxB,IAAI,CAACI,IAAI,CAACC,SAAS,EAAE,0BAA0B,CAAC;EACrE,MAAMQ,IAAI,GAAG,MAAMhB,EAAE,CAACiB,QAAQ,CAACU,YAAY,EAAE,MAAM,CAAC;EACpD,MAAMT,IAAI,GAAGJ,IAAI,CAACK,KAAK,CAACH,IAAI,CAAC;EAC7B,MAAMY,QAAQ,GAAGV,IAAI,CAACA,IAAI,CAACW,MAAM,GAAG,CAAC,CAAC,CAACC,QAAQ;EAC/C,IAAIC,QAAQ,GAAG,MAAM/B,EAAE,CAACiB,QAAQ,CAACS,gBAAgB,EAAE,MAAM,CAAC;EAC1D,IAAIM,YAAY,GAAGlB,IAAI,CAACK,KAAK,CAACY,QAAQ,CAAC;EACvCC,YAAY,CAACC,KAAK,GAAG,oCAAoC,GAAGL,QAAQ;EACpE5B,EAAE,CAACa,SAAS,CAACa,gBAAgB,EAAEZ,IAAI,CAACC,SAAS,CAACiB,YAAY,CAAC,CAAC;AAC9D,CAAC;AAEDE,MAAM,CAACC,OAAO,GAAG;EACf/B,eAAe;EACfM,UAAU;EACVe;AACF,CAAC"},"metadata":{},"sourceType":"module"}