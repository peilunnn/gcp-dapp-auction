{"ast":null,"code":"/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n * @file index.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\n\"use strict\";\n\nvar _ = require('underscore');\nvar core = require('web3-core');\nvar helpers = require('web3-core-helpers');\nvar Subscriptions = require('web3-core-subscriptions').subscriptions;\nvar Method = require('web3-core-method');\nvar utils = require('web3-utils');\nvar Net = require('web3-net');\nvar ENS = require('web3-eth-ens');\nvar Personal = require('web3-eth-personal');\nvar BaseContract = require('web3-eth-contract');\nvar Iban = require('web3-eth-iban');\nvar Accounts = require('web3-eth-accounts');\nvar abi = require('web3-eth-abi');\nvar getNetworkType = require('./getNetworkType.js');\nvar formatter = helpers.formatters;\nvar blockCall = function (args) {\n  return _.isString(args[0]) && args[0].indexOf('0x') === 0 ? \"eth_getBlockByHash\" : \"eth_getBlockByNumber\";\n};\nvar transactionFromBlockCall = function (args) {\n  return _.isString(args[0]) && args[0].indexOf('0x') === 0 ? 'eth_getTransactionByBlockHashAndIndex' : 'eth_getTransactionByBlockNumberAndIndex';\n};\nvar uncleCall = function (args) {\n  return _.isString(args[0]) && args[0].indexOf('0x') === 0 ? 'eth_getUncleByBlockHashAndIndex' : 'eth_getUncleByBlockNumberAndIndex';\n};\nvar getBlockTransactionCountCall = function (args) {\n  return _.isString(args[0]) && args[0].indexOf('0x') === 0 ? 'eth_getBlockTransactionCountByHash' : 'eth_getBlockTransactionCountByNumber';\n};\nvar uncleCountCall = function (args) {\n  return _.isString(args[0]) && args[0].indexOf('0x') === 0 ? 'eth_getUncleCountByBlockHash' : 'eth_getUncleCountByBlockNumber';\n};\nvar Eth = function Eth() {\n  var _this = this;\n\n  // sets _requestmanager\n  core.packageInit(this, arguments);\n\n  // overwrite setProvider\n  var setProvider = this.setProvider;\n  this.setProvider = function () {\n    setProvider.apply(_this, arguments);\n    _this.net.setProvider.apply(_this, arguments);\n    _this.personal.setProvider.apply(_this, arguments);\n    _this.accounts.setProvider.apply(_this, arguments);\n    _this.Contract.setProvider(_this.currentProvider, _this.accounts);\n  };\n  var defaultAccount = null;\n  var defaultBlock = 'latest';\n  Object.defineProperty(this, 'defaultAccount', {\n    get: function () {\n      return defaultAccount;\n    },\n    set: function (val) {\n      if (val) {\n        defaultAccount = utils.toChecksumAddress(formatter.inputAddressFormatter(val));\n      }\n\n      // also set on the Contract object\n      _this.Contract.defaultAccount = defaultAccount;\n      _this.personal.defaultAccount = defaultAccount;\n\n      // update defaultBlock\n      methods.forEach(function (method) {\n        method.defaultAccount = defaultAccount;\n      });\n      return val;\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, 'defaultBlock', {\n    get: function () {\n      return defaultBlock;\n    },\n    set: function (val) {\n      defaultBlock = val;\n      // also set on the Contract object\n      _this.Contract.defaultBlock = defaultBlock;\n      _this.personal.defaultBlock = defaultBlock;\n\n      // update defaultBlock\n      methods.forEach(function (method) {\n        method.defaultBlock = defaultBlock;\n      });\n      return val;\n    },\n    enumerable: true\n  });\n  this.clearSubscriptions = _this._requestManager.clearSubscriptions;\n\n  // add net\n  this.net = new Net(this.currentProvider);\n  // add chain detection\n  this.net.getNetworkType = getNetworkType.bind(this);\n\n  // add accounts\n  this.accounts = new Accounts(this.currentProvider);\n\n  // add personal\n  this.personal = new Personal(this.currentProvider);\n  this.personal.defaultAccount = this.defaultAccount;\n\n  // create a proxy Contract type for this instance, as a Contract's provider\n  // is stored as a class member rather than an instance variable. If we do\n  // not create this proxy type, changing the provider in one instance of\n  // web3-eth would subsequently change the provider for _all_ contract\n  // instances!\n  var self = this;\n  var Contract = function Contract() {\n    BaseContract.apply(this, arguments);\n\n    // when Eth.setProvider is called, call packageInit\n    // on all contract instances instantiated via this Eth\n    // instances. This will update the currentProvider for\n    // the contract instances\n    var _this = this;\n    var setProvider = self.setProvider;\n    self.setProvider = function () {\n      setProvider.apply(self, arguments);\n      core.packageInit(_this, [self.currentProvider]);\n    };\n  };\n  Contract.setProvider = function () {\n    BaseContract.setProvider.apply(this, arguments);\n  };\n\n  // make our proxy Contract inherit from web3-eth-contract so that it has all\n  // the right functionality and so that instanceof and friends work properly\n  Contract.prototype = Object.create(BaseContract.prototype);\n  Contract.prototype.constructor = Contract;\n\n  // add contract\n  this.Contract = Contract;\n  this.Contract.defaultAccount = this.defaultAccount;\n  this.Contract.defaultBlock = this.defaultBlock;\n  this.Contract.setProvider(this.currentProvider, this.accounts);\n\n  // add IBAN\n  this.Iban = Iban;\n\n  // add ABI\n  this.abi = abi;\n\n  // add ENS\n  this.ens = new ENS(this);\n  var methods = [new Method({\n    name: 'getNodeInfo',\n    call: 'web3_clientVersion'\n  }), new Method({\n    name: 'getProtocolVersion',\n    call: 'eth_protocolVersion',\n    params: 0\n  }), new Method({\n    name: 'getCoinbase',\n    call: 'eth_coinbase',\n    params: 0\n  }), new Method({\n    name: 'isMining',\n    call: 'eth_mining',\n    params: 0\n  }), new Method({\n    name: 'getHashrate',\n    call: 'eth_hashrate',\n    params: 0,\n    outputFormatter: utils.hexToNumber\n  }), new Method({\n    name: 'isSyncing',\n    call: 'eth_syncing',\n    params: 0,\n    outputFormatter: formatter.outputSyncingFormatter\n  }), new Method({\n    name: 'getGasPrice',\n    call: 'eth_gasPrice',\n    params: 0,\n    outputFormatter: formatter.outputBigNumberFormatter\n  }), new Method({\n    name: 'getAccounts',\n    call: 'eth_accounts',\n    params: 0,\n    outputFormatter: utils.toChecksumAddress\n  }), new Method({\n    name: 'getBlockNumber',\n    call: 'eth_blockNumber',\n    params: 0,\n    outputFormatter: utils.hexToNumber\n  }), new Method({\n    name: 'getBalance',\n    call: 'eth_getBalance',\n    params: 2,\n    inputFormatter: [formatter.inputAddressFormatter, formatter.inputDefaultBlockNumberFormatter],\n    outputFormatter: formatter.outputBigNumberFormatter\n  }), new Method({\n    name: 'getStorageAt',\n    call: 'eth_getStorageAt',\n    params: 3,\n    inputFormatter: [formatter.inputAddressFormatter, utils.numberToHex, formatter.inputDefaultBlockNumberFormatter]\n  }), new Method({\n    name: 'getCode',\n    call: 'eth_getCode',\n    params: 2,\n    inputFormatter: [formatter.inputAddressFormatter, formatter.inputDefaultBlockNumberFormatter]\n  }), new Method({\n    name: 'getBlock',\n    call: blockCall,\n    params: 2,\n    inputFormatter: [formatter.inputBlockNumberFormatter, function (val) {\n      return !!val;\n    }],\n    outputFormatter: formatter.outputBlockFormatter\n  }), new Method({\n    name: 'getUncle',\n    call: uncleCall,\n    params: 2,\n    inputFormatter: [formatter.inputBlockNumberFormatter, utils.numberToHex],\n    outputFormatter: formatter.outputBlockFormatter\n  }), new Method({\n    name: 'getBlockTransactionCount',\n    call: getBlockTransactionCountCall,\n    params: 1,\n    inputFormatter: [formatter.inputBlockNumberFormatter],\n    outputFormatter: utils.hexToNumber\n  }), new Method({\n    name: 'getBlockUncleCount',\n    call: uncleCountCall,\n    params: 1,\n    inputFormatter: [formatter.inputBlockNumberFormatter],\n    outputFormatter: utils.hexToNumber\n  }), new Method({\n    name: 'getTransaction',\n    call: 'eth_getTransactionByHash',\n    params: 1,\n    inputFormatter: [null],\n    outputFormatter: formatter.outputTransactionFormatter\n  }), new Method({\n    name: 'getTransactionFromBlock',\n    call: transactionFromBlockCall,\n    params: 2,\n    inputFormatter: [formatter.inputBlockNumberFormatter, utils.numberToHex],\n    outputFormatter: formatter.outputTransactionFormatter\n  }), new Method({\n    name: 'getTransactionReceipt',\n    call: 'eth_getTransactionReceipt',\n    params: 1,\n    inputFormatter: [null],\n    outputFormatter: formatter.outputTransactionReceiptFormatter\n  }), new Method({\n    name: 'getTransactionCount',\n    call: 'eth_getTransactionCount',\n    params: 2,\n    inputFormatter: [formatter.inputAddressFormatter, formatter.inputDefaultBlockNumberFormatter],\n    outputFormatter: utils.hexToNumber\n  }), new Method({\n    name: 'sendSignedTransaction',\n    call: 'eth_sendRawTransaction',\n    params: 1,\n    inputFormatter: [null]\n  }), new Method({\n    name: 'signTransaction',\n    call: 'eth_signTransaction',\n    params: 1,\n    inputFormatter: [formatter.inputTransactionFormatter]\n  }), new Method({\n    name: 'sendTransaction',\n    call: 'eth_sendTransaction',\n    params: 1,\n    inputFormatter: [formatter.inputTransactionFormatter]\n  }), new Method({\n    name: 'sign',\n    call: 'eth_sign',\n    params: 2,\n    inputFormatter: [formatter.inputSignFormatter, formatter.inputAddressFormatter],\n    transformPayload: function (payload) {\n      payload.params.reverse();\n      return payload;\n    }\n  }), new Method({\n    name: 'call',\n    call: 'eth_call',\n    params: 2,\n    inputFormatter: [formatter.inputCallFormatter, formatter.inputDefaultBlockNumberFormatter]\n  }), new Method({\n    name: 'estimateGas',\n    call: 'eth_estimateGas',\n    params: 1,\n    inputFormatter: [formatter.inputCallFormatter],\n    outputFormatter: utils.hexToNumber\n  }), new Method({\n    name: 'submitWork',\n    call: 'eth_submitWork',\n    params: 3\n  }), new Method({\n    name: 'getWork',\n    call: 'eth_getWork',\n    params: 0\n  }), new Method({\n    name: 'getPastLogs',\n    call: 'eth_getLogs',\n    params: 1,\n    inputFormatter: [formatter.inputLogFormatter],\n    outputFormatter: formatter.outputLogFormatter\n  }),\n  // subscriptions\n  new Subscriptions({\n    name: 'subscribe',\n    type: 'eth',\n    subscriptions: {\n      'newBlockHeaders': {\n        // TODO rename on RPC side?\n        subscriptionName: 'newHeads',\n        // replace subscription with this name\n        params: 0,\n        outputFormatter: formatter.outputBlockFormatter\n      },\n      'pendingTransactions': {\n        subscriptionName: 'newPendingTransactions',\n        // replace subscription with this name\n        params: 0\n      },\n      'logs': {\n        params: 1,\n        inputFormatter: [formatter.inputLogFormatter],\n        outputFormatter: formatter.outputLogFormatter,\n        // DUBLICATE, also in web3-eth-contract\n        subscriptionHandler: function (output) {\n          if (output.removed) {\n            this.emit('changed', output);\n          } else {\n            this.emit('data', output);\n          }\n          if (_.isFunction(this.callback)) {\n            this.callback(null, output, this);\n          }\n        }\n      },\n      'syncing': {\n        params: 0,\n        outputFormatter: formatter.outputSyncingFormatter,\n        subscriptionHandler: function (output) {\n          var _this = this;\n\n          // fire TRUE at start\n          if (this._isSyncing !== true) {\n            this._isSyncing = true;\n            this.emit('changed', _this._isSyncing);\n            if (_.isFunction(this.callback)) {\n              this.callback(null, _this._isSyncing, this);\n            }\n            setTimeout(function () {\n              _this.emit('data', output);\n              if (_.isFunction(_this.callback)) {\n                _this.callback(null, output, _this);\n              }\n            }, 0);\n\n            // fire sync status\n          } else {\n            this.emit('data', output);\n            if (_.isFunction(_this.callback)) {\n              this.callback(null, output, this);\n            }\n\n            // wait for some time before fireing the FALSE\n            clearTimeout(this._isSyncingTimeout);\n            this._isSyncingTimeout = setTimeout(function () {\n              if (output.currentBlock > output.highestBlock - 200) {\n                _this._isSyncing = false;\n                _this.emit('changed', _this._isSyncing);\n                if (_.isFunction(_this.callback)) {\n                  _this.callback(null, _this._isSyncing, _this);\n                }\n              }\n            }, 500);\n          }\n        }\n      }\n    }\n  })];\n  methods.forEach(function (method) {\n    method.attachToObject(_this);\n    method.setRequestManager(_this._requestManager, _this.accounts); // second param means is eth.accounts (necessary for wallet signing)\n    method.defaultBlock = _this.defaultBlock;\n    method.defaultAccount = _this.defaultAccount;\n  });\n};\ncore.addProviders(Eth);\nmodule.exports = Eth;","map":{"version":3,"names":["_","require","core","helpers","Subscriptions","subscriptions","Method","utils","Net","ENS","Personal","BaseContract","Iban","Accounts","abi","getNetworkType","formatter","formatters","blockCall","args","isString","indexOf","transactionFromBlockCall","uncleCall","getBlockTransactionCountCall","uncleCountCall","Eth","_this","packageInit","arguments","setProvider","apply","net","personal","accounts","Contract","currentProvider","defaultAccount","defaultBlock","Object","defineProperty","get","set","val","toChecksumAddress","inputAddressFormatter","methods","forEach","method","enumerable","clearSubscriptions","_requestManager","bind","self","prototype","create","constructor","ens","name","call","params","outputFormatter","hexToNumber","outputSyncingFormatter","outputBigNumberFormatter","inputFormatter","inputDefaultBlockNumberFormatter","numberToHex","inputBlockNumberFormatter","outputBlockFormatter","outputTransactionFormatter","outputTransactionReceiptFormatter","inputTransactionFormatter","inputSignFormatter","transformPayload","payload","reverse","inputCallFormatter","inputLogFormatter","outputLogFormatter","type","subscriptionName","subscriptionHandler","output","removed","emit","isFunction","callback","_isSyncing","setTimeout","clearTimeout","_isSyncingTimeout","currentBlock","highestBlock","attachToObject","setRequestManager","addProviders","module","exports"],"sources":["/home/peilunnn/Downloads/Internship Projects/gcp-dapp-auction/client/node_modules/truffle-interface-adapter/node_modules/web3-eth/src/index.js"],"sourcesContent":["/*\n This file is part of web3.js.\n\n web3.js is free software: you can redistribute it and/or modify\n it under the terms of the GNU Lesser General Public License as published by\n the Free Software Foundation, either version 3 of the License, or\n (at your option) any later version.\n\n web3.js is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n GNU Lesser General Public License for more details.\n\n You should have received a copy of the GNU Lesser General Public License\n along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n */\n/**\n * @file index.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\n\"use strict\";\n\nvar _ = require('underscore');\nvar core = require('web3-core');\nvar helpers = require('web3-core-helpers');\nvar Subscriptions = require('web3-core-subscriptions').subscriptions;\nvar Method = require('web3-core-method');\nvar utils = require('web3-utils');\nvar Net = require('web3-net');\n\nvar ENS = require('web3-eth-ens');\nvar Personal = require('web3-eth-personal');\nvar BaseContract = require('web3-eth-contract');\nvar Iban = require('web3-eth-iban');\nvar Accounts = require('web3-eth-accounts');\nvar abi = require('web3-eth-abi');\n\nvar getNetworkType = require('./getNetworkType.js');\nvar formatter = helpers.formatters;\n\n\nvar blockCall = function (args) {\n    return (_.isString(args[0]) && args[0].indexOf('0x') === 0) ? \"eth_getBlockByHash\" : \"eth_getBlockByNumber\";\n};\n\nvar transactionFromBlockCall = function (args) {\n    return (_.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getTransactionByBlockHashAndIndex' : 'eth_getTransactionByBlockNumberAndIndex';\n};\n\nvar uncleCall = function (args) {\n    return (_.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getUncleByBlockHashAndIndex' : 'eth_getUncleByBlockNumberAndIndex';\n};\n\nvar getBlockTransactionCountCall = function (args) {\n    return (_.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getBlockTransactionCountByHash' : 'eth_getBlockTransactionCountByNumber';\n};\n\nvar uncleCountCall = function (args) {\n    return (_.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getUncleCountByBlockHash' : 'eth_getUncleCountByBlockNumber';\n};\n\n\nvar Eth = function Eth() {\n    var _this = this;\n\n    // sets _requestmanager\n    core.packageInit(this, arguments);\n\n    // overwrite setProvider\n    var setProvider = this.setProvider;\n    this.setProvider = function () {\n        setProvider.apply(_this, arguments);\n        _this.net.setProvider.apply(_this, arguments);\n        _this.personal.setProvider.apply(_this, arguments);\n        _this.accounts.setProvider.apply(_this, arguments);\n        _this.Contract.setProvider(_this.currentProvider, _this.accounts);\n    };\n\n\n    var defaultAccount = null;\n    var defaultBlock = 'latest';\n\n    Object.defineProperty(this, 'defaultAccount', {\n        get: function () {\n            return defaultAccount;\n        },\n        set: function (val) {\n            if(val) {\n                defaultAccount = utils.toChecksumAddress(formatter.inputAddressFormatter(val));\n            }\n\n            // also set on the Contract object\n            _this.Contract.defaultAccount = defaultAccount;\n            _this.personal.defaultAccount = defaultAccount;\n\n            // update defaultBlock\n            methods.forEach(function(method) {\n                method.defaultAccount = defaultAccount;\n            });\n\n            return val;\n        },\n        enumerable: true\n    });\n    Object.defineProperty(this, 'defaultBlock', {\n        get: function () {\n            return defaultBlock;\n        },\n        set: function (val) {\n            defaultBlock = val;\n            // also set on the Contract object\n            _this.Contract.defaultBlock = defaultBlock;\n            _this.personal.defaultBlock = defaultBlock;\n\n            // update defaultBlock\n            methods.forEach(function(method) {\n                method.defaultBlock = defaultBlock;\n            });\n\n            return val;\n        },\n        enumerable: true\n    });\n\n\n    this.clearSubscriptions = _this._requestManager.clearSubscriptions;\n\n    // add net\n    this.net = new Net(this.currentProvider);\n    // add chain detection\n    this.net.getNetworkType = getNetworkType.bind(this);\n\n    // add accounts\n    this.accounts = new Accounts(this.currentProvider);\n\n    // add personal\n    this.personal = new Personal(this.currentProvider);\n    this.personal.defaultAccount = this.defaultAccount;\n\n    // create a proxy Contract type for this instance, as a Contract's provider\n    // is stored as a class member rather than an instance variable. If we do\n    // not create this proxy type, changing the provider in one instance of\n    // web3-eth would subsequently change the provider for _all_ contract\n    // instances!\n    var self = this;\n    var Contract = function Contract() {\n        BaseContract.apply(this, arguments);\n\n        // when Eth.setProvider is called, call packageInit\n        // on all contract instances instantiated via this Eth\n        // instances. This will update the currentProvider for\n        // the contract instances\n        var _this = this;\n        var setProvider = self.setProvider;\n        self.setProvider = function() {\n          setProvider.apply(self, arguments);\n          core.packageInit(_this, [self.currentProvider]);\n        };\n    };\n\n    Contract.setProvider = function() {\n        BaseContract.setProvider.apply(this, arguments);\n    };\n\n    // make our proxy Contract inherit from web3-eth-contract so that it has all\n    // the right functionality and so that instanceof and friends work properly\n    Contract.prototype = Object.create(BaseContract.prototype);\n    Contract.prototype.constructor = Contract;\n\n    // add contract\n    this.Contract = Contract;\n    this.Contract.defaultAccount = this.defaultAccount;\n    this.Contract.defaultBlock = this.defaultBlock;\n    this.Contract.setProvider(this.currentProvider, this.accounts);\n\n    // add IBAN\n    this.Iban = Iban;\n\n    // add ABI\n    this.abi = abi;\n\n    // add ENS\n    this.ens = new ENS(this);\n\n    var methods = [\n        new Method({\n            name: 'getNodeInfo',\n            call: 'web3_clientVersion'\n        }),\n        new Method({\n            name: 'getProtocolVersion',\n            call: 'eth_protocolVersion',\n            params: 0\n        }),\n        new Method({\n            name: 'getCoinbase',\n            call: 'eth_coinbase',\n            params: 0\n        }),\n        new Method({\n            name: 'isMining',\n            call: 'eth_mining',\n            params: 0\n        }),\n        new Method({\n            name: 'getHashrate',\n            call: 'eth_hashrate',\n            params: 0,\n            outputFormatter: utils.hexToNumber\n        }),\n        new Method({\n            name: 'isSyncing',\n            call: 'eth_syncing',\n            params: 0,\n            outputFormatter: formatter.outputSyncingFormatter\n        }),\n        new Method({\n            name: 'getGasPrice',\n            call: 'eth_gasPrice',\n            params: 0,\n            outputFormatter: formatter.outputBigNumberFormatter\n        }),\n        new Method({\n            name: 'getAccounts',\n            call: 'eth_accounts',\n            params: 0,\n            outputFormatter: utils.toChecksumAddress\n        }),\n        new Method({\n            name: 'getBlockNumber',\n            call: 'eth_blockNumber',\n            params: 0,\n            outputFormatter: utils.hexToNumber\n        }),\n        new Method({\n            name: 'getBalance',\n            call: 'eth_getBalance',\n            params: 2,\n            inputFormatter: [formatter.inputAddressFormatter, formatter.inputDefaultBlockNumberFormatter],\n            outputFormatter: formatter.outputBigNumberFormatter\n        }),\n        new Method({\n            name: 'getStorageAt',\n            call: 'eth_getStorageAt',\n            params: 3,\n            inputFormatter: [formatter.inputAddressFormatter, utils.numberToHex, formatter.inputDefaultBlockNumberFormatter]\n        }),\n        new Method({\n            name: 'getCode',\n            call: 'eth_getCode',\n            params: 2,\n            inputFormatter: [formatter.inputAddressFormatter, formatter.inputDefaultBlockNumberFormatter]\n        }),\n        new Method({\n            name: 'getBlock',\n            call: blockCall,\n            params: 2,\n            inputFormatter: [formatter.inputBlockNumberFormatter, function (val) { return !!val; }],\n            outputFormatter: formatter.outputBlockFormatter\n        }),\n        new Method({\n            name: 'getUncle',\n            call: uncleCall,\n            params: 2,\n            inputFormatter: [formatter.inputBlockNumberFormatter, utils.numberToHex],\n            outputFormatter: formatter.outputBlockFormatter,\n\n        }),\n        new Method({\n            name: 'getBlockTransactionCount',\n            call: getBlockTransactionCountCall,\n            params: 1,\n            inputFormatter: [formatter.inputBlockNumberFormatter],\n            outputFormatter: utils.hexToNumber\n        }),\n        new Method({\n            name: 'getBlockUncleCount',\n            call: uncleCountCall,\n            params: 1,\n            inputFormatter: [formatter.inputBlockNumberFormatter],\n            outputFormatter: utils.hexToNumber\n        }),\n        new Method({\n            name: 'getTransaction',\n            call: 'eth_getTransactionByHash',\n            params: 1,\n            inputFormatter: [null],\n            outputFormatter: formatter.outputTransactionFormatter\n        }),\n        new Method({\n            name: 'getTransactionFromBlock',\n            call: transactionFromBlockCall,\n            params: 2,\n            inputFormatter: [formatter.inputBlockNumberFormatter, utils.numberToHex],\n            outputFormatter: formatter.outputTransactionFormatter\n        }),\n        new Method({\n            name: 'getTransactionReceipt',\n            call: 'eth_getTransactionReceipt',\n            params: 1,\n            inputFormatter: [null],\n            outputFormatter: formatter.outputTransactionReceiptFormatter\n        }),\n        new Method({\n            name: 'getTransactionCount',\n            call: 'eth_getTransactionCount',\n            params: 2,\n            inputFormatter: [formatter.inputAddressFormatter, formatter.inputDefaultBlockNumberFormatter],\n            outputFormatter: utils.hexToNumber\n        }),\n        new Method({\n            name: 'sendSignedTransaction',\n            call: 'eth_sendRawTransaction',\n            params: 1,\n            inputFormatter: [null]\n        }),\n        new Method({\n            name: 'signTransaction',\n            call: 'eth_signTransaction',\n            params: 1,\n            inputFormatter: [formatter.inputTransactionFormatter]\n        }),\n        new Method({\n            name: 'sendTransaction',\n            call: 'eth_sendTransaction',\n            params: 1,\n            inputFormatter: [formatter.inputTransactionFormatter]\n        }),\n        new Method({\n            name: 'sign',\n            call: 'eth_sign',\n            params: 2,\n            inputFormatter: [formatter.inputSignFormatter, formatter.inputAddressFormatter],\n            transformPayload: function (payload) {\n                payload.params.reverse();\n                return payload;\n            }\n        }),\n        new Method({\n            name: 'call',\n            call: 'eth_call',\n            params: 2,\n            inputFormatter: [formatter.inputCallFormatter, formatter.inputDefaultBlockNumberFormatter]\n        }),\n        new Method({\n            name: 'estimateGas',\n            call: 'eth_estimateGas',\n            params: 1,\n            inputFormatter: [formatter.inputCallFormatter],\n            outputFormatter: utils.hexToNumber\n        }),\n        new Method({\n            name: 'submitWork',\n            call: 'eth_submitWork',\n            params: 3\n        }),\n        new Method({\n            name: 'getWork',\n            call: 'eth_getWork',\n            params: 0\n        }),\n        new Method({\n            name: 'getPastLogs',\n            call: 'eth_getLogs',\n            params: 1,\n            inputFormatter: [formatter.inputLogFormatter],\n            outputFormatter: formatter.outputLogFormatter\n        }),\n\n        // subscriptions\n        new Subscriptions({\n            name: 'subscribe',\n            type: 'eth',\n            subscriptions: {\n                'newBlockHeaders': {\n                    // TODO rename on RPC side?\n                    subscriptionName: 'newHeads', // replace subscription with this name\n                    params: 0,\n                    outputFormatter: formatter.outputBlockFormatter\n                },\n                'pendingTransactions': {\n                    subscriptionName: 'newPendingTransactions', // replace subscription with this name\n                    params: 0\n                },\n                'logs': {\n                    params: 1,\n                    inputFormatter: [formatter.inputLogFormatter],\n                    outputFormatter: formatter.outputLogFormatter,\n                    // DUBLICATE, also in web3-eth-contract\n                    subscriptionHandler: function (output) {\n                        if(output.removed) {\n                            this.emit('changed', output);\n                        } else {\n                            this.emit('data', output);\n                        }\n\n                        if (_.isFunction(this.callback)) {\n                            this.callback(null, output, this);\n                        }\n                    }\n                },\n                'syncing': {\n                    params: 0,\n                    outputFormatter: formatter.outputSyncingFormatter,\n                    subscriptionHandler: function (output) {\n                        var _this = this;\n\n                        // fire TRUE at start\n                        if(this._isSyncing !== true) {\n                            this._isSyncing = true;\n                            this.emit('changed', _this._isSyncing);\n\n                            if (_.isFunction(this.callback)) {\n                                this.callback(null, _this._isSyncing, this);\n                            }\n\n                            setTimeout(function () {\n                                _this.emit('data', output);\n\n                                if (_.isFunction(_this.callback)) {\n                                    _this.callback(null, output, _this);\n                                }\n                            }, 0);\n\n                            // fire sync status\n                        } else {\n                            this.emit('data', output);\n                            if (_.isFunction(_this.callback)) {\n                                this.callback(null, output, this);\n                            }\n\n                            // wait for some time before fireing the FALSE\n                            clearTimeout(this._isSyncingTimeout);\n                            this._isSyncingTimeout = setTimeout(function () {\n                                if(output.currentBlock > output.highestBlock - 200) {\n                                    _this._isSyncing = false;\n                                    _this.emit('changed', _this._isSyncing);\n\n                                    if (_.isFunction(_this.callback)) {\n                                        _this.callback(null, _this._isSyncing, _this);\n                                    }\n                                }\n                            }, 500);\n                        }\n                    }\n                }\n            }\n        })\n    ];\n\n    methods.forEach(function(method) {\n        method.attachToObject(_this);\n        method.setRequestManager(_this._requestManager, _this.accounts); // second param means is eth.accounts (necessary for wallet signing)\n        method.defaultBlock = _this.defaultBlock;\n        method.defaultAccount = _this.defaultAccount;\n    });\n\n};\n\ncore.addProviders(Eth);\n\n\nmodule.exports = Eth;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}