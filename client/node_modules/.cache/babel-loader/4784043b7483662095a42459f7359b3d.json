{"ast":null,"code":"var Reason = require('./reason');\nvar handlers = require('./handlers');\nvar override = {\n  timeoutMessage: 'not mined within',\n  // Substring of timeout err fired by web3\n  defaultMaxBlocks: 50,\n  // Max # of blocks web3 will wait for a tx\n  pollingInterval: 1000,\n  /**\n   * Attempts to extract receipt object from Web3 error message\n   * @param  {Object} message       web3 error\n   * @return {Object|undefined} receipt\n   */\n  extractReceipt(message) {\n    const hasReceipt = message && message.includes('{');\n    message.includes('}');\n    if (hasReceipt) {\n      const receiptString = '{' + message.split('{')[1].trim();\n      try {\n        return JSON.parse(receiptString);\n      } catch (err) {\n        // ignore\n      }\n    }\n  },\n  /**\n   * Fired after web3 ceases to support subscriptions if user has specified\n   * a higher block wait time than web3's 50 blocks limit. Opens a subscription to listen\n   * for new blocks and begins evaluating whether block height has reached the user\n   * defined timeout threshhold. Resolves either a contract instance or a transaction receipt.\n   *\n   * @param  {Object} context execution state\n   * @param  {Object} err     error\n   */\n  start: async function (context, web3Error) {\n    var constructor = this;\n    var blockNumber = null;\n    var currentBlock = override.defaultMaxBlocks;\n    var maxBlocks = constructor.timeoutBlocks;\n    var timedOut = web3Error.message && web3Error.message.includes(override.timeoutMessage);\n    var shouldWait = maxBlocks > currentBlock;\n\n    // Reject after attempting to get reason string if we shouldn't be waiting.\n    if (!timedOut || !shouldWait) {\n      // We might have been routed here in web3 >= beta.34 by their own status check\n      // error. We want to extract the receipt, emit a receipt event\n      // and reject it ourselves.\n      var receipt = override.extractReceipt(web3Error.message);\n      if (receipt) {\n        await handlers.receipt(context, receipt);\n        return;\n      }\n\n      // This will run if there's a reason and no status field\n      // e.g: revert with reason ganache-cli --vmErrorsOnRPCResponse=true\n      var reason = await Reason.get(context.params, constructor.web3);\n      if (reason) {\n        web3Error.reason = reason;\n        web3Error.message += ` -- Reason given: ${reason}.`;\n      }\n      return context.promiEvent.reject(web3Error);\n    }\n\n    // This will run every block from now until contract.timeoutBlocks\n    var listener = function (pollID) {\n      var self = this;\n      currentBlock++;\n      if (currentBlock > constructor.timeoutBlocks) {\n        clearInterval(pollID);\n        return;\n      }\n      constructor.web3.eth.getTransactionReceipt(context.transactionHash).then(result => {\n        if (!result) return;\n        result.contractAddress ? constructor.at(result.contractAddress).then(context.promiEvent.resolve).catch(context.promiEvent.reject) : constructor.promiEvent.resolve(result);\n      }).catch(err => {\n        clearInterval(pollID);\n        context.promiEvent.reject(err);\n      });\n    };\n\n    // Start polling\n    let currentPollingBlock = await constructor.web3.eth.getBlockNumber();\n    const pollID = setInterval(async () => {\n      const newBlock = await constructor.web3.eth.getBlockNumber();\n      if (newBlock > currentPollingBlock) {\n        currentPollingBlock = newBlock;\n        listener(pollID);\n      }\n    }, override.pollingInterval);\n  }\n};\nmodule.exports = override;","map":{"version":3,"names":["Reason","require","handlers","override","timeoutMessage","defaultMaxBlocks","pollingInterval","extractReceipt","message","hasReceipt","includes","receiptString","split","trim","JSON","parse","err","start","context","web3Error","constructor","blockNumber","currentBlock","maxBlocks","timeoutBlocks","timedOut","shouldWait","receipt","reason","get","params","web3","promiEvent","reject","listener","pollID","self","clearInterval","eth","getTransactionReceipt","transactionHash","then","result","contractAddress","at","resolve","catch","currentPollingBlock","getBlockNumber","setInterval","newBlock","module","exports"],"sources":["/home/peilunnn/Downloads/Internship Projects/gcp-dapp-auction/client/node_modules/truffle-contract/lib/override.js"],"sourcesContent":["var Reason = require('./reason');\nvar handlers = require('./handlers');\n\nvar override = {\n\n  timeoutMessage: 'not mined within', // Substring of timeout err fired by web3\n  defaultMaxBlocks: 50,               // Max # of blocks web3 will wait for a tx\n  pollingInterval: 1000,\n\n  /**\n   * Attempts to extract receipt object from Web3 error message\n   * @param  {Object} message       web3 error\n   * @return {Object|undefined} receipt\n   */\n  extractReceipt(message){\n    const hasReceipt = message &&\n                       message.includes('{');\n                       message.includes('}');\n\n    if (hasReceipt){\n      const receiptString =  '{' + message.split('{')[1].trim();\n      try {\n        return JSON.parse(receiptString);\n      } catch (err){\n        // ignore\n      }\n    }\n  },\n\n  /**\n   * Fired after web3 ceases to support subscriptions if user has specified\n   * a higher block wait time than web3's 50 blocks limit. Opens a subscription to listen\n   * for new blocks and begins evaluating whether block height has reached the user\n   * defined timeout threshhold. Resolves either a contract instance or a transaction receipt.\n   *\n   * @param  {Object} context execution state\n   * @param  {Object} err     error\n   */\n  start: async function(context, web3Error){\n    var constructor = this;\n    var blockNumber = null;\n    var currentBlock = override.defaultMaxBlocks;\n    var maxBlocks = constructor.timeoutBlocks;\n\n    var timedOut = web3Error.message && web3Error.message.includes(override.timeoutMessage);\n    var shouldWait = maxBlocks > currentBlock;\n\n    // Reject after attempting to get reason string if we shouldn't be waiting.\n    if (!timedOut || !shouldWait){\n\n      // We might have been routed here in web3 >= beta.34 by their own status check\n      // error. We want to extract the receipt, emit a receipt event\n      // and reject it ourselves.\n      var receipt = override.extractReceipt(web3Error.message);\n      if (receipt){\n        await handlers.receipt(context, receipt);\n        return;\n      }\n\n      // This will run if there's a reason and no status field\n      // e.g: revert with reason ganache-cli --vmErrorsOnRPCResponse=true\n      var reason = await Reason.get(context.params, constructor.web3);\n      if (reason) {\n        web3Error.reason = reason;\n        web3Error.message += ` -- Reason given: ${reason}.`;\n      }\n\n      return context.promiEvent.reject(web3Error);\n    }\n\n    // This will run every block from now until contract.timeoutBlocks\n    var listener = function(pollID){\n      var self = this;\n      currentBlock++;\n\n      if (currentBlock > constructor.timeoutBlocks){\n        clearInterval(pollID);\n        return;\n      }\n\n      constructor.web3.eth.getTransactionReceipt(context.transactionHash)\n        .then(result => {\n          if (!result) return;\n\n          (result.contractAddress)\n            ? constructor\n                .at(result.contractAddress)\n                .then(context.promiEvent.resolve)\n                .catch(context.promiEvent.reject)\n\n            : constructor.promiEvent.resolve(result);\n\n        })\n        .catch(err => {\n          clearInterval(pollID);\n          context.promiEvent.reject(err);\n        });\n    };\n\n    // Start polling\n    let currentPollingBlock = await constructor.web3.eth.getBlockNumber();\n\n    const pollID = setInterval(async() => {\n      const newBlock = await constructor.web3.eth.getBlockNumber();\n\n      if(newBlock > currentPollingBlock){\n        currentPollingBlock = newBlock;\n        listener(pollID);\n      }\n    }, override.pollingInterval);\n  },\n};\n\nmodule.exports = override;\n"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,UAAU,CAAC;AAChC,IAAIC,QAAQ,GAAGD,OAAO,CAAC,YAAY,CAAC;AAEpC,IAAIE,QAAQ,GAAG;EAEbC,cAAc,EAAE,kBAAkB;EAAE;EACpCC,gBAAgB,EAAE,EAAE;EAAgB;EACpCC,eAAe,EAAE,IAAI;EAErB;AACF;AACA;AACA;AACA;EACEC,cAAc,CAACC,OAAO,EAAC;IACrB,MAAMC,UAAU,GAAGD,OAAO,IACPA,OAAO,CAACE,QAAQ,CAAC,GAAG,CAAC;IACrBF,OAAO,CAACE,QAAQ,CAAC,GAAG,CAAC;IAExC,IAAID,UAAU,EAAC;MACb,MAAME,aAAa,GAAI,GAAG,GAAGH,OAAO,CAACI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACC,IAAI,EAAE;MACzD,IAAI;QACF,OAAOC,IAAI,CAACC,KAAK,CAACJ,aAAa,CAAC;MAClC,CAAC,CAAC,OAAOK,GAAG,EAAC;QACX;MACF;IACF;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,KAAK,EAAE,gBAAeC,OAAO,EAAEC,SAAS,EAAC;IACvC,IAAIC,WAAW,GAAG,IAAI;IACtB,IAAIC,WAAW,GAAG,IAAI;IACtB,IAAIC,YAAY,GAAGnB,QAAQ,CAACE,gBAAgB;IAC5C,IAAIkB,SAAS,GAAGH,WAAW,CAACI,aAAa;IAEzC,IAAIC,QAAQ,GAAGN,SAAS,CAACX,OAAO,IAAIW,SAAS,CAACX,OAAO,CAACE,QAAQ,CAACP,QAAQ,CAACC,cAAc,CAAC;IACvF,IAAIsB,UAAU,GAAGH,SAAS,GAAGD,YAAY;;IAEzC;IACA,IAAI,CAACG,QAAQ,IAAI,CAACC,UAAU,EAAC;MAE3B;MACA;MACA;MACA,IAAIC,OAAO,GAAGxB,QAAQ,CAACI,cAAc,CAACY,SAAS,CAACX,OAAO,CAAC;MACxD,IAAImB,OAAO,EAAC;QACV,MAAMzB,QAAQ,CAACyB,OAAO,CAACT,OAAO,EAAES,OAAO,CAAC;QACxC;MACF;;MAEA;MACA;MACA,IAAIC,MAAM,GAAG,MAAM5B,MAAM,CAAC6B,GAAG,CAACX,OAAO,CAACY,MAAM,EAAEV,WAAW,CAACW,IAAI,CAAC;MAC/D,IAAIH,MAAM,EAAE;QACVT,SAAS,CAACS,MAAM,GAAGA,MAAM;QACzBT,SAAS,CAACX,OAAO,IAAK,qBAAoBoB,MAAO,GAAE;MACrD;MAEA,OAAOV,OAAO,CAACc,UAAU,CAACC,MAAM,CAACd,SAAS,CAAC;IAC7C;;IAEA;IACA,IAAIe,QAAQ,GAAG,UAASC,MAAM,EAAC;MAC7B,IAAIC,IAAI,GAAG,IAAI;MACfd,YAAY,EAAE;MAEd,IAAIA,YAAY,GAAGF,WAAW,CAACI,aAAa,EAAC;QAC3Ca,aAAa,CAACF,MAAM,CAAC;QACrB;MACF;MAEAf,WAAW,CAACW,IAAI,CAACO,GAAG,CAACC,qBAAqB,CAACrB,OAAO,CAACsB,eAAe,CAAC,CAChEC,IAAI,CAACC,MAAM,IAAI;QACd,IAAI,CAACA,MAAM,EAAE;QAEZA,MAAM,CAACC,eAAe,GACnBvB,WAAW,CACRwB,EAAE,CAACF,MAAM,CAACC,eAAe,CAAC,CAC1BF,IAAI,CAACvB,OAAO,CAACc,UAAU,CAACa,OAAO,CAAC,CAChCC,KAAK,CAAC5B,OAAO,CAACc,UAAU,CAACC,MAAM,CAAC,GAEnCb,WAAW,CAACY,UAAU,CAACa,OAAO,CAACH,MAAM,CAAC;MAE5C,CAAC,CAAC,CACDI,KAAK,CAAC9B,GAAG,IAAI;QACZqB,aAAa,CAACF,MAAM,CAAC;QACrBjB,OAAO,CAACc,UAAU,CAACC,MAAM,CAACjB,GAAG,CAAC;MAChC,CAAC,CAAC;IACN,CAAC;;IAED;IACA,IAAI+B,mBAAmB,GAAG,MAAM3B,WAAW,CAACW,IAAI,CAACO,GAAG,CAACU,cAAc,EAAE;IAErE,MAAMb,MAAM,GAAGc,WAAW,CAAC,YAAW;MACpC,MAAMC,QAAQ,GAAG,MAAM9B,WAAW,CAACW,IAAI,CAACO,GAAG,CAACU,cAAc,EAAE;MAE5D,IAAGE,QAAQ,GAAGH,mBAAmB,EAAC;QAChCA,mBAAmB,GAAGG,QAAQ;QAC9BhB,QAAQ,CAACC,MAAM,CAAC;MAClB;IACF,CAAC,EAAEhC,QAAQ,CAACG,eAAe,CAAC;EAC9B;AACF,CAAC;AAED6C,MAAM,CAACC,OAAO,GAAGjD,QAAQ"},"metadata":{},"sourceType":"script"}