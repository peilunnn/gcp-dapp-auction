{"ast":null,"code":"/**\n * Utilities for reformatting web3 outputs\n */\nconst BigNumber = require(\"bignumber.js/bignumber\");\nconst web3Utils = require(\"web3-utils\");\n\n/**\n * Converts from string to other number format\n * @param  {String} val    number string returned by web3\n * @param  {String} format name of format to convert to\n * @return {Object|String} converted value\n */\nconst _convertNumber = function (val, format) {\n  const badFormatMsg = `Attempting to convert to unknown number format: ${format}`;\n  switch (format) {\n    case \"BigNumber\":\n      return new BigNumber(val);\n    case \"BN\":\n      return web3Utils.toBN(val);\n    case \"String\":\n      return val;\n    default:\n      throw new Error(badFormatMsg);\n  }\n};\n\n/**\n * Converts arrays of number strings to other number formats\n * @param  {String[]} arr       number string array returned by web3\n * @param  {String}   format    name of format to convert to\n * @return {Object[]|String[]}  array of converted values\n */\nconst _convertNumberArray = function (arr, format) {\n  return arr.map(item => _convertNumber(item, format));\n};\n\n/**\n * Reformats numbers in the result/result-object of a web3 call.\n * Possible forms of `result` are:\n *   - object (with index keys and optionally, named keys)\n *   - array\n *   - single primitive\n * @param  {String|Object|Array} result      web3 call result\n * @param  {Array}               abiSegment  event params OR .call outputs\n * @return {String|Object|Array} reformatted result\n */\nconst numbers = function (result, abiSegment) {\n  const format = this.numberFormat;\n  abiSegment.forEach((output, i) => {\n    // output is a number type (uint || int);\n    if (output.type.includes(\"int\")) {\n      // output is an array type\n      if (output.type.includes(\"[\")) {\n        // result is array\n        if (Array.isArray(result)) {\n          result = _convertNumberArray(result, format);\n\n          // result is object\n        } else {\n          // output has name\n          if (output.name.length) {\n            result[output.name] = _convertNumberArray(result[output.name], format);\n          }\n          // output will always have an index key\n          result[i] = _convertNumberArray(result[i], format);\n        }\n        //\n      } else if (typeof result === \"object\") {\n        // output has name\n        if (output.name.length) {\n          result[output.name] = _convertNumber(result[output.name], format);\n        }\n\n        // output will always have an index key\n        result[i] = _convertNumber(result[i], format);\n      } else {\n        result = _convertNumber(result, format);\n      }\n    }\n  });\n  return result;\n};\nmodule.exports = {\n  numbers: numbers\n};","map":{"version":3,"names":["BigNumber","require","web3Utils","_convertNumber","val","format","badFormatMsg","toBN","Error","_convertNumberArray","arr","map","item","numbers","result","abiSegment","numberFormat","forEach","output","i","type","includes","Array","isArray","name","length","module","exports"],"sources":["/home/peilunnn/Downloads/Internship Projects/gcp-dapp-auction/client/node_modules/truffle-contract/lib/reformat.js"],"sourcesContent":["/**\n * Utilities for reformatting web3 outputs\n */\nconst BigNumber = require(\"bignumber.js/bignumber\");\nconst web3Utils = require(\"web3-utils\");\n\n/**\n * Converts from string to other number format\n * @param  {String} val    number string returned by web3\n * @param  {String} format name of format to convert to\n * @return {Object|String} converted value\n */\nconst _convertNumber = function(val, format) {\n  const badFormatMsg = `Attempting to convert to unknown number format: ${format}`;\n\n  switch (format) {\n    case \"BigNumber\":\n      return new BigNumber(val);\n    case \"BN\":\n      return web3Utils.toBN(val);\n    case \"String\":\n      return val;\n    default:\n      throw new Error(badFormatMsg);\n  }\n};\n\n/**\n * Converts arrays of number strings to other number formats\n * @param  {String[]} arr       number string array returned by web3\n * @param  {String}   format    name of format to convert to\n * @return {Object[]|String[]}  array of converted values\n */\nconst _convertNumberArray = function(arr, format) {\n  return arr.map(item => _convertNumber(item, format));\n};\n\n/**\n * Reformats numbers in the result/result-object of a web3 call.\n * Possible forms of `result` are:\n *   - object (with index keys and optionally, named keys)\n *   - array\n *   - single primitive\n * @param  {String|Object|Array} result      web3 call result\n * @param  {Array}               abiSegment  event params OR .call outputs\n * @return {String|Object|Array} reformatted result\n */\nconst numbers = function(result, abiSegment) {\n  const format = this.numberFormat;\n\n  abiSegment.forEach((output, i) => {\n    // output is a number type (uint || int);\n    if (output.type.includes(\"int\")) {\n      // output is an array type\n      if (output.type.includes(\"[\")) {\n        // result is array\n        if (Array.isArray(result)) {\n          result = _convertNumberArray(result, format);\n\n          // result is object\n        } else {\n          // output has name\n          if (output.name.length) {\n            result[output.name] = _convertNumberArray(\n              result[output.name],\n              format\n            );\n          }\n          // output will always have an index key\n          result[i] = _convertNumberArray(result[i], format);\n        }\n        //\n      } else if (typeof result === \"object\") {\n        // output has name\n        if (output.name.length) {\n          result[output.name] = _convertNumber(result[output.name], format);\n        }\n\n        // output will always have an index key\n        result[i] = _convertNumber(result[i], format);\n      } else {\n        result = _convertNumber(result, format);\n      }\n    }\n  });\n  return result;\n};\n\nmodule.exports = {\n  numbers: numbers\n};\n"],"mappings":"AAAA;AACA;AACA;AACA,MAAMA,SAAS,GAAGC,OAAO,CAAC,wBAAwB,CAAC;AACnD,MAAMC,SAAS,GAAGD,OAAO,CAAC,YAAY,CAAC;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA,MAAME,cAAc,GAAG,UAASC,GAAG,EAAEC,MAAM,EAAE;EAC3C,MAAMC,YAAY,GAAI,mDAAkDD,MAAO,EAAC;EAEhF,QAAQA,MAAM;IACZ,KAAK,WAAW;MACd,OAAO,IAAIL,SAAS,CAACI,GAAG,CAAC;IAC3B,KAAK,IAAI;MACP,OAAOF,SAAS,CAACK,IAAI,CAACH,GAAG,CAAC;IAC5B,KAAK,QAAQ;MACX,OAAOA,GAAG;IACZ;MACE,MAAM,IAAII,KAAK,CAACF,YAAY,CAAC;EAAC;AAEpC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,MAAMG,mBAAmB,GAAG,UAASC,GAAG,EAAEL,MAAM,EAAE;EAChD,OAAOK,GAAG,CAACC,GAAG,CAACC,IAAI,IAAIT,cAAc,CAACS,IAAI,EAAEP,MAAM,CAAC,CAAC;AACtD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMQ,OAAO,GAAG,UAASC,MAAM,EAAEC,UAAU,EAAE;EAC3C,MAAMV,MAAM,GAAG,IAAI,CAACW,YAAY;EAEhCD,UAAU,CAACE,OAAO,CAAC,CAACC,MAAM,EAAEC,CAAC,KAAK;IAChC;IACA,IAAID,MAAM,CAACE,IAAI,CAACC,QAAQ,CAAC,KAAK,CAAC,EAAE;MAC/B;MACA,IAAIH,MAAM,CAACE,IAAI,CAACC,QAAQ,CAAC,GAAG,CAAC,EAAE;QAC7B;QACA,IAAIC,KAAK,CAACC,OAAO,CAACT,MAAM,CAAC,EAAE;UACzBA,MAAM,GAAGL,mBAAmB,CAACK,MAAM,EAAET,MAAM,CAAC;;UAE5C;QACF,CAAC,MAAM;UACL;UACA,IAAIa,MAAM,CAACM,IAAI,CAACC,MAAM,EAAE;YACtBX,MAAM,CAACI,MAAM,CAACM,IAAI,CAAC,GAAGf,mBAAmB,CACvCK,MAAM,CAACI,MAAM,CAACM,IAAI,CAAC,EACnBnB,MAAM,CACP;UACH;UACA;UACAS,MAAM,CAACK,CAAC,CAAC,GAAGV,mBAAmB,CAACK,MAAM,CAACK,CAAC,CAAC,EAAEd,MAAM,CAAC;QACpD;QACA;MACF,CAAC,MAAM,IAAI,OAAOS,MAAM,KAAK,QAAQ,EAAE;QACrC;QACA,IAAII,MAAM,CAACM,IAAI,CAACC,MAAM,EAAE;UACtBX,MAAM,CAACI,MAAM,CAACM,IAAI,CAAC,GAAGrB,cAAc,CAACW,MAAM,CAACI,MAAM,CAACM,IAAI,CAAC,EAAEnB,MAAM,CAAC;QACnE;;QAEA;QACAS,MAAM,CAACK,CAAC,CAAC,GAAGhB,cAAc,CAACW,MAAM,CAACK,CAAC,CAAC,EAAEd,MAAM,CAAC;MAC/C,CAAC,MAAM;QACLS,MAAM,GAAGX,cAAc,CAACW,MAAM,EAAET,MAAM,CAAC;MACzC;IACF;EACF,CAAC,CAAC;EACF,OAAOS,MAAM;AACf,CAAC;AAEDY,MAAM,CAACC,OAAO,GAAG;EACfd,OAAO,EAAEA;AACX,CAAC"},"metadata":{},"sourceType":"script"}