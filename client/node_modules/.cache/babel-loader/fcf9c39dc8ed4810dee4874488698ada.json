{"ast":null,"code":"/**\n * Methods to fetch and decode reason string from ganache when a tx errors.\n */\n\nconst reason = {\n  /**\n   * Extracts a reason string from `eth_call` response\n   * @param  {Object}           res  response from `eth_call` to extract reason\n   * @param  {Web3}             web3 a helpful friend\n   * @return {String|Undefined}      decoded reason string\n   */\n  _extract: function (res, web3) {\n    if (!res || !res.error && !res.result) return;\n    const errorStringHash = '0x08c379a0';\n    const isObject = res && typeof res === 'object' && res.error && res.error.data;\n    const isString = res && typeof res === 'object' && typeof res.result === 'string';\n    if (isObject) {\n      const data = res.error.data;\n      const hash = Object.keys(data)[0];\n      if (data[hash].return && data[hash].return.includes(errorStringHash)) {\n        return web3.eth.abi.decodeParameter('string', data[hash].return.slice(10));\n      }\n    } else if (isString && res.result.includes(errorStringHash)) {\n      return web3.eth.abi.decodeParameter('string', res.result.slice(10));\n    }\n  },\n  /**\n   * Runs tx via `eth_call` and resolves a reason string if it exists on the response.\n   * @param  {Object} web3\n   * @return {String|Undefined}\n   */\n  get: function (params, web3) {\n    const packet = {\n      jsonrpc: '2.0',\n      method: 'eth_call',\n      params: [params, 'latest'],\n      id: new Date().getTime()\n    };\n    return new Promise(resolve => {\n      web3.currentProvider.send(packet, (err, response) => {\n        const reasonString = reason._extract(response, web3);\n        resolve(reasonString);\n      });\n    });\n  }\n};\nmodule.exports = reason;","map":{"version":3,"names":["reason","_extract","res","web3","error","result","errorStringHash","isObject","data","isString","hash","Object","keys","return","includes","eth","abi","decodeParameter","slice","get","params","packet","jsonrpc","method","id","Date","getTime","Promise","resolve","currentProvider","send","err","response","reasonString","module","exports"],"sources":["/home/peilunnn/Downloads/Internship Projects/gcp-dapp-auction/client/node_modules/truffle-contract/lib/reason.js"],"sourcesContent":["/**\n * Methods to fetch and decode reason string from ganache when a tx errors.\n */\n\nconst reason = {\n  /**\n   * Extracts a reason string from `eth_call` response\n   * @param  {Object}           res  response from `eth_call` to extract reason\n   * @param  {Web3}             web3 a helpful friend\n   * @return {String|Undefined}      decoded reason string\n   */\n  _extract: function(res, web3){\n    if (!res || (!res.error && !res.result)) return;\n\n    const errorStringHash = '0x08c379a0';\n\n    const isObject = res && typeof res === 'object' && res.error && res.error.data;\n    const isString = res && typeof res === 'object' && typeof res.result === 'string';\n\n    if (isObject) {\n      const data = res.error.data;\n      const hash = Object.keys(data)[0];\n\n      if (data[hash].return && data[hash].return.includes(errorStringHash)){\n        return web3.eth.abi.decodeParameter('string', data[hash].return.slice(10));\n      }\n\n    } else if (isString && res.result.includes(errorStringHash)){\n      return web3.eth.abi.decodeParameter('string', res.result.slice(10));\n    }\n  },\n\n  /**\n   * Runs tx via `eth_call` and resolves a reason string if it exists on the response.\n   * @param  {Object} web3\n   * @return {String|Undefined}\n   */\n  get: function(params, web3){\n    const packet = {\n      jsonrpc: '2.0',\n      method: 'eth_call',\n      params: [params, 'latest'],\n      id: new Date().getTime(),\n    };\n\n    return new Promise(resolve => {\n      web3.currentProvider.send(packet, (err, response) => {\n        const reasonString = reason._extract(response, web3);\n        resolve(reasonString);\n      });\n    });\n  },\n};\n\nmodule.exports = reason;\n"],"mappings":"AAAA;AACA;AACA;;AAEA,MAAMA,MAAM,GAAG;EACb;AACF;AACA;AACA;AACA;AACA;EACEC,QAAQ,EAAE,UAASC,GAAG,EAAEC,IAAI,EAAC;IAC3B,IAAI,CAACD,GAAG,IAAK,CAACA,GAAG,CAACE,KAAK,IAAI,CAACF,GAAG,CAACG,MAAO,EAAE;IAEzC,MAAMC,eAAe,GAAG,YAAY;IAEpC,MAAMC,QAAQ,GAAGL,GAAG,IAAI,OAAOA,GAAG,KAAK,QAAQ,IAAIA,GAAG,CAACE,KAAK,IAAIF,GAAG,CAACE,KAAK,CAACI,IAAI;IAC9E,MAAMC,QAAQ,GAAGP,GAAG,IAAI,OAAOA,GAAG,KAAK,QAAQ,IAAI,OAAOA,GAAG,CAACG,MAAM,KAAK,QAAQ;IAEjF,IAAIE,QAAQ,EAAE;MACZ,MAAMC,IAAI,GAAGN,GAAG,CAACE,KAAK,CAACI,IAAI;MAC3B,MAAME,IAAI,GAAGC,MAAM,CAACC,IAAI,CAACJ,IAAI,CAAC,CAAC,CAAC,CAAC;MAEjC,IAAIA,IAAI,CAACE,IAAI,CAAC,CAACG,MAAM,IAAIL,IAAI,CAACE,IAAI,CAAC,CAACG,MAAM,CAACC,QAAQ,CAACR,eAAe,CAAC,EAAC;QACnE,OAAOH,IAAI,CAACY,GAAG,CAACC,GAAG,CAACC,eAAe,CAAC,QAAQ,EAAET,IAAI,CAACE,IAAI,CAAC,CAACG,MAAM,CAACK,KAAK,CAAC,EAAE,CAAC,CAAC;MAC5E;IAEF,CAAC,MAAM,IAAIT,QAAQ,IAAIP,GAAG,CAACG,MAAM,CAACS,QAAQ,CAACR,eAAe,CAAC,EAAC;MAC1D,OAAOH,IAAI,CAACY,GAAG,CAACC,GAAG,CAACC,eAAe,CAAC,QAAQ,EAAEf,GAAG,CAACG,MAAM,CAACa,KAAK,CAAC,EAAE,CAAC,CAAC;IACrE;EACF,CAAC;EAED;AACF;AACA;AACA;AACA;EACEC,GAAG,EAAE,UAASC,MAAM,EAAEjB,IAAI,EAAC;IACzB,MAAMkB,MAAM,GAAG;MACbC,OAAO,EAAE,KAAK;MACdC,MAAM,EAAE,UAAU;MAClBH,MAAM,EAAE,CAACA,MAAM,EAAE,QAAQ,CAAC;MAC1BI,EAAE,EAAE,IAAIC,IAAI,EAAE,CAACC,OAAO;IACxB,CAAC;IAED,OAAO,IAAIC,OAAO,CAACC,OAAO,IAAI;MAC5BzB,IAAI,CAAC0B,eAAe,CAACC,IAAI,CAACT,MAAM,EAAE,CAACU,GAAG,EAAEC,QAAQ,KAAK;QACnD,MAAMC,YAAY,GAAGjC,MAAM,CAACC,QAAQ,CAAC+B,QAAQ,EAAE7B,IAAI,CAAC;QACpDyB,OAAO,CAACK,YAAY,CAAC;MACvB,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;AACF,CAAC;AAEDC,MAAM,CAACC,OAAO,GAAGnC,MAAM"},"metadata":{},"sourceType":"script"}