{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar bytes_1 = require(\"./bytes\");\nvar UnicodeNormalizationForm;\n(function (UnicodeNormalizationForm) {\n  UnicodeNormalizationForm[\"current\"] = \"\";\n  UnicodeNormalizationForm[\"NFC\"] = \"NFC\";\n  UnicodeNormalizationForm[\"NFD\"] = \"NFD\";\n  UnicodeNormalizationForm[\"NFKC\"] = \"NFKC\";\n  UnicodeNormalizationForm[\"NFKD\"] = \"NFKD\";\n})(UnicodeNormalizationForm = exports.UnicodeNormalizationForm || (exports.UnicodeNormalizationForm = {}));\n;\n// http://stackoverflow.com/questions/18729405/how-to-convert-utf8-string-to-byte-array\nfunction toUtf8Bytes(str, form) {\n  if (form === void 0) {\n    form = UnicodeNormalizationForm.current;\n  }\n  if (form != UnicodeNormalizationForm.current) {\n    str = str.normalize(form);\n  }\n  var result = [];\n  var offset = 0;\n  for (var i = 0; i < str.length; i++) {\n    var c = str.charCodeAt(i);\n    if (c < 128) {\n      result[offset++] = c;\n    } else if (c < 2048) {\n      result[offset++] = c >> 6 | 192;\n      result[offset++] = c & 63 | 128;\n    } else if ((c & 0xFC00) == 0xD800 && i + 1 < str.length && (str.charCodeAt(i + 1) & 0xFC00) == 0xDC00) {\n      // Surrogate Pair\n      c = 0x10000 + ((c & 0x03FF) << 10) + (str.charCodeAt(++i) & 0x03FF);\n      result[offset++] = c >> 18 | 240;\n      result[offset++] = c >> 12 & 63 | 128;\n      result[offset++] = c >> 6 & 63 | 128;\n      result[offset++] = c & 63 | 128;\n    } else {\n      result[offset++] = c >> 12 | 224;\n      result[offset++] = c >> 6 & 63 | 128;\n      result[offset++] = c & 63 | 128;\n    }\n  }\n  return bytes_1.arrayify(result);\n}\nexports.toUtf8Bytes = toUtf8Bytes;\n;\n// http://stackoverflow.com/questions/13356493/decode-utf-8-with-javascript#13691499\nfunction toUtf8String(bytes) {\n  bytes = bytes_1.arrayify(bytes);\n  var result = '';\n  var i = 0;\n  // Invalid bytes are ignored\n  while (i < bytes.length) {\n    var c = bytes[i++];\n    if (c >> 7 == 0) {\n      // 0xxx xxxx\n      result += String.fromCharCode(c);\n      continue;\n    }\n    // Invalid starting byte\n    if (c >> 6 == 0x02) {\n      continue;\n    }\n    // Multibyte; how many bytes left for thus character?\n    var extraLength = null;\n    if (c >> 5 == 0x06) {\n      extraLength = 1;\n    } else if (c >> 4 == 0x0e) {\n      extraLength = 2;\n    } else if (c >> 3 == 0x1e) {\n      extraLength = 3;\n    } else if (c >> 2 == 0x3e) {\n      extraLength = 4;\n    } else if (c >> 1 == 0x7e) {\n      extraLength = 5;\n    } else {\n      continue;\n    }\n    // Do we have enough bytes in our data?\n    if (i + extraLength > bytes.length) {\n      // If there is an invalid unprocessed byte, try to continue\n      for (; i < bytes.length; i++) {\n        if (bytes[i] >> 6 != 0x02) {\n          break;\n        }\n      }\n      if (i != bytes.length) continue;\n      // All leftover bytes are valid.\n      return result;\n    }\n    // Remove the UTF-8 prefix from the char (res)\n    var res = c & (1 << 8 - extraLength - 1) - 1;\n    var count;\n    for (count = 0; count < extraLength; count++) {\n      var nextChar = bytes[i++];\n      // Is the char valid multibyte part?\n      if (nextChar >> 6 != 0x02) {\n        break;\n      }\n      ;\n      res = res << 6 | nextChar & 0x3f;\n    }\n    if (count != extraLength) {\n      i--;\n      continue;\n    }\n    if (res <= 0xffff) {\n      result += String.fromCharCode(res);\n      continue;\n    }\n    res -= 0x10000;\n    result += String.fromCharCode((res >> 10 & 0x3ff) + 0xd800, (res & 0x3ff) + 0xdc00);\n  }\n  return result;\n}\nexports.toUtf8String = toUtf8String;","map":{"version":3,"names":["Object","defineProperty","exports","value","bytes_1","require","UnicodeNormalizationForm","toUtf8Bytes","str","form","current","normalize","result","offset","i","length","c","charCodeAt","arrayify","toUtf8String","bytes","String","fromCharCode","extraLength","res","count","nextChar"],"sources":["/home/peilunnn/Downloads/Internship Projects/gcp-dapp-auction/client/node_modules/truffle-interface-adapter/node_modules/web3-eth-abi/node_modules/ethers/utils/utf8.js"],"sourcesContent":["'use strict';\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bytes_1 = require(\"./bytes\");\nvar UnicodeNormalizationForm;\n(function (UnicodeNormalizationForm) {\n    UnicodeNormalizationForm[\"current\"] = \"\";\n    UnicodeNormalizationForm[\"NFC\"] = \"NFC\";\n    UnicodeNormalizationForm[\"NFD\"] = \"NFD\";\n    UnicodeNormalizationForm[\"NFKC\"] = \"NFKC\";\n    UnicodeNormalizationForm[\"NFKD\"] = \"NFKD\";\n})(UnicodeNormalizationForm = exports.UnicodeNormalizationForm || (exports.UnicodeNormalizationForm = {}));\n;\n// http://stackoverflow.com/questions/18729405/how-to-convert-utf8-string-to-byte-array\nfunction toUtf8Bytes(str, form) {\n    if (form === void 0) { form = UnicodeNormalizationForm.current; }\n    if (form != UnicodeNormalizationForm.current) {\n        str = str.normalize(form);\n    }\n    var result = [];\n    var offset = 0;\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charCodeAt(i);\n        if (c < 128) {\n            result[offset++] = c;\n        }\n        else if (c < 2048) {\n            result[offset++] = (c >> 6) | 192;\n            result[offset++] = (c & 63) | 128;\n        }\n        else if (((c & 0xFC00) == 0xD800) && (i + 1) < str.length && ((str.charCodeAt(i + 1) & 0xFC00) == 0xDC00)) {\n            // Surrogate Pair\n            c = 0x10000 + ((c & 0x03FF) << 10) + (str.charCodeAt(++i) & 0x03FF);\n            result[offset++] = (c >> 18) | 240;\n            result[offset++] = ((c >> 12) & 63) | 128;\n            result[offset++] = ((c >> 6) & 63) | 128;\n            result[offset++] = (c & 63) | 128;\n        }\n        else {\n            result[offset++] = (c >> 12) | 224;\n            result[offset++] = ((c >> 6) & 63) | 128;\n            result[offset++] = (c & 63) | 128;\n        }\n    }\n    return bytes_1.arrayify(result);\n}\nexports.toUtf8Bytes = toUtf8Bytes;\n;\n// http://stackoverflow.com/questions/13356493/decode-utf-8-with-javascript#13691499\nfunction toUtf8String(bytes) {\n    bytes = bytes_1.arrayify(bytes);\n    var result = '';\n    var i = 0;\n    // Invalid bytes are ignored\n    while (i < bytes.length) {\n        var c = bytes[i++];\n        if (c >> 7 == 0) {\n            // 0xxx xxxx\n            result += String.fromCharCode(c);\n            continue;\n        }\n        // Invalid starting byte\n        if (c >> 6 == 0x02) {\n            continue;\n        }\n        // Multibyte; how many bytes left for thus character?\n        var extraLength = null;\n        if (c >> 5 == 0x06) {\n            extraLength = 1;\n        }\n        else if (c >> 4 == 0x0e) {\n            extraLength = 2;\n        }\n        else if (c >> 3 == 0x1e) {\n            extraLength = 3;\n        }\n        else if (c >> 2 == 0x3e) {\n            extraLength = 4;\n        }\n        else if (c >> 1 == 0x7e) {\n            extraLength = 5;\n        }\n        else {\n            continue;\n        }\n        // Do we have enough bytes in our data?\n        if (i + extraLength > bytes.length) {\n            // If there is an invalid unprocessed byte, try to continue\n            for (; i < bytes.length; i++) {\n                if (bytes[i] >> 6 != 0x02) {\n                    break;\n                }\n            }\n            if (i != bytes.length)\n                continue;\n            // All leftover bytes are valid.\n            return result;\n        }\n        // Remove the UTF-8 prefix from the char (res)\n        var res = c & ((1 << (8 - extraLength - 1)) - 1);\n        var count;\n        for (count = 0; count < extraLength; count++) {\n            var nextChar = bytes[i++];\n            // Is the char valid multibyte part?\n            if (nextChar >> 6 != 0x02) {\n                break;\n            }\n            ;\n            res = (res << 6) | (nextChar & 0x3f);\n        }\n        if (count != extraLength) {\n            i--;\n            continue;\n        }\n        if (res <= 0xffff) {\n            result += String.fromCharCode(res);\n            continue;\n        }\n        res -= 0x10000;\n        result += String.fromCharCode(((res >> 10) & 0x3ff) + 0xd800, (res & 0x3ff) + 0xdc00);\n    }\n    return result;\n}\nexports.toUtf8String = toUtf8String;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}