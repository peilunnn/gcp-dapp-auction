{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst web3_1 = __importDefault(require(\"web3\"));\nconst ethereum_overloads_1 = require(\"./ethereum-overloads\");\nconst quorum_overloads_1 = require(\"./quorum-overloads\");\nconst fabric_evm_overloads_1 = require(\"./fabric-evm-overloads\");\nconst initInterface = web3Shim => __awaiter(this, void 0, void 0, function* () {\n  const networkTypes = new Map(Object.entries({\n    \"ethereum\": ethereum_overloads_1.EthereumDefinition,\n    \"quorum\": quorum_overloads_1.QuorumDefinition,\n    \"fabric-evm\": fabric_evm_overloads_1.FabricEvmDefinition\n  }));\n  networkTypes.get(web3Shim.networkType).initNetworkType(web3Shim);\n});\n;\n// March 14, 2019 - Mike Seese:\n// This shim was intended to be temporary (see the above comment)\n// with the idea of a more robust implementation. That implementation\n// would essentially take this shim and include it under the\n// ethereum/apis/web3 (or something like that) structure.\n// I chose to extend/inherit web3 here to keep scope minimal for\n// getting web3 to behave with Quorum and AxCore (future/concurrent PR).\n// I wanted to do as little changing to the original Truffle codebase, and\n// for it to still expect a web3 instance. Otherwise, the scope of these\n// quick support work would be high. The \"Web3Shim\" is a shim for only\n// web3.js, and it was not intended to serve as the general purpose\n// truffle <=> all DLTs adapter. We have other commitments currently that\n// should drive the development of the correct architecture of\n// `truffle-interface-adapter`that should use this work in a more\n// sane and organized manner.\nclass Web3Shim extends web3_1.default {\n  constructor(options) {\n    super();\n    if (options) {\n      this.networkType = options.networkType || \"ethereum\";\n      if (options.provider) {\n        this.setProvider(options.provider);\n      }\n    } else {\n      this.networkType = \"ethereum\";\n    }\n    initInterface(this);\n  }\n  setNetworkType(networkType) {\n    this.networkType = networkType;\n    initInterface(this);\n  }\n}\nexports.Web3Shim = Web3Shim;\n;","map":{"version":3,"sources":["../lib/web3-shim.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAA,MAAA,GAAA,eAAA,CAAA,OAAA,CAAA,MAAA,CAAA,CAAA;AAGA,MAAA,oBAAA,GAAA,OAAA,CAAA,sBAAA,CAAA;AACA,MAAA,kBAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;AACA,MAAA,sBAAA,GAAA,OAAA,CAAA,wBAAA,CAAA;AAEA,MAAM,aAAa,GAAS,QAAkB,IAAI,SAAA,CAAA,IAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;EAE9C,MAAM,YAAY,GAAuB,IAAI,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC;IAC9D,UAAU,EAAE,oBAAA,CAAA,kBAAkB;IAC9B,QAAQ,EAAE,kBAAA,CAAA,gBAAgB;IAC1B,YAAY,EAAE,sBAAA,CAAA;GACf,CAAC,CAAC;EAEH,YAAY,CAAC,GAAG,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,eAAe,CAAC,QAAQ,CAAC;AAClE,CAAC,CAAA;AAaF;AAUD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAa,QAAS,SAAQ,MAAA,CAAA,OAAI,CAAA;EAGhC,WAAA,CAAY,OAAyB,EAAA;IACnC,KAAK,EAAE;IAEP,IAAI,OAAO,EAAE;MACX,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,IAAI,UAAU;MAEpD,IAAI,OAAO,CAAC,QAAQ,EAAE;QACpB,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,QAAQ,CAAC;MACnC;KACF,MAAM;MACL,IAAI,CAAC,WAAW,GAAG,UAAU;IAC9B;IAED,aAAa,CAAC,IAAI,CAAC;EACrB;EAEA,cAAc,CAAC,WAAwB,EAAA;IACrC,IAAI,CAAC,WAAW,GAAG,WAAW;IAC9B,aAAa,CAAC,IAAI,CAAC;EACrB;AACD;AAvBD,OAAA,CAAA,QAAA,GAAA,QAAA;AAuBC","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst web3_1 = __importDefault(require(\"web3\"));\nconst ethereum_overloads_1 = require(\"./ethereum-overloads\");\nconst quorum_overloads_1 = require(\"./quorum-overloads\");\nconst fabric_evm_overloads_1 = require(\"./fabric-evm-overloads\");\nconst initInterface = (web3Shim) => __awaiter(this, void 0, void 0, function* () {\n    const networkTypes = new Map(Object.entries({\n        \"ethereum\": ethereum_overloads_1.EthereumDefinition,\n        \"quorum\": quorum_overloads_1.QuorumDefinition,\n        \"fabric-evm\": fabric_evm_overloads_1.FabricEvmDefinition\n    }));\n    networkTypes.get(web3Shim.networkType).initNetworkType(web3Shim);\n});\n;\n// March 14, 2019 - Mike Seese:\n// This shim was intended to be temporary (see the above comment)\n// with the idea of a more robust implementation. That implementation\n// would essentially take this shim and include it under the\n// ethereum/apis/web3 (or something like that) structure.\n// I chose to extend/inherit web3 here to keep scope minimal for\n// getting web3 to behave with Quorum and AxCore (future/concurrent PR).\n// I wanted to do as little changing to the original Truffle codebase, and\n// for it to still expect a web3 instance. Otherwise, the scope of these\n// quick support work would be high. The \"Web3Shim\" is a shim for only\n// web3.js, and it was not intended to serve as the general purpose\n// truffle <=> all DLTs adapter. We have other commitments currently that\n// should drive the development of the correct architecture of\n// `truffle-interface-adapter`that should use this work in a more\n// sane and organized manner.\nclass Web3Shim extends web3_1.default {\n    constructor(options) {\n        super();\n        if (options) {\n            this.networkType = options.networkType || \"ethereum\";\n            if (options.provider) {\n                this.setProvider(options.provider);\n            }\n        }\n        else {\n            this.networkType = \"ethereum\";\n        }\n        initInterface(this);\n    }\n    setNetworkType(networkType) {\n        this.networkType = networkType;\n        initInterface(this);\n    }\n}\nexports.Web3Shim = Web3Shim;\n;\n//# sourceMappingURL=web3-shim.js.map"]},"metadata":{},"sourceType":"script"}