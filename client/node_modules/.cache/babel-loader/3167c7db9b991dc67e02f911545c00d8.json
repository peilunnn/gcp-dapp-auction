{"ast":null,"code":"/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file index.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\n\"use strict\";\n\nvar _ = require('underscore');\nvar errors = require('web3-core-helpers').errors;\nvar Jsonrpc = require('./jsonrpc.js');\nvar BatchManager = require('./batch.js');\nvar givenProvider = require('./givenProvider.js');\n\n/**\n* It's responsible for passing messages to providers\n* It's also responsible for polling the ethereum node for incoming messages\n* Default poll timeout is 1 second\n* Singleton\n*/\nvar RequestManager = function RequestManager(provider) {\n  this.provider = null;\n  this.providers = RequestManager.providers;\n  this.setProvider(provider);\n  this.subscriptions = {};\n};\nRequestManager.givenProvider = givenProvider;\nRequestManager.providers = {\n  WebsocketProvider: require('web3-providers-ws'),\n  HttpProvider: require('web3-providers-http'),\n  IpcProvider: require('web3-providers-ipc')\n};\n\n/**\n * Should be used to set provider of request manager\n *\n * @method setProvider\n * @param {Object} p\n */\nRequestManager.prototype.setProvider = function (p, net) {\n  var _this = this;\n\n  // autodetect provider\n  if (p && typeof p === 'string' && this.providers) {\n    // HTTP\n    if (/^http(s)?:\\/\\//i.test(p)) {\n      p = new this.providers.HttpProvider(p);\n\n      // WS\n    } else if (/^ws(s)?:\\/\\//i.test(p)) {\n      p = new this.providers.WebsocketProvider(p);\n\n      // IPC\n    } else if (p && typeof net === 'object' && typeof net.connect === 'function') {\n      p = new this.providers.IpcProvider(p, net);\n    } else if (p) {\n      throw new Error('Can\\'t autodetect provider for \"' + p + '\"');\n    }\n  }\n\n  // reset the old one before changing, if still connected\n  if (this.provider && this.provider.connected) this.clearSubscriptions();\n  this.provider = p || null;\n\n  // listen to incoming notifications\n  if (this.provider && this.provider.on) {\n    this.provider.on('data', function requestManagerNotification(result, deprecatedResult) {\n      result = result || deprecatedResult; // this is for possible old providers, which may had the error first handler\n\n      // check for result.method, to prevent old providers errors to pass as result\n      if (result.method && _this.subscriptions[result.params.subscription] && _this.subscriptions[result.params.subscription].callback) {\n        _this.subscriptions[result.params.subscription].callback(null, result.params.result);\n      }\n    });\n    // TODO add error, end, timeout, connect??\n    // this.provider.on('error', function requestManagerNotification(result){\n    //     Object.keys(_this.subscriptions).forEach(function(id){\n    //         if(_this.subscriptions[id].callback)\n    //             _this.subscriptions[id].callback(err);\n    //     });\n    // }\n  }\n};\n\n/**\n * Should be used to asynchronously send request\n *\n * @method sendAsync\n * @param {Object} data\n * @param {Function} callback\n */\nRequestManager.prototype.send = function (data, callback) {\n  callback = callback || function () {};\n  if (!this.provider) {\n    return callback(errors.InvalidProvider());\n  }\n  var payload = Jsonrpc.toPayload(data.method, data.params);\n  this.provider[this.provider.sendAsync ? 'sendAsync' : 'send'](payload, function (err, result) {\n    if (result && result.id && payload.id !== result.id) return callback(new Error('Wrong response id \"' + result.id + '\" (expected: \"' + payload.id + '\") in ' + JSON.stringify(payload)));\n    if (err) {\n      return callback(err);\n    }\n    if (result && result.error) {\n      return callback(errors.ErrorResponse(result));\n    }\n    if (!Jsonrpc.isValidResponse(result)) {\n      return callback(errors.InvalidResponse(result));\n    }\n    callback(null, result.result);\n  });\n};\n\n/**\n * Should be called to asynchronously send batch request\n *\n * @method sendBatch\n * @param {Array} batch data\n * @param {Function} callback\n */\nRequestManager.prototype.sendBatch = function (data, callback) {\n  if (!this.provider) {\n    return callback(errors.InvalidProvider());\n  }\n  var payload = Jsonrpc.toBatchPayload(data);\n  this.provider[this.provider.sendAsync ? 'sendAsync' : 'send'](payload, function (err, results) {\n    if (err) {\n      return callback(err);\n    }\n    if (!_.isArray(results)) {\n      return callback(errors.InvalidResponse(results));\n    }\n    callback(null, results);\n  });\n};\n\n/**\n * Waits for notifications\n *\n * @method addSubscription\n * @param {String} id           the subscription id\n * @param {String} name         the subscription name\n * @param {String} type         the subscription namespace (eth, personal, etc)\n * @param {Function} callback   the callback to call for incoming notifications\n */\nRequestManager.prototype.addSubscription = function (id, name, type, callback) {\n  if (this.provider.on) {\n    this.subscriptions[id] = {\n      callback: callback,\n      type: type,\n      name: name\n    };\n  } else {\n    throw new Error('The provider doesn\\'t support subscriptions: ' + this.provider.constructor.name);\n  }\n};\n\n/**\n * Waits for notifications\n *\n * @method removeSubscription\n * @param {String} id           the subscription id\n * @param {Function} callback   fired once the subscription is removed\n */\nRequestManager.prototype.removeSubscription = function (id, callback) {\n  var _this = this;\n  if (this.subscriptions[id]) {\n    this.send({\n      method: this.subscriptions[id].type + '_unsubscribe',\n      params: [id]\n    }, callback);\n\n    // remove subscription\n    delete _this.subscriptions[id];\n  }\n};\n\n/**\n * Should be called to reset the subscriptions\n *\n * @method reset\n */\nRequestManager.prototype.clearSubscriptions = function (keepIsSyncing) {\n  var _this = this;\n\n  // uninstall all subscriptions\n  Object.keys(this.subscriptions).forEach(function (id) {\n    if (!keepIsSyncing || _this.subscriptions[id].name !== 'syncing') _this.removeSubscription(id);\n  });\n\n  //  reset notification callbacks etc.\n  if (this.provider.reset) this.provider.reset();\n};\nmodule.exports = {\n  Manager: RequestManager,\n  BatchManager: BatchManager\n};","map":{"version":3,"names":["_","require","errors","Jsonrpc","BatchManager","givenProvider","RequestManager","provider","providers","setProvider","subscriptions","WebsocketProvider","HttpProvider","IpcProvider","prototype","p","net","_this","test","connect","Error","connected","clearSubscriptions","on","requestManagerNotification","result","deprecatedResult","method","params","subscription","callback","send","data","InvalidProvider","payload","toPayload","sendAsync","err","id","JSON","stringify","error","ErrorResponse","isValidResponse","InvalidResponse","sendBatch","toBatchPayload","results","isArray","addSubscription","name","type","constructor","removeSubscription","keepIsSyncing","Object","keys","forEach","reset","module","exports","Manager"],"sources":["/home/peilunnn/Downloads/Internship Projects/gcp-dapp-auction/client/node_modules/truffle-contract/node_modules/web3-core-requestmanager/src/index.js"],"sourcesContent":["/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file index.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\n\"use strict\";\n\n\nvar _ = require('underscore');\nvar errors = require('web3-core-helpers').errors;\nvar Jsonrpc = require('./jsonrpc.js');\nvar BatchManager = require('./batch.js');\nvar givenProvider = require('./givenProvider.js');\n\n\n\n    /**\n * It's responsible for passing messages to providers\n * It's also responsible for polling the ethereum node for incoming messages\n * Default poll timeout is 1 second\n * Singleton\n */\nvar RequestManager = function RequestManager(provider) {\n    this.provider = null;\n    this.providers = RequestManager.providers;\n\n    this.setProvider(provider);\n    this.subscriptions = {};\n};\n\n\n\nRequestManager.givenProvider = givenProvider;\n\nRequestManager.providers = {\n    WebsocketProvider: require('web3-providers-ws'),\n    HttpProvider: require('web3-providers-http'),\n    IpcProvider: require('web3-providers-ipc')\n};\n\n\n\n/**\n * Should be used to set provider of request manager\n *\n * @method setProvider\n * @param {Object} p\n */\nRequestManager.prototype.setProvider = function (p, net) {\n    var _this = this;\n\n    // autodetect provider\n    if(p && typeof p === 'string' && this.providers) {\n\n        // HTTP\n        if(/^http(s)?:\\/\\//i.test(p)) {\n            p = new this.providers.HttpProvider(p);\n\n            // WS\n        } else if(/^ws(s)?:\\/\\//i.test(p)) {\n            p = new this.providers.WebsocketProvider(p);\n\n            // IPC\n        } else if(p && typeof net === 'object'  && typeof net.connect === 'function') {\n            p = new this.providers.IpcProvider(p, net);\n\n        } else if(p) {\n            throw new Error('Can\\'t autodetect provider for \"'+ p +'\"');\n        }\n    }\n\n    // reset the old one before changing, if still connected\n    if(this.provider && this.provider.connected)\n        this.clearSubscriptions();\n\n\n    this.provider = p || null;\n\n    // listen to incoming notifications\n    if(this.provider && this.provider.on) {\n        this.provider.on('data', function requestManagerNotification(result, deprecatedResult){\n            result = result || deprecatedResult; // this is for possible old providers, which may had the error first handler\n\n            // check for result.method, to prevent old providers errors to pass as result\n            if(result.method && _this.subscriptions[result.params.subscription] && _this.subscriptions[result.params.subscription].callback) {\n                _this.subscriptions[result.params.subscription].callback(null, result.params.result);\n            }\n        });\n        // TODO add error, end, timeout, connect??\n        // this.provider.on('error', function requestManagerNotification(result){\n        //     Object.keys(_this.subscriptions).forEach(function(id){\n        //         if(_this.subscriptions[id].callback)\n        //             _this.subscriptions[id].callback(err);\n        //     });\n        // }\n    }\n};\n\n\n/**\n * Should be used to asynchronously send request\n *\n * @method sendAsync\n * @param {Object} data\n * @param {Function} callback\n */\nRequestManager.prototype.send = function (data, callback) {\n    callback = callback || function(){};\n\n    if (!this.provider) {\n        return callback(errors.InvalidProvider());\n    }\n\n    var payload = Jsonrpc.toPayload(data.method, data.params);\n    this.provider[this.provider.sendAsync ? 'sendAsync' : 'send'](payload, function (err, result) {\n        if(result && result.id && payload.id !== result.id) return callback(new Error('Wrong response id \"'+ result.id +'\" (expected: \"'+ payload.id +'\") in '+ JSON.stringify(payload)));\n\n        if (err) {\n            return callback(err);\n        }\n\n        if (result && result.error) {\n            return callback(errors.ErrorResponse(result));\n        }\n\n        if (!Jsonrpc.isValidResponse(result)) {\n            return callback(errors.InvalidResponse(result));\n        }\n\n        callback(null, result.result);\n    });\n};\n\n/**\n * Should be called to asynchronously send batch request\n *\n * @method sendBatch\n * @param {Array} batch data\n * @param {Function} callback\n */\nRequestManager.prototype.sendBatch = function (data, callback) {\n    if (!this.provider) {\n        return callback(errors.InvalidProvider());\n    }\n\n    var payload = Jsonrpc.toBatchPayload(data);\n    this.provider[this.provider.sendAsync ? 'sendAsync' : 'send'](payload, function (err, results) {\n        if (err) {\n            return callback(err);\n        }\n\n        if (!_.isArray(results)) {\n            return callback(errors.InvalidResponse(results));\n        }\n\n        callback(null, results);\n    });\n};\n\n\n/**\n * Waits for notifications\n *\n * @method addSubscription\n * @param {String} id           the subscription id\n * @param {String} name         the subscription name\n * @param {String} type         the subscription namespace (eth, personal, etc)\n * @param {Function} callback   the callback to call for incoming notifications\n */\nRequestManager.prototype.addSubscription = function (id, name, type, callback) {\n    if(this.provider.on) {\n        this.subscriptions[id] = {\n            callback: callback,\n            type: type,\n            name: name\n        };\n\n    } else {\n        throw new Error('The provider doesn\\'t support subscriptions: '+ this.provider.constructor.name);\n    }\n};\n\n/**\n * Waits for notifications\n *\n * @method removeSubscription\n * @param {String} id           the subscription id\n * @param {Function} callback   fired once the subscription is removed\n */\nRequestManager.prototype.removeSubscription = function (id, callback) {\n    var _this = this;\n\n    if(this.subscriptions[id]) {\n\n        this.send({\n            method: this.subscriptions[id].type + '_unsubscribe',\n            params: [id]\n        }, callback);\n\n        // remove subscription\n        delete _this.subscriptions[id];\n    }\n};\n\n/**\n * Should be called to reset the subscriptions\n *\n * @method reset\n */\nRequestManager.prototype.clearSubscriptions = function (keepIsSyncing) {\n    var _this = this;\n\n\n    // uninstall all subscriptions\n    Object.keys(this.subscriptions).forEach(function(id){\n        if(!keepIsSyncing || _this.subscriptions[id].name !== 'syncing')\n            _this.removeSubscription(id);\n    });\n\n\n    //  reset notification callbacks etc.\n    if(this.provider.reset)\n        this.provider.reset();\n};\n\nmodule.exports = {\n    Manager: RequestManager,\n    BatchManager: BatchManager\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}