{"ast":null,"code":"const debug = require(\"debug\")(\"contract:utils\"); // eslint-disable-line no-unused-vars\nconst web3Utils = require(\"web3-utils\");\nconst bigNumberify = require(\"ethers/utils/bignumber\").bigNumberify;\nconst abi = require(\"web3-eth-abi\");\nconst BlockchainUtils = require(\"@truffle/blockchain-utils\");\nconst reformat = require(\"./reformat\");\nconst Utils = {\n  is_object(val) {\n    return typeof val === \"object\" && !Array.isArray(val);\n  },\n  is_big_number(val) {\n    if (typeof val !== \"object\") return false;\n    return web3Utils.isBN(val) || web3Utils.isBigNumber(val);\n  },\n  is_tx_params(val) {\n    if (!Utils.is_object(val)) return false;\n    if (Utils.is_big_number(val)) return false;\n    const allowed_fields = {\n      from: true,\n      to: true,\n      gas: true,\n      gasPrice: true,\n      value: true,\n      data: true,\n      nonce: true,\n      privateFor: true\n    };\n    for (let field_name of Object.keys(val)) {\n      if (allowed_fields[field_name]) return true;\n    }\n    return false;\n  },\n  decodeLogs(_logs, isSingle) {\n    const constructor = this;\n    const logs = Utils.toTruffleLog(_logs, isSingle);\n    return logs.map(log => {\n      const logABI = constructor.events[log.topics[0]];\n      if (logABI == null) {\n        return null;\n      }\n      const copy = Utils.merge({}, log);\n      copy.event = logABI.name;\n      copy.topics = logABI.anonymous ? copy.topics : copy.topics.slice(1);\n      if (copy.data === \"0x\") {\n        copy.data = \"\";\n      }\n      let logArgs;\n      try {\n        logArgs = abi.decodeLog(logABI.inputs, copy.data, copy.topics);\n      } catch (_) {\n        return null;\n      }\n      copy.args = reformat.numbers.call(constructor, logArgs, logABI.inputs);\n      delete copy.data;\n      delete copy.topics;\n      return copy;\n    }).filter(log => log != null);\n  },\n  toTruffleLog(events, isSingle) {\n    // Transform singletons (from event listeners) to the kind of\n    // object we find on the receipt\n    if (isSingle && typeof isSingle === \"boolean\") {\n      const temp = [];\n      temp.push(events);\n      return temp.map(log => {\n        log.data = log.raw.data;\n        log.topics = log.raw.topics;\n        return log;\n      });\n    }\n\n    // Or reformat items in the existing array\n    events.forEach(event => {\n      if (event.raw) {\n        event.data = event.raw.data;\n        event.topics = event.raw.topics;\n      }\n    });\n    return events;\n  },\n  merge() {\n    const merged = {};\n    const args = Array.prototype.slice.call(arguments);\n    for (let i = 0; i < args.length; i++) {\n      const object = args[i];\n      const keys = Object.keys(object);\n      for (let j = 0; j < keys.length; j++) {\n        const key = keys[j];\n        const value = object[key];\n        merged[key] = value;\n      }\n    }\n    return merged;\n  },\n  parallel(arr) {\n    let callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : () => {};\n    if (!arr.length) {\n      return callback(null, []);\n    }\n    let index = 0;\n    const results = new Array(arr.length);\n    arr.forEach((fn, position) => {\n      fn((err, result) => {\n        if (err) {\n          callback(err);\n          callback = () => {};\n        } else {\n          index++;\n          results[position] = result;\n          if (index >= arr.length) {\n            callback(null, results);\n          }\n        }\n      });\n    });\n  },\n  linkBytecode(bytecode, links) {\n    Object.keys(links).forEach(library_name => {\n      const library_address = links[library_name];\n      const regex = new RegExp(`__${library_name}_+`, \"g\");\n      bytecode = bytecode.replace(regex, library_address.replace(\"0x\", \"\"));\n    });\n    return bytecode;\n  },\n  // Extracts optional tx params from a list of fn arguments\n  getTxParams(methodABI, args) {\n    const constructor = this;\n    const expected_arg_count = methodABI ? methodABI.inputs.length : 0;\n    let tx_params = {};\n    const last_arg = args[args.length - 1];\n    if (args.length === expected_arg_count + 1 && Utils.is_tx_params(last_arg)) {\n      tx_params = args.pop();\n    }\n    return Utils.merge(constructor.class_defaults, tx_params);\n  },\n  // Verifies that a contracts libraries have been linked correctly.\n  // Throws on error\n  checkLibraries() {\n    const constructor = this;\n    const regex = /__[^_]+_+/g;\n    let unlinked_libraries = constructor.binary.match(regex);\n    if (unlinked_libraries !== null) {\n      unlinked_libraries = unlinked_libraries.map((name // Remove underscores\n      ) => name.replace(/_/g, \"\")).sort().filter((name, index, arr) => {\n        // Remove duplicates\n        if (index + 1 >= arr.length) {\n          return true;\n        }\n        return name !== arr[index + 1];\n      }).join(\", \");\n      const error = `${constructor.contractName} contains unresolved libraries. You must deploy and link the following libraries before you can deploy a new version of ${constructor.contractName}: ${unlinked_libraries}`;\n      throw new Error(error);\n    }\n  },\n  convertToEthersBN(original) {\n    const converted = [];\n    original.forEach(item => {\n      // Recurse for arrays\n      if (Array.isArray(item)) {\n        converted.push(Utils.convertToEthersBN(item));\n\n        // Convert Web3 BN / BigNumber\n      } else if (Utils.is_big_number(item)) {\n        const ethersBN = bigNumberify(item.toString());\n        converted.push(ethersBN);\n      } else {\n        converted.push(item);\n      }\n    });\n    return converted;\n  },\n  bigNumberify,\n  /**\n   * Multiplies an ethers.js BigNumber and a number with decimal places using\n   * integer math rather than using an arbitrary floating-point library like\n   * `bignumber.js`.\n   * @param  {BigNumber} bignum            an ethers.js BigNumber (use bigNumberify)\n   * @param  {Number}    decimal           a number which has 0+ decimal places\n   * @param  {Number}    [maxPrecision=5]  the max number of signficant figures\n   *                                       `decimal` can have. (default: 5)\n   * @return {BigNumber}                   floor(bignum * decimal)\n   */\n  multiplyBigNumberByDecimal(bignum, decimal, maxPrecision) {\n    if (typeof maxPrecision === \"undefined\") {\n      maxPrecision = 5;\n    }\n    const significantFigures = Math.min(decimal.toString().length - 1,\n    // length less one because `.`\n    maxPrecision);\n    const denominator = bigNumberify(10).pow(significantFigures);\n    const numerator = Math.round(decimal * denominator);\n    const secondOperand = bigNumberify(numerator).div(denominator);\n    return bignum.mul(secondOperand);\n  },\n  // checks if given contract instance has a set provider\n  checkProvider(_ref) {\n    let {\n      currentProvider,\n      contractName\n    } = _ref;\n    if (!currentProvider) throw new Error(`${contractName} error: Please call setProvider() first before calling new().`);\n  },\n  // verifies current network has been assigned to contract instance\n  checkNetworkArtifactMatch(_ref2) {\n    let {\n      networks,\n      network_id,\n      contractName\n    } = _ref2;\n    if (networks[network_id] == null) throw new Error(`${contractName} has not been deployed to detected network (network/artifact mismatch)`);\n  },\n  // verifies contract instance has been deployed\n  checkDeployment(_ref3) {\n    let {\n      isDeployed,\n      contractName,\n      network_id\n    } = _ref3;\n    if (!isDeployed()) throw new Error(`${contractName} has not been deployed to detected network (${network_id})`);\n  },\n  // checks if provided contract address has on-chain code\n  checkCode(onChainCode, contractName, address) {\n    if (!onChainCode || onChainCode.replace(\"0x\", \"\").replace(/0/g, \"\") === \"\") throw new Error(`Cannot create instance of ${contractName}; no code at address ${address}`);\n  },\n  // parses known contract instance networks\n  parseKnownNetworks(_ref4, gasLimit) {\n    let {\n      networks,\n      currentProvider,\n      setNetwork,\n      network_id\n    } = _ref4;\n    // wrap uri matching in a promise to allow provider.send time to resolve\n    // (.send call happens in BlockchainUtils.matches)\n    return new Promise((accept, reject) => {\n      // go through all the networks that are listed as\n      // blockchain uris and see if they match\n      const uris = Object.keys(networks).filter(network => network.indexOf(\"blockchain://\") === 0);\n      const matches = uris.map(uri => BlockchainUtils.matches.bind(BlockchainUtils, uri, currentProvider));\n      Utils.parallel(matches, (err, results) => {\n        if (err) reject(err);\n        for (let i = 0; i < results.length; i++) {\n          if (results[i]) {\n            setNetwork(uris[i]);\n            accept({\n              id: network_id,\n              blockLimit: gasLimit\n            });\n          }\n        }\n        // no match found!\n        accept(false);\n      });\n    });\n  },\n  // sets a contract instance network ID\n  async setInstanceNetworkID(TruffleContractInstance, chainNetworkID, gasLimit) {\n    // if chainNetworkID already present as network configuration, use it\n    if (TruffleContractInstance.hasNetwork(chainNetworkID)) {\n      TruffleContractInstance.setNetwork(chainNetworkID);\n      return {\n        id: TruffleContractInstance.network_id,\n        blockLimit: gasLimit\n      };\n    }\n    // chainNetworkID not present,\n    // parse all known networks\n    const matchedNetwork = await Utils.parseKnownNetworks(TruffleContractInstance, gasLimit);\n    if (matchedNetwork) return matchedNetwork;\n\n    // network unknown, trust the provider and use given chainNetworkID\n    TruffleContractInstance.setNetwork(chainNetworkID);\n    return {\n      id: TruffleContractInstance.network_id,\n      blockLimit: gasLimit\n    };\n  }\n};\nmodule.exports = Utils;","map":{"version":3,"names":["debug","require","web3Utils","bigNumberify","abi","BlockchainUtils","reformat","Utils","is_object","val","Array","isArray","is_big_number","isBN","isBigNumber","is_tx_params","allowed_fields","from","to","gas","gasPrice","value","data","nonce","privateFor","field_name","Object","keys","decodeLogs","_logs","isSingle","constructor","logs","toTruffleLog","map","log","logABI","events","topics","copy","merge","event","name","anonymous","slice","logArgs","decodeLog","inputs","_","args","numbers","call","filter","temp","push","raw","forEach","merged","prototype","arguments","i","length","object","j","key","parallel","arr","callback","index","results","fn","position","err","result","linkBytecode","bytecode","links","library_name","library_address","regex","RegExp","replace","getTxParams","methodABI","expected_arg_count","tx_params","last_arg","pop","class_defaults","checkLibraries","unlinked_libraries","binary","match","sort","join","error","contractName","Error","convertToEthersBN","original","converted","item","ethersBN","toString","multiplyBigNumberByDecimal","bignum","decimal","maxPrecision","significantFigures","Math","min","denominator","pow","numerator","round","secondOperand","div","mul","checkProvider","currentProvider","checkNetworkArtifactMatch","networks","network_id","checkDeployment","isDeployed","checkCode","onChainCode","address","parseKnownNetworks","gasLimit","setNetwork","Promise","accept","reject","uris","network","indexOf","matches","uri","bind","id","blockLimit","setInstanceNetworkID","TruffleContractInstance","chainNetworkID","hasNetwork","matchedNetwork","module","exports"],"sources":["/home/peilunnn/Downloads/Internship Projects/gcp-dapp-auction/client/node_modules/truffle-contract/lib/utils.js"],"sourcesContent":["const debug = require(\"debug\")(\"contract:utils\"); // eslint-disable-line no-unused-vars\nconst web3Utils = require(\"web3-utils\");\nconst bigNumberify = require(\"ethers/utils/bignumber\").bigNumberify;\nconst abi = require(\"web3-eth-abi\");\nconst BlockchainUtils = require(\"@truffle/blockchain-utils\");\nconst reformat = require(\"./reformat\");\n\nconst Utils = {\n  is_object(val) {\n    return typeof val === \"object\" && !Array.isArray(val);\n  },\n\n  is_big_number(val) {\n    if (typeof val !== \"object\") return false;\n\n    return web3Utils.isBN(val) || web3Utils.isBigNumber(val);\n  },\n\n  is_tx_params(val) {\n    if (!Utils.is_object(val)) return false;\n    if (Utils.is_big_number(val)) return false;\n\n    const allowed_fields = {\n      from: true,\n      to: true,\n      gas: true,\n      gasPrice: true,\n      value: true,\n      data: true,\n      nonce: true,\n      privateFor: true\n    };\n\n    for (let field_name of Object.keys(val)) {\n      if (allowed_fields[field_name]) return true;\n    }\n\n    return false;\n  },\n\n  decodeLogs(_logs, isSingle) {\n    const constructor = this;\n    const logs = Utils.toTruffleLog(_logs, isSingle);\n\n    return logs\n      .map(log => {\n        const logABI = constructor.events[log.topics[0]];\n\n        if (logABI == null) {\n          return null;\n        }\n\n        const copy = Utils.merge({}, log);\n\n        copy.event = logABI.name;\n        copy.topics = logABI.anonymous ? copy.topics : copy.topics.slice(1);\n\n        if (copy.data === \"0x\") {\n          copy.data = \"\";\n        }\n\n        let logArgs;\n        try {\n          logArgs = abi.decodeLog(logABI.inputs, copy.data, copy.topics);\n        } catch (_) {\n          return null;\n        }\n        copy.args = reformat.numbers.call(constructor, logArgs, logABI.inputs);\n\n        delete copy.data;\n        delete copy.topics;\n\n        return copy;\n      })\n      .filter(log => log != null);\n  },\n\n  toTruffleLog(events, isSingle) {\n    // Transform singletons (from event listeners) to the kind of\n    // object we find on the receipt\n    if (isSingle && typeof isSingle === \"boolean\") {\n      const temp = [];\n      temp.push(events);\n      return temp.map(log => {\n        log.data = log.raw.data;\n        log.topics = log.raw.topics;\n        return log;\n      });\n    }\n\n    // Or reformat items in the existing array\n    events.forEach(event => {\n      if (event.raw) {\n        event.data = event.raw.data;\n        event.topics = event.raw.topics;\n      }\n    });\n\n    return events;\n  },\n\n  merge() {\n    const merged = {};\n    const args = Array.prototype.slice.call(arguments);\n\n    for (let i = 0; i < args.length; i++) {\n      const object = args[i];\n      const keys = Object.keys(object);\n      for (let j = 0; j < keys.length; j++) {\n        const key = keys[j];\n        const value = object[key];\n        merged[key] = value;\n      }\n    }\n\n    return merged;\n  },\n  parallel(arr, callback = () => {}) {\n    if (!arr.length) {\n      return callback(null, []);\n    }\n    let index = 0;\n    const results = new Array(arr.length);\n    arr.forEach((fn, position) => {\n      fn((err, result) => {\n        if (err) {\n          callback(err);\n          callback = () => {};\n        } else {\n          index++;\n          results[position] = result;\n          if (index >= arr.length) {\n            callback(null, results);\n          }\n        }\n      });\n    });\n  },\n\n  linkBytecode(bytecode, links) {\n    Object.keys(links).forEach(library_name => {\n      const library_address = links[library_name];\n      const regex = new RegExp(`__${library_name}_+`, \"g\");\n\n      bytecode = bytecode.replace(regex, library_address.replace(\"0x\", \"\"));\n    });\n\n    return bytecode;\n  },\n\n  // Extracts optional tx params from a list of fn arguments\n  getTxParams(methodABI, args) {\n    const constructor = this;\n\n    const expected_arg_count = methodABI ? methodABI.inputs.length : 0;\n\n    let tx_params = {};\n    const last_arg = args[args.length - 1];\n\n    if (\n      args.length === expected_arg_count + 1 &&\n      Utils.is_tx_params(last_arg)\n    ) {\n      tx_params = args.pop();\n    }\n\n    return Utils.merge(constructor.class_defaults, tx_params);\n  },\n\n  // Verifies that a contracts libraries have been linked correctly.\n  // Throws on error\n  checkLibraries() {\n    const constructor = this;\n    const regex = /__[^_]+_+/g;\n    let unlinked_libraries = constructor.binary.match(regex);\n\n    if (unlinked_libraries !== null) {\n      unlinked_libraries = unlinked_libraries\n        .map((\n          name // Remove underscores\n        ) => name.replace(/_/g, \"\"))\n        .sort()\n        .filter((name, index, arr) => {\n          // Remove duplicates\n          if (index + 1 >= arr.length) {\n            return true;\n          }\n\n          return name !== arr[index + 1];\n        })\n        .join(\", \");\n\n      const error = `${\n        constructor.contractName\n      } contains unresolved libraries. You must deploy and link the following libraries before you can deploy a new version of ${\n        constructor.contractName\n      }: ${unlinked_libraries}`;\n\n      throw new Error(error);\n    }\n  },\n\n  convertToEthersBN(original) {\n    const converted = [];\n    original.forEach(item => {\n      // Recurse for arrays\n      if (Array.isArray(item)) {\n        converted.push(Utils.convertToEthersBN(item));\n\n        // Convert Web3 BN / BigNumber\n      } else if (Utils.is_big_number(item)) {\n        const ethersBN = bigNumberify(item.toString());\n        converted.push(ethersBN);\n      } else {\n        converted.push(item);\n      }\n    });\n    return converted;\n  },\n\n  bigNumberify,\n\n  /**\n   * Multiplies an ethers.js BigNumber and a number with decimal places using\n   * integer math rather than using an arbitrary floating-point library like\n   * `bignumber.js`.\n   * @param  {BigNumber} bignum            an ethers.js BigNumber (use bigNumberify)\n   * @param  {Number}    decimal           a number which has 0+ decimal places\n   * @param  {Number}    [maxPrecision=5]  the max number of signficant figures\n   *                                       `decimal` can have. (default: 5)\n   * @return {BigNumber}                   floor(bignum * decimal)\n   */\n  multiplyBigNumberByDecimal(bignum, decimal, maxPrecision) {\n    if (typeof maxPrecision === \"undefined\") {\n      maxPrecision = 5;\n    }\n\n    const significantFigures = Math.min(\n      decimal.toString().length - 1, // length less one because `.`\n      maxPrecision\n    );\n\n    const denominator = bigNumberify(10).pow(significantFigures);\n    const numerator = Math.round(decimal * denominator);\n    const secondOperand = bigNumberify(numerator).div(denominator);\n\n    return bignum.mul(secondOperand);\n  },\n\n  // checks if given contract instance has a set provider\n  checkProvider({ currentProvider, contractName }) {\n    if (!currentProvider)\n      throw new Error(\n        `${contractName} error: Please call setProvider() first before calling new().`\n      );\n  },\n\n  // verifies current network has been assigned to contract instance\n  checkNetworkArtifactMatch({ networks, network_id, contractName }) {\n    if (networks[network_id] == null)\n      throw new Error(\n        `${contractName} has not been deployed to detected network (network/artifact mismatch)`\n      );\n  },\n\n  // verifies contract instance has been deployed\n  checkDeployment({ isDeployed, contractName, network_id }) {\n    if (!isDeployed())\n      throw new Error(\n        `${contractName} has not been deployed to detected network (${network_id})`\n      );\n  },\n\n  // checks if provided contract address has on-chain code\n  checkCode(onChainCode, contractName, address) {\n    if (!onChainCode || onChainCode.replace(\"0x\", \"\").replace(/0/g, \"\") === \"\")\n      throw new Error(\n        `Cannot create instance of ${contractName}; no code at address ${address}`\n      );\n  },\n\n  // parses known contract instance networks\n  parseKnownNetworks(\n    { networks, currentProvider, setNetwork, network_id },\n    gasLimit\n  ) {\n    // wrap uri matching in a promise to allow provider.send time to resolve\n    // (.send call happens in BlockchainUtils.matches)\n    return new Promise((accept, reject) => {\n      // go through all the networks that are listed as\n      // blockchain uris and see if they match\n      const uris = Object.keys(networks).filter(\n        network => network.indexOf(\"blockchain://\") === 0\n      );\n      const matches = uris.map(uri =>\n        BlockchainUtils.matches.bind(BlockchainUtils, uri, currentProvider)\n      );\n\n      Utils.parallel(matches, (err, results) => {\n        if (err) reject(err);\n\n        for (let i = 0; i < results.length; i++) {\n          if (results[i]) {\n            setNetwork(uris[i]);\n            accept({\n              id: network_id,\n              blockLimit: gasLimit\n            });\n          }\n        }\n        // no match found!\n        accept(false);\n      });\n    });\n  },\n\n  // sets a contract instance network ID\n  async setInstanceNetworkID(\n    TruffleContractInstance,\n    chainNetworkID,\n    gasLimit\n  ) {\n    // if chainNetworkID already present as network configuration, use it\n    if (TruffleContractInstance.hasNetwork(chainNetworkID)) {\n      TruffleContractInstance.setNetwork(chainNetworkID);\n      return {\n        id: TruffleContractInstance.network_id,\n        blockLimit: gasLimit\n      };\n    }\n    // chainNetworkID not present,\n    // parse all known networks\n    const matchedNetwork = await Utils.parseKnownNetworks(\n      TruffleContractInstance,\n      gasLimit\n    );\n    if (matchedNetwork) return matchedNetwork;\n\n    // network unknown, trust the provider and use given chainNetworkID\n    TruffleContractInstance.setNetwork(chainNetworkID);\n    return { id: TruffleContractInstance.network_id, blockLimit: gasLimit };\n  }\n};\n\nmodule.exports = Utils;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}