{"ast":null,"code":"var _jsxFileName = \"/home/peilunnn/Downloads/Internship Projects/gcp-dapp-auction/client/src/components/NftApprovalCard.jsx\",\n  _s = $RefreshSig$();\nimport { Card, CardContent, Typography, Button, TextField } from '@mui/material';\nimport React, { useState } from 'react';\nimport { useEth } from '../contexts/EthContext';\nimport { useSnackbar } from 'notistack';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NftApprovalCard = () => {\n  _s();\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n  const {\n    state: {\n      web3,\n      networkID,\n      accounts\n    }\n  } = useEth();\n  const nftJson = require('../contracts/MintNFT.json');\n  const [vars, setVars] = useState({\n    auctionAddress: '',\n    nftId: '' //token id,\n  });\n\n  const handleAddressInput = event => {\n    setVars({\n      ...vars,\n      auctionAddress: event.target.value\n    });\n  };\n  const handleNftIdInput = event => {\n    setVars({\n      ...vars,\n      nftId: event.target.value\n    });\n  };\n  const handleApproval = async () => {\n    let nftAddress = nftJson.networks[networkID].address;\n    let nftContract = new web3.eth.Contract(nftJson.abi, nftAddress);\n    const tid = parseInt(vars.nftId);\n    try {\n      await nftContract.methods.approve(vars.auctionAddress, tid).send({\n        from: accounts[0]\n      });\n      enqueueSnackbar('Approval successful', {\n        variant: 'success'\n      });\n    } catch (err) {\n      console.log(err);\n      enqueueSnackbar('Approval failed', {\n        variant: 'error'\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: /*#__PURE__*/_jsxDEV(CardContent, {\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        component: \"div\",\n        children: \"Approve Auction Contract for NFT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body1\",\n        children: \"Enter the auction contract address and the NFT token id which you want to allow the auction to make changes to.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"nft-approval-form\",\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          placeholder: \"Auction Address\",\n          name: \"auctionAddress\",\n          value: vars.auctionAddress,\n          onChange: handleAddressInput,\n          margin: \"normal\",\n          required: true,\n          label: \"Auction Address\",\n          id: \"auctionAddress\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          margin: \"normal\",\n          required: true,\n          label: \"NFT Token ID\",\n          id: \"nftTokenId\",\n          placeholder: \"NFT token ID\",\n          name: \"tokenId\",\n          value: vars.nftId,\n          onChange: handleNftIdInput,\n          type: \"number\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleApproval,\n        variant: \"outlined\",\n        children: \"Set Approve\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n_s(NftApprovalCard, \"iV/aPzUS88gEL635GgvtFhKETZs=\", false, function () {\n  return [useSnackbar, useEth];\n});\n_c = NftApprovalCard;\nexport default NftApprovalCard;\nvar _c;\n$RefreshReg$(_c, \"NftApprovalCard\");","map":{"version":3,"names":["Card","CardContent","Typography","Button","TextField","React","useState","useEth","useSnackbar","NftApprovalCard","enqueueSnackbar","state","web3","networkID","accounts","nftJson","require","vars","setVars","auctionAddress","nftId","handleAddressInput","event","target","value","handleNftIdInput","handleApproval","nftAddress","networks","address","nftContract","eth","Contract","abi","tid","parseInt","methods","approve","send","from","variant","err","console","log"],"sources":["/home/peilunnn/Downloads/Internship Projects/gcp-dapp-auction/client/src/components/NftApprovalCard.jsx"],"sourcesContent":["import {\n  Card,\n  CardContent,\n  Typography,\n  Button,\n  TextField,\n} from '@mui/material';\nimport React, { useState } from 'react';\nimport { useEth } from '../contexts/EthContext';\nimport { useSnackbar } from 'notistack';\nconst NftApprovalCard = () => {\n  const { enqueueSnackbar } = useSnackbar();\n  const {\n    state: { web3, networkID, accounts },\n  } = useEth();\n  const nftJson = require('../contracts/MintNFT.json');\n  const [vars, setVars] = useState({\n    auctionAddress: '',\n    nftId: '', //token id,\n  });\n\n  const handleAddressInput = (event) => {\n    setVars({\n      ...vars,\n      auctionAddress: event.target.value,\n    });\n  };\n\n  const handleNftIdInput = (event) => {\n    setVars({\n      ...vars,\n      nftId: event.target.value,\n    });\n  };\n\n  const handleApproval = async () => {\n    let nftAddress = nftJson.networks[networkID].address;\n    let nftContract = new web3.eth.Contract(nftJson.abi, nftAddress);\n    const tid = parseInt(vars.nftId);\n    try {\n      await nftContract.methods\n        .approve(vars.auctionAddress, tid)\n        .send({ from: accounts[0] });\n      enqueueSnackbar('Approval successful', {\n        variant: 'success',\n      });\n    } catch (err) {\n      console.log(err);\n      enqueueSnackbar('Approval failed', {\n        variant: 'error',\n      });\n    }\n  };\n\n  return (\n    <Card>\n      <CardContent>\n        <Typography variant=\"h4\" component=\"div\">\n          Approve Auction Contract for NFT\n        </Typography>\n        <Typography variant=\"body1\">\n          Enter the auction contract address and the NFT token id which you want\n          to allow the auction to make changes to.\n        </Typography>\n        <form className=\"nft-approval-form\">\n          <TextField\n            placeholder=\"Auction Address\"\n            name=\"auctionAddress\"\n            value={vars.auctionAddress}\n            onChange={handleAddressInput}\n            margin=\"normal\"\n            required\n            label=\"Auction Address\"\n            id=\"auctionAddress\"\n          />\n          <TextField\n            margin=\"normal\"\n            required\n            label=\"NFT Token ID\"\n            id=\"nftTokenId\"\n            placeholder=\"NFT token ID\"\n            name=\"tokenId\"\n            value={vars.nftId}\n            onChange={handleNftIdInput}\n            type=\"number\"\n          />\n        </form>\n        <Button onClick={handleApproval} variant=\"outlined\">\n          Set Approve\n        </Button>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default NftApprovalCard;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}