{"ast":null,"code":"\"use strict\";\n\n/**\n *  Conversion Utilities\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar types_1 = require(\"./types\");\nvar errors = require(\"./errors\");\nexports.AddressZero = '0x0000000000000000000000000000000000000000';\nexports.HashZero = '0x0000000000000000000000000000000000000000000000000000000000000000';\nfunction isBigNumber(value) {\n  return value instanceof types_1.BigNumber;\n}\nfunction addSlice(array) {\n  if (array.slice) {\n    return array;\n  }\n  array.slice = function () {\n    var args = Array.prototype.slice.call(arguments);\n    return new Uint8Array(Array.prototype.slice.apply(array, args));\n  };\n  return array;\n}\nfunction isArrayish(value) {\n  if (!value || parseInt(String(value.length)) != value.length || typeof value === 'string') {\n    return false;\n  }\n  for (var i = 0; i < value.length; i++) {\n    var v = value[i];\n    if (v < 0 || v >= 256 || parseInt(String(v)) != v) {\n      return false;\n    }\n  }\n  return true;\n}\nexports.isArrayish = isArrayish;\nfunction arrayify(value) {\n  if (value == null) {\n    errors.throwError('cannot convert null value to array', errors.INVALID_ARGUMENT, {\n      arg: 'value',\n      value: value\n    });\n  }\n  if (isBigNumber(value)) {\n    value = value.toHexString();\n  }\n  if (typeof value === 'string') {\n    var match = value.match(/^(0x)?[0-9a-fA-F]*$/);\n    if (!match) {\n      errors.throwError('invalid hexidecimal string', errors.INVALID_ARGUMENT, {\n        arg: 'value',\n        value: value\n      });\n    }\n    if (match[1] !== '0x') {\n      errors.throwError('hex string must have 0x prefix', errors.INVALID_ARGUMENT, {\n        arg: 'value',\n        value: value\n      });\n    }\n    value = value.substring(2);\n    if (value.length % 2) {\n      value = '0' + value;\n    }\n    var result = [];\n    for (var i = 0; i < value.length; i += 2) {\n      result.push(parseInt(value.substr(i, 2), 16));\n    }\n    return addSlice(new Uint8Array(result));\n  } else if (typeof value === 'string') {}\n  if (isArrayish(value)) {\n    return addSlice(new Uint8Array(value));\n  }\n  errors.throwError('invalid arrayify value', null, {\n    arg: 'value',\n    value: value,\n    type: typeof value\n  });\n  return null;\n}\nexports.arrayify = arrayify;\nfunction concat(objects) {\n  var arrays = [];\n  var length = 0;\n  for (var i = 0; i < objects.length; i++) {\n    var object = arrayify(objects[i]);\n    arrays.push(object);\n    length += object.length;\n  }\n  var result = new Uint8Array(length);\n  var offset = 0;\n  for (var i = 0; i < arrays.length; i++) {\n    result.set(arrays[i], offset);\n    offset += arrays[i].length;\n  }\n  return addSlice(result);\n}\nexports.concat = concat;\nfunction stripZeros(value) {\n  var result = arrayify(value);\n  if (result.length === 0) {\n    return result;\n  }\n  // Find the first non-zero entry\n  var start = 0;\n  while (result[start] === 0) {\n    start++;\n  }\n  // If we started with zeros, strip them\n  if (start) {\n    result = result.slice(start);\n  }\n  return result;\n}\nexports.stripZeros = stripZeros;\nfunction padZeros(value, length) {\n  value = arrayify(value);\n  if (length < value.length) {\n    throw new Error('cannot pad');\n  }\n  var result = new Uint8Array(length);\n  result.set(value, length - value.length);\n  return addSlice(result);\n}\nexports.padZeros = padZeros;\nfunction isHexString(value, length) {\n  if (typeof value !== 'string' || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n    return false;\n  }\n  if (length && value.length !== 2 + 2 * length) {\n    return false;\n  }\n  return true;\n}\nexports.isHexString = isHexString;\nvar HexCharacters = '0123456789abcdef';\nfunction hexlify(value) {\n  if (isBigNumber(value)) {\n    return value.toHexString();\n  }\n  if (typeof value === 'number') {\n    if (value < 0) {\n      errors.throwError('cannot hexlify negative value', errors.INVALID_ARGUMENT, {\n        arg: 'value',\n        value: value\n      });\n    }\n    var hex = '';\n    while (value) {\n      hex = HexCharacters[value & 0x0f] + hex;\n      value = Math.floor(value / 16);\n    }\n    if (hex.length) {\n      if (hex.length % 2) {\n        hex = '0' + hex;\n      }\n      return '0x' + hex;\n    }\n    return '0x00';\n  }\n  if (typeof value === 'string') {\n    var match = value.match(/^(0x)?[0-9a-fA-F]*$/);\n    if (!match) {\n      errors.throwError('invalid hexidecimal string', errors.INVALID_ARGUMENT, {\n        arg: 'value',\n        value: value\n      });\n    }\n    if (match[1] !== '0x') {\n      errors.throwError('hex string must have 0x prefix', errors.INVALID_ARGUMENT, {\n        arg: 'value',\n        value: value\n      });\n    }\n    if (value.length % 2) {\n      value = '0x0' + value.substring(2);\n    }\n    return value;\n  }\n  if (isArrayish(value)) {\n    var result = [];\n    for (var i = 0; i < value.length; i++) {\n      var v = value[i];\n      result.push(HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f]);\n    }\n    return '0x' + result.join('');\n  }\n  errors.throwError('invalid hexlify value', null, {\n    arg: 'value',\n    value: value\n  });\n  return 'never';\n}\nexports.hexlify = hexlify;\nfunction hexDataLength(data) {\n  if (!isHexString(data) || data.length % 2 !== 0) {\n    return null;\n  }\n  return (data.length - 2) / 2;\n}\nexports.hexDataLength = hexDataLength;\nfunction hexDataSlice(data, offset, length) {\n  if (!isHexString(data)) {\n    errors.throwError('invalid hex data', errors.INVALID_ARGUMENT, {\n      arg: 'value',\n      value: data\n    });\n  }\n  if (data.length % 2 !== 0) {\n    errors.throwError('hex data length must be even', errors.INVALID_ARGUMENT, {\n      arg: 'value',\n      value: data\n    });\n  }\n  offset = 2 + 2 * offset;\n  if (length != null) {\n    return '0x' + data.substring(offset, offset + 2 * length);\n  }\n  return '0x' + data.substring(offset);\n}\nexports.hexDataSlice = hexDataSlice;\nfunction hexStripZeros(value) {\n  if (!isHexString(value)) {\n    errors.throwError('invalid hex string', errors.INVALID_ARGUMENT, {\n      arg: 'value',\n      value: value\n    });\n  }\n  while (value.length > 3 && value.substring(0, 3) === '0x0') {\n    value = '0x' + value.substring(3);\n  }\n  return value;\n}\nexports.hexStripZeros = hexStripZeros;\nfunction hexZeroPad(value, length) {\n  if (!isHexString(value)) {\n    errors.throwError('invalid hex string', errors.INVALID_ARGUMENT, {\n      arg: 'value',\n      value: value\n    });\n  }\n  while (value.length < 2 * length + 2) {\n    value = '0x0' + value.substring(2);\n  }\n  return value;\n}\nexports.hexZeroPad = hexZeroPad;\nfunction isSignature(value) {\n  return value && value.r != null && value.s != null;\n}\nfunction splitSignature(signature) {\n  var v = 0;\n  var r = '0x',\n    s = '0x';\n  if (isSignature(signature)) {\n    if (signature.v == null && signature.recoveryParam == null) {\n      errors.throwError('at least on of recoveryParam or v must be specified', errors.INVALID_ARGUMENT, {\n        argument: 'signature',\n        value: signature\n      });\n    }\n    r = hexZeroPad(signature.r, 32);\n    s = hexZeroPad(signature.s, 32);\n    v = signature.v;\n    if (typeof v === 'string') {\n      v = parseInt(v, 16);\n    }\n    var recoveryParam = signature.recoveryParam;\n    if (recoveryParam == null && signature.v != null) {\n      recoveryParam = 1 - v % 2;\n    }\n    v = 27 + recoveryParam;\n  } else {\n    var bytes = arrayify(signature);\n    if (bytes.length !== 65) {\n      throw new Error('invalid signature');\n    }\n    r = hexlify(bytes.slice(0, 32));\n    s = hexlify(bytes.slice(32, 64));\n    v = bytes[64];\n    if (v !== 27 && v !== 28) {\n      v = 27 + v % 2;\n    }\n  }\n  return {\n    r: r,\n    s: s,\n    recoveryParam: v - 27,\n    v: v\n  };\n}\nexports.splitSignature = splitSignature;\nfunction joinSignature(signature) {\n  signature = splitSignature(signature);\n  return hexlify(concat([signature.r, signature.s, signature.recoveryParam ? '0x1c' : '0x1b']));\n}\nexports.joinSignature = joinSignature;","map":{"version":3,"names":["Object","defineProperty","exports","value","types_1","require","errors","AddressZero","HashZero","isBigNumber","BigNumber","addSlice","array","slice","args","Array","prototype","call","arguments","Uint8Array","apply","isArrayish","parseInt","String","length","i","v","arrayify","throwError","INVALID_ARGUMENT","arg","toHexString","match","substring","result","push","substr","type","concat","objects","arrays","object","offset","set","stripZeros","start","padZeros","Error","isHexString","HexCharacters","hexlify","hex","Math","floor","join","hexDataLength","data","hexDataSlice","hexStripZeros","hexZeroPad","isSignature","r","s","splitSignature","signature","recoveryParam","argument","bytes","joinSignature"],"sources":["/home/peilunnn/Downloads/Internship Projects/gcp-dapp-auction/client/node_modules/truffle-contract/node_modules/web3-eth-abi/node_modules/ethers/utils/bytes.js"],"sourcesContent":["\"use strict\";\n/**\n *  Conversion Utilities\n *\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar types_1 = require(\"./types\");\nvar errors = require(\"./errors\");\nexports.AddressZero = '0x0000000000000000000000000000000000000000';\nexports.HashZero = '0x0000000000000000000000000000000000000000000000000000000000000000';\nfunction isBigNumber(value) {\n    return (value instanceof types_1.BigNumber);\n}\nfunction addSlice(array) {\n    if (array.slice) {\n        return array;\n    }\n    array.slice = function () {\n        var args = Array.prototype.slice.call(arguments);\n        return new Uint8Array(Array.prototype.slice.apply(array, args));\n    };\n    return array;\n}\nfunction isArrayish(value) {\n    if (!value || parseInt(String(value.length)) != value.length || typeof (value) === 'string') {\n        return false;\n    }\n    for (var i = 0; i < value.length; i++) {\n        var v = value[i];\n        if (v < 0 || v >= 256 || parseInt(String(v)) != v) {\n            return false;\n        }\n    }\n    return true;\n}\nexports.isArrayish = isArrayish;\nfunction arrayify(value) {\n    if (value == null) {\n        errors.throwError('cannot convert null value to array', errors.INVALID_ARGUMENT, { arg: 'value', value: value });\n    }\n    if (isBigNumber(value)) {\n        value = value.toHexString();\n    }\n    if (typeof (value) === 'string') {\n        var match = value.match(/^(0x)?[0-9a-fA-F]*$/);\n        if (!match) {\n            errors.throwError('invalid hexidecimal string', errors.INVALID_ARGUMENT, { arg: 'value', value: value });\n        }\n        if (match[1] !== '0x') {\n            errors.throwError('hex string must have 0x prefix', errors.INVALID_ARGUMENT, { arg: 'value', value: value });\n        }\n        value = value.substring(2);\n        if (value.length % 2) {\n            value = '0' + value;\n        }\n        var result = [];\n        for (var i = 0; i < value.length; i += 2) {\n            result.push(parseInt(value.substr(i, 2), 16));\n        }\n        return addSlice(new Uint8Array(result));\n    }\n    else if (typeof (value) === 'string') {\n    }\n    if (isArrayish(value)) {\n        return addSlice(new Uint8Array(value));\n    }\n    errors.throwError('invalid arrayify value', null, { arg: 'value', value: value, type: typeof (value) });\n    return null;\n}\nexports.arrayify = arrayify;\nfunction concat(objects) {\n    var arrays = [];\n    var length = 0;\n    for (var i = 0; i < objects.length; i++) {\n        var object = arrayify(objects[i]);\n        arrays.push(object);\n        length += object.length;\n    }\n    var result = new Uint8Array(length);\n    var offset = 0;\n    for (var i = 0; i < arrays.length; i++) {\n        result.set(arrays[i], offset);\n        offset += arrays[i].length;\n    }\n    return addSlice(result);\n}\nexports.concat = concat;\nfunction stripZeros(value) {\n    var result = arrayify(value);\n    if (result.length === 0) {\n        return result;\n    }\n    // Find the first non-zero entry\n    var start = 0;\n    while (result[start] === 0) {\n        start++;\n    }\n    // If we started with zeros, strip them\n    if (start) {\n        result = result.slice(start);\n    }\n    return result;\n}\nexports.stripZeros = stripZeros;\nfunction padZeros(value, length) {\n    value = arrayify(value);\n    if (length < value.length) {\n        throw new Error('cannot pad');\n    }\n    var result = new Uint8Array(length);\n    result.set(value, length - value.length);\n    return addSlice(result);\n}\nexports.padZeros = padZeros;\nfunction isHexString(value, length) {\n    if (typeof (value) !== 'string' || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n        return false;\n    }\n    if (length && value.length !== 2 + 2 * length) {\n        return false;\n    }\n    return true;\n}\nexports.isHexString = isHexString;\nvar HexCharacters = '0123456789abcdef';\nfunction hexlify(value) {\n    if (isBigNumber(value)) {\n        return value.toHexString();\n    }\n    if (typeof (value) === 'number') {\n        if (value < 0) {\n            errors.throwError('cannot hexlify negative value', errors.INVALID_ARGUMENT, { arg: 'value', value: value });\n        }\n        var hex = '';\n        while (value) {\n            hex = HexCharacters[value & 0x0f] + hex;\n            value = Math.floor(value / 16);\n        }\n        if (hex.length) {\n            if (hex.length % 2) {\n                hex = '0' + hex;\n            }\n            return '0x' + hex;\n        }\n        return '0x00';\n    }\n    if (typeof (value) === 'string') {\n        var match = value.match(/^(0x)?[0-9a-fA-F]*$/);\n        if (!match) {\n            errors.throwError('invalid hexidecimal string', errors.INVALID_ARGUMENT, { arg: 'value', value: value });\n        }\n        if (match[1] !== '0x') {\n            errors.throwError('hex string must have 0x prefix', errors.INVALID_ARGUMENT, { arg: 'value', value: value });\n        }\n        if (value.length % 2) {\n            value = '0x0' + value.substring(2);\n        }\n        return value;\n    }\n    if (isArrayish(value)) {\n        var result = [];\n        for (var i = 0; i < value.length; i++) {\n            var v = value[i];\n            result.push(HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f]);\n        }\n        return '0x' + result.join('');\n    }\n    errors.throwError('invalid hexlify value', null, { arg: 'value', value: value });\n    return 'never';\n}\nexports.hexlify = hexlify;\nfunction hexDataLength(data) {\n    if (!isHexString(data) || (data.length % 2) !== 0) {\n        return null;\n    }\n    return (data.length - 2) / 2;\n}\nexports.hexDataLength = hexDataLength;\nfunction hexDataSlice(data, offset, length) {\n    if (!isHexString(data)) {\n        errors.throwError('invalid hex data', errors.INVALID_ARGUMENT, { arg: 'value', value: data });\n    }\n    if ((data.length % 2) !== 0) {\n        errors.throwError('hex data length must be even', errors.INVALID_ARGUMENT, { arg: 'value', value: data });\n    }\n    offset = 2 + 2 * offset;\n    if (length != null) {\n        return '0x' + data.substring(offset, offset + 2 * length);\n    }\n    return '0x' + data.substring(offset);\n}\nexports.hexDataSlice = hexDataSlice;\nfunction hexStripZeros(value) {\n    if (!isHexString(value)) {\n        errors.throwError('invalid hex string', errors.INVALID_ARGUMENT, { arg: 'value', value: value });\n    }\n    while (value.length > 3 && value.substring(0, 3) === '0x0') {\n        value = '0x' + value.substring(3);\n    }\n    return value;\n}\nexports.hexStripZeros = hexStripZeros;\nfunction hexZeroPad(value, length) {\n    if (!isHexString(value)) {\n        errors.throwError('invalid hex string', errors.INVALID_ARGUMENT, { arg: 'value', value: value });\n    }\n    while (value.length < 2 * length + 2) {\n        value = '0x0' + value.substring(2);\n    }\n    return value;\n}\nexports.hexZeroPad = hexZeroPad;\nfunction isSignature(value) {\n    return (value && value.r != null && value.s != null);\n}\nfunction splitSignature(signature) {\n    var v = 0;\n    var r = '0x', s = '0x';\n    if (isSignature(signature)) {\n        if (signature.v == null && signature.recoveryParam == null) {\n            errors.throwError('at least on of recoveryParam or v must be specified', errors.INVALID_ARGUMENT, { argument: 'signature', value: signature });\n        }\n        r = hexZeroPad(signature.r, 32);\n        s = hexZeroPad(signature.s, 32);\n        v = signature.v;\n        if (typeof (v) === 'string') {\n            v = parseInt(v, 16);\n        }\n        var recoveryParam = signature.recoveryParam;\n        if (recoveryParam == null && signature.v != null) {\n            recoveryParam = 1 - (v % 2);\n        }\n        v = 27 + recoveryParam;\n    }\n    else {\n        var bytes = arrayify(signature);\n        if (bytes.length !== 65) {\n            throw new Error('invalid signature');\n        }\n        r = hexlify(bytes.slice(0, 32));\n        s = hexlify(bytes.slice(32, 64));\n        v = bytes[64];\n        if (v !== 27 && v !== 28) {\n            v = 27 + (v % 2);\n        }\n    }\n    return {\n        r: r,\n        s: s,\n        recoveryParam: (v - 27),\n        v: v\n    };\n}\nexports.splitSignature = splitSignature;\nfunction joinSignature(signature) {\n    signature = splitSignature(signature);\n    return hexlify(concat([\n        signature.r,\n        signature.s,\n        (signature.recoveryParam ? '0x1c' : '0x1b')\n    ]));\n}\nexports.joinSignature = joinSignature;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}