{"ast":null,"code":"import axios from \"axios\";\nrequire(\"dotenv\").config();\nconst FormData = require(\"form-data\");\nconst {\n  storeDataToFile\n} = require(\"./ipfsHelper.js\");\nconst pinataEndpoint = process.env.PINATA_ENDPOINT;\nconst pinataApiKey = process.env.REACT_APP_PINATA_API_KEY;\nconst pinataApiSecret = process.env.REACT_APP_PINATA_API_SECRET;\nconst pinImage = async readStream => {\n  const form_data = new FormData();\n  try {\n    form_data.append(\"file\", readStream);\n    form_data.append(\"pinataMetadata\", JSON.stringify({\n      name: \"File name\"\n    }));\n    form_data.append(\"pinataOptions\", JSON.stringify({\n      cidVersion: 0\n    }));\n    const response = await axios.post(pinataEndpoint, form_data, {\n      maxContentLength: \"Infinity\",\n      headers: {\n        pinata_api_key: pinataApiKey,\n        pinata_secret_api_key: pinataApiSecret,\n        \"Content-Type\": `multipart/form-data; boundary=${form_data._boundary}`\n      }\n    });\n    await storeDataToFile(response.data);\n    console.log(\"Successfully pinned image, response added to JSON file\");\n  } catch (err) {\n    console.log(\"Error occurred while pinning NFT to IPFS: \", err);\n  }\n};\nexport default pinImage;","map":{"version":3,"names":["axios","require","config","FormData","storeDataToFile","pinataEndpoint","process","env","PINATA_ENDPOINT","pinataApiKey","REACT_APP_PINATA_API_KEY","pinataApiSecret","REACT_APP_PINATA_API_SECRET","pinImage","readStream","form_data","append","JSON","stringify","name","cidVersion","response","post","maxContentLength","headers","pinata_api_key","pinata_secret_api_key","_boundary","data","console","log","err"],"sources":["/home/peilunnn/Downloads/Internship Projects/gcp-dapp-auction/client/src/scripts/pinImage.js"],"sourcesContent":["import axios from \"axios\";\nrequire(\"dotenv\").config();\nconst FormData = require(\"form-data\");\nconst { storeDataToFile } = require(\"./ipfsHelper.js\");\n\nconst pinataEndpoint = process.env.PINATA_ENDPOINT;\nconst pinataApiKey = process.env.REACT_APP_PINATA_API_KEY;\nconst pinataApiSecret = process.env.REACT_APP_PINATA_API_SECRET;\n\nconst pinImage = async (readStream) => {\n  const form_data = new FormData();\n  try {\n    form_data.append(\"file\", readStream);\n    form_data.append(\"pinataMetadata\", JSON.stringify({ name: \"File name\" }));\n    form_data.append(\"pinataOptions\", JSON.stringify({ cidVersion: 0 }));\n\n    const response = await axios.post(pinataEndpoint, form_data, {\n      maxContentLength: \"Infinity\",\n      headers: {\n        pinata_api_key: pinataApiKey,\n        pinata_secret_api_key: pinataApiSecret,\n        \"Content-Type\": `multipart/form-data; boundary=${form_data._boundary}`,\n      },\n    });\n    await storeDataToFile(response.data);\n    console.log(\"Successfully pinned image, response added to JSON file\");\n  } catch (err) {\n    console.log(\"Error occurred while pinning NFT to IPFS: \", err);\n  }\n};\n\nexport default pinImage;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzBC,OAAO,CAAC,QAAQ,CAAC,CAACC,MAAM,EAAE;AAC1B,MAAMC,QAAQ,GAAGF,OAAO,CAAC,WAAW,CAAC;AACrC,MAAM;EAAEG;AAAgB,CAAC,GAAGH,OAAO,CAAC,iBAAiB,CAAC;AAEtD,MAAMI,cAAc,GAAGC,OAAO,CAACC,GAAG,CAACC,eAAe;AAClD,MAAMC,YAAY,GAAGH,OAAO,CAACC,GAAG,CAACG,wBAAwB;AACzD,MAAMC,eAAe,GAAGL,OAAO,CAACC,GAAG,CAACK,2BAA2B;AAE/D,MAAMC,QAAQ,GAAG,MAAOC,UAAU,IAAK;EACrC,MAAMC,SAAS,GAAG,IAAIZ,QAAQ,EAAE;EAChC,IAAI;IACFY,SAAS,CAACC,MAAM,CAAC,MAAM,EAAEF,UAAU,CAAC;IACpCC,SAAS,CAACC,MAAM,CAAC,gBAAgB,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEC,IAAI,EAAE;IAAY,CAAC,CAAC,CAAC;IACzEJ,SAAS,CAACC,MAAM,CAAC,eAAe,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEE,UAAU,EAAE;IAAE,CAAC,CAAC,CAAC;IAEpE,MAAMC,QAAQ,GAAG,MAAMrB,KAAK,CAACsB,IAAI,CAACjB,cAAc,EAAEU,SAAS,EAAE;MAC3DQ,gBAAgB,EAAE,UAAU;MAC5BC,OAAO,EAAE;QACPC,cAAc,EAAEhB,YAAY;QAC5BiB,qBAAqB,EAAEf,eAAe;QACtC,cAAc,EAAG,iCAAgCI,SAAS,CAACY,SAAU;MACvE;IACF,CAAC,CAAC;IACF,MAAMvB,eAAe,CAACiB,QAAQ,CAACO,IAAI,CAAC;IACpCC,OAAO,CAACC,GAAG,CAAC,wDAAwD,CAAC;EACvE,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZF,OAAO,CAACC,GAAG,CAAC,4CAA4C,EAAEC,GAAG,CAAC;EAChE;AACF,CAAC;AAED,eAAelB,QAAQ"},"metadata":{},"sourceType":"module"}