{"ast":null,"code":"/*\r\n *      bignumber.js v7.2.1\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2018 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\n\nvar isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\n  mathceil = Math.ceil,\n  mathfloor = Math.floor,\n  bignumberError = '[BigNumber Error] ',\n  tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\n  BASE = 1e14,\n  LOG_BASE = 14,\n  MAX_SAFE_INTEGER = 0x1fffffffffffff,\n  // 2^53 - 1\n  // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\n  POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\n  SQRT_BASE = 1e7,\n  // EDITABLE\n  // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\n  // the arguments to toExponential, toFixed, toFormat, and toPrecision.\n  MAX = 1E9; // 0 to MAX_INT32\n\n/*\r\n * Create and return a BigNumber constructor.\r\n */\nfunction clone(configObject) {\n  var div,\n    convertBase,\n    parseNumeric,\n    P = BigNumber.prototype = {\n      constructor: BigNumber,\n      toString: null,\n      valueOf: null\n    },\n    ONE = new BigNumber(1),\n    //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\n\n    // The default values below must be integers within the inclusive ranges stated.\n    // The values can also be changed at run-time using BigNumber.set.\n\n    // The maximum number of decimal places for operations involving division.\n    DECIMAL_PLACES = 20,\n    // 0 to MAX\n\n    // The rounding mode used when rounding to the above decimal places, and when using\n    // toExponential, toFixed, toFormat and toPrecision, and round (default value).\n    // UP         0 Away from zero.\n    // DOWN       1 Towards zero.\n    // CEIL       2 Towards +Infinity.\n    // FLOOR      3 Towards -Infinity.\n    // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\n    // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\n    // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\n    // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\n    // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\n    ROUNDING_MODE = 4,\n    // 0 to 8\n\n    // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\n\n    // The exponent value at and beneath which toString returns exponential notation.\n    // Number type: -7\n    TO_EXP_NEG = -7,\n    // 0 to -MAX\n\n    // The exponent value at and above which toString returns exponential notation.\n    // Number type: 21\n    TO_EXP_POS = 21,\n    // 0 to MAX\n\n    // RANGE : [MIN_EXP, MAX_EXP]\n\n    // The minimum exponent value, beneath which underflow to zero occurs.\n    // Number type: -324  (5e-324)\n    MIN_EXP = -1e7,\n    // -1 to -MAX\n\n    // The maximum exponent value, above which overflow to Infinity occurs.\n    // Number type:  308  (1.7976931348623157e+308)\n    // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\n    MAX_EXP = 1e7,\n    // 1 to MAX\n\n    // Whether to use cryptographically-secure random number generation, if available.\n    CRYPTO = false,\n    // true or false\n\n    // The modulo mode used when calculating the modulus: a mod n.\n    // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\n    // The remainder (r) is calculated as: r = a - n * q.\n    //\n    // UP        0 The remainder is positive if the dividend is negative, else is negative.\n    // DOWN      1 The remainder has the same sign as the dividend.\n    //             This modulo mode is commonly known as 'truncated division' and is\n    //             equivalent to (a % n) in JavaScript.\n    // FLOOR     3 The remainder has the same sign as the divisor (Python %).\n    // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\n    // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\n    //             The remainder is always positive.\n    //\n    // The truncated division, floored division, Euclidian division and IEEE 754 remainder\n    // modes are commonly used for the modulus operation.\n    // Although the other rounding modes can also be used, they may not give useful results.\n    MODULO_MODE = 1,\n    // 0 to 9\n\n    // The maximum number of significant digits of the result of the exponentiatedBy operation.\n    // If POW_PRECISION is 0, there will be unlimited significant digits.\n    POW_PRECISION = 0,\n    // 0 to MAX\n\n    // The format specification used by the BigNumber.prototype.toFormat method.\n    FORMAT = {\n      decimalSeparator: '.',\n      groupSeparator: ',',\n      groupSize: 3,\n      secondaryGroupSize: 0,\n      fractionGroupSeparator: '\\xA0',\n      // non-breaking space\n      fractionGroupSize: 0\n    },\n    // The alphabet used for base conversion.\n    // It must be at least 2 characters long, with no '.' or repeated character.\n    // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\n    ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz';\n\n  //------------------------------------------------------------------------------------------\n\n  // CONSTRUCTOR\n\n  /*\r\n   * The BigNumber constructor and exported function.\r\n   * Create and return a new instance of a BigNumber object.\r\n   *\r\n   * n {number|string|BigNumber} A numeric value.\r\n   * [b] {number} The base of n. Integer, 2 to ALPHABET.length inclusive.\r\n   */\n  function BigNumber(n, b) {\n    var alphabet,\n      c,\n      caseChanged,\n      e,\n      i,\n      isNum,\n      len,\n      str,\n      x = this;\n\n    // Enable constructor usage without new.\n    if (!(x instanceof BigNumber)) {\n      // Don't throw on constructor call without new (#81).\n      // '[BigNumber Error] Constructor call without new: {n}'\n      //throw Error(bignumberError + ' Constructor call without new: ' + n);\n      return new BigNumber(n, b);\n    }\n    if (b == null) {\n      // Duplicate.\n      if (n instanceof BigNumber) {\n        x.s = n.s;\n        x.e = n.e;\n        x.c = (n = n.c) ? n.slice() : n;\n        return;\n      }\n      isNum = typeof n == 'number';\n      if (isNum && n * 0 == 0) {\n        // Use `1 / n` to handle minus zero also.\n        x.s = 1 / n < 0 ? (n = -n, -1) : 1;\n\n        // Faster path for integers.\n        if (n === ~~n) {\n          for (e = 0, i = n; i >= 10; i /= 10, e++);\n          x.e = e;\n          x.c = [n];\n          return;\n        }\n        str = n + '';\n      } else {\n        if (!isNumeric.test(str = n + '')) return parseNumeric(x, str, isNum);\n        x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\n      }\n\n      // Decimal point?\n      if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\n\n      // Exponential form?\n      if ((i = str.search(/e/i)) > 0) {\n        // Determine exponent.\n        if (e < 0) e = i;\n        e += +str.slice(i + 1);\n        str = str.substring(0, i);\n      } else if (e < 0) {\n        // Integer.\n        e = str.length;\n      }\n    } else {\n      // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\n      intCheck(b, 2, ALPHABET.length, 'Base');\n      str = n + '';\n\n      // Allow exponential notation to be used with base 10 argument, while\n      // also rounding to DECIMAL_PLACES as with other bases.\n      if (b == 10) {\n        x = new BigNumber(n instanceof BigNumber ? n : str);\n        return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\n      }\n      isNum = typeof n == 'number';\n      if (isNum) {\n        // Avoid potential interpretation of Infinity and NaN as base 44+ values.\n        if (n * 0 != 0) return parseNumeric(x, str, isNum, b);\n        x.s = 1 / n < 0 ? (str = str.slice(1), -1) : 1;\n\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\n        if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\n          throw Error(tooManyDigits + n);\n        }\n\n        // Prevent later check for length on converted number.\n        isNum = false;\n      } else {\n        x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\n      }\n      alphabet = ALPHABET.slice(0, b);\n      e = i = 0;\n\n      // Check that str is a valid base b number.\n      // Don't use RegExp so alphabet can contain special characters.\n      for (len = str.length; i < len; i++) {\n        if (alphabet.indexOf(c = str.charAt(i)) < 0) {\n          if (c == '.') {\n            // If '.' is not the first character and it has not be found before.\n            if (i > e) {\n              e = len;\n              continue;\n            }\n          } else if (!caseChanged) {\n            // Allow e.g. hexadecimal 'FF' as well as 'ff'.\n            if (str == str.toUpperCase() && (str = str.toLowerCase()) || str == str.toLowerCase() && (str = str.toUpperCase())) {\n              caseChanged = true;\n              i = -1;\n              e = 0;\n              continue;\n            }\n          }\n          return parseNumeric(x, n + '', isNum, b);\n        }\n      }\n      str = convertBase(str, b, 10, x.s);\n\n      // Decimal point?\n      if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');else e = str.length;\n    }\n\n    // Determine leading zeros.\n    for (i = 0; str.charCodeAt(i) === 48; i++);\n\n    // Determine trailing zeros.\n    for (len = str.length; str.charCodeAt(--len) === 48;);\n    str = str.slice(i, ++len);\n    if (str) {\n      len -= i;\n\n      // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\n      if (isNum && BigNumber.DEBUG && len > 15 && (n > MAX_SAFE_INTEGER || n !== mathfloor(n))) {\n        throw Error(tooManyDigits + x.s * n);\n      }\n      e = e - i - 1;\n\n      // Overflow?\n      if (e > MAX_EXP) {\n        // Infinity.\n        x.c = x.e = null;\n\n        // Underflow?\n      } else if (e < MIN_EXP) {\n        // Zero.\n        x.c = [x.e = 0];\n      } else {\n        x.e = e;\n        x.c = [];\n\n        // Transform base\n\n        // e is the base 10 exponent.\n        // i is where to slice str to get the first element of the coefficient array.\n        i = (e + 1) % LOG_BASE;\n        if (e < 0) i += LOG_BASE;\n        if (i < len) {\n          if (i) x.c.push(+str.slice(0, i));\n          for (len -= LOG_BASE; i < len;) {\n            x.c.push(+str.slice(i, i += LOG_BASE));\n          }\n          str = str.slice(i);\n          i = LOG_BASE - str.length;\n        } else {\n          i -= len;\n        }\n        for (; i--; str += '0');\n        x.c.push(+str);\n      }\n    } else {\n      // Zero.\n      x.c = [x.e = 0];\n    }\n  }\n\n  // CONSTRUCTOR PROPERTIES\n\n  BigNumber.clone = clone;\n  BigNumber.ROUND_UP = 0;\n  BigNumber.ROUND_DOWN = 1;\n  BigNumber.ROUND_CEIL = 2;\n  BigNumber.ROUND_FLOOR = 3;\n  BigNumber.ROUND_HALF_UP = 4;\n  BigNumber.ROUND_HALF_DOWN = 5;\n  BigNumber.ROUND_HALF_EVEN = 6;\n  BigNumber.ROUND_HALF_CEIL = 7;\n  BigNumber.ROUND_HALF_FLOOR = 8;\n  BigNumber.EUCLID = 9;\n\n  /*\r\n   * Configure infrequently-changing library-wide settings.\r\n   *\r\n   * Accept an object with the following optional properties (if the value of a property is\r\n   * a number, it must be an integer within the inclusive range stated):\r\n   *\r\n   *   DECIMAL_PLACES   {number}           0 to MAX\r\n   *   ROUNDING_MODE    {number}           0 to 8\r\n   *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n   *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n   *   CRYPTO           {boolean}          true or false\r\n   *   MODULO_MODE      {number}           0 to 9\r\n   *   POW_PRECISION       {number}           0 to MAX\r\n   *   ALPHABET         {string}           A string of two or more unique characters which does\r\n   *                                     not contain '.'.\r\n   *   FORMAT           {object}           An object with some of the following properties:\r\n   *      decimalSeparator       {string}\r\n   *      groupSeparator         {string}\r\n   *      groupSize              {number}\r\n   *      secondaryGroupSize     {number}\r\n   *      fractionGroupSeparator {string}\r\n   *      fractionGroupSize      {number}\r\n   *\r\n   * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n   *\r\n   * E.g.\r\n   * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n   *\r\n   * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n   *\r\n   * Return an object with the properties current values.\r\n   */\n  BigNumber.config = BigNumber.set = function (obj) {\n    var p, v;\n    if (obj != null) {\n      if (typeof obj == 'object') {\n        // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\n        // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\n        if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\n          v = obj[p];\n          intCheck(v, 0, MAX, p);\n          DECIMAL_PLACES = v;\n        }\n\n        // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\n        // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\n        if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\n          v = obj[p];\n          intCheck(v, 0, 8, p);\n          ROUNDING_MODE = v;\n        }\n\n        // EXPONENTIAL_AT {number|number[]}\n        // Integer, -MAX to MAX inclusive or\n        // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\n        // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\n        if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\n          v = obj[p];\n          if (isArray(v)) {\n            intCheck(v[0], -MAX, 0, p);\n            intCheck(v[1], 0, MAX, p);\n            TO_EXP_NEG = v[0];\n            TO_EXP_POS = v[1];\n          } else {\n            intCheck(v, -MAX, MAX, p);\n            TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\n          }\n        }\n\n        // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\n        // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\n        // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\n        if (obj.hasOwnProperty(p = 'RANGE')) {\n          v = obj[p];\n          if (isArray(v)) {\n            intCheck(v[0], -MAX, -1, p);\n            intCheck(v[1], 1, MAX, p);\n            MIN_EXP = v[0];\n            MAX_EXP = v[1];\n          } else {\n            intCheck(v, -MAX, MAX, p);\n            if (v) {\n              MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\n            } else {\n              throw Error(bignumberError + p + ' cannot be zero: ' + v);\n            }\n          }\n        }\n\n        // CRYPTO {boolean} true or false.\n        // '[BigNumber Error] CRYPTO not true or false: {v}'\n        // '[BigNumber Error] crypto unavailable'\n        if (obj.hasOwnProperty(p = 'CRYPTO')) {\n          v = obj[p];\n          if (v === !!v) {\n            if (v) {\n              if (typeof crypto != 'undefined' && crypto && (crypto.getRandomValues || crypto.randomBytes)) {\n                CRYPTO = v;\n              } else {\n                CRYPTO = !v;\n                throw Error(bignumberError + 'crypto unavailable');\n              }\n            } else {\n              CRYPTO = v;\n            }\n          } else {\n            throw Error(bignumberError + p + ' not true or false: ' + v);\n          }\n        }\n\n        // MODULO_MODE {number} Integer, 0 to 9 inclusive.\n        // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\n        if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\n          v = obj[p];\n          intCheck(v, 0, 9, p);\n          MODULO_MODE = v;\n        }\n\n        // POW_PRECISION {number} Integer, 0 to MAX inclusive.\n        // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\n        if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\n          v = obj[p];\n          intCheck(v, 0, MAX, p);\n          POW_PRECISION = v;\n        }\n\n        // FORMAT {object}\n        // '[BigNumber Error] FORMAT not an object: {v}'\n        if (obj.hasOwnProperty(p = 'FORMAT')) {\n          v = obj[p];\n          if (typeof v == 'object') FORMAT = v;else throw Error(bignumberError + p + ' not an object: ' + v);\n        }\n\n        // ALPHABET {string}\n        // '[BigNumber Error] ALPHABET invalid: {v}'\n        if (obj.hasOwnProperty(p = 'ALPHABET')) {\n          v = obj[p];\n\n          // Disallow if only one character, or contains '.' or a repeated character.\n          if (typeof v == 'string' && !/^.$|\\.|(.).*\\1/.test(v)) {\n            ALPHABET = v;\n          } else {\n            throw Error(bignumberError + p + ' invalid: ' + v);\n          }\n        }\n      } else {\n        // '[BigNumber Error] Object expected: {v}'\n        throw Error(bignumberError + 'Object expected: ' + obj);\n      }\n    }\n    return {\n      DECIMAL_PLACES: DECIMAL_PLACES,\n      ROUNDING_MODE: ROUNDING_MODE,\n      EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\n      RANGE: [MIN_EXP, MAX_EXP],\n      CRYPTO: CRYPTO,\n      MODULO_MODE: MODULO_MODE,\n      POW_PRECISION: POW_PRECISION,\n      FORMAT: FORMAT,\n      ALPHABET: ALPHABET\n    };\n  };\n\n  /*\r\n   * Return true if v is a BigNumber instance, otherwise return false.\r\n   *\r\n   * v {any}\r\n   */\n  BigNumber.isBigNumber = function (v) {\n    return v instanceof BigNumber || v && v._isBigNumber === true || false;\n  };\n\n  /*\r\n   * Return a new BigNumber whose value is the maximum of the arguments.\r\n   *\r\n   * arguments {number|string|BigNumber}\r\n   */\n  BigNumber.maximum = BigNumber.max = function () {\n    return maxOrMin(arguments, P.lt);\n  };\n\n  /*\r\n   * Return a new BigNumber whose value is the minimum of the arguments.\r\n   *\r\n   * arguments {number|string|BigNumber}\r\n   */\n  BigNumber.minimum = BigNumber.min = function () {\n    return maxOrMin(arguments, P.gt);\n  };\n\n  /*\r\n   * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n   * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n   * zeros are produced).\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n   * '[BigNumber Error] crypto unavailable'\r\n   */\n  BigNumber.random = function () {\n    var pow2_53 = 0x20000000000000;\n\n    // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\n    // Check if Math.random() produces more than 32 bits of randomness.\n    // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\n    // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\n    var random53bitInt = Math.random() * pow2_53 & 0x1fffff ? function () {\n      return mathfloor(Math.random() * pow2_53);\n    } : function () {\n      return (Math.random() * 0x40000000 | 0) * 0x800000 + (Math.random() * 0x800000 | 0);\n    };\n    return function (dp) {\n      var a,\n        b,\n        e,\n        k,\n        v,\n        i = 0,\n        c = [],\n        rand = new BigNumber(ONE);\n      if (dp == null) dp = DECIMAL_PLACES;else intCheck(dp, 0, MAX);\n      k = mathceil(dp / LOG_BASE);\n      if (CRYPTO) {\n        // Browsers supporting crypto.getRandomValues.\n        if (crypto.getRandomValues) {\n          a = crypto.getRandomValues(new Uint32Array(k *= 2));\n          for (; i < k;) {\n            // 53 bits:\n            // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\n            // 11111 11111111 11111111 11111111 11100000 00000000 00000000\n            // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\n            //                                     11111 11111111 11111111\n            // 0x20000 is 2^21.\n            v = a[i] * 0x20000 + (a[i + 1] >>> 11);\n\n            // Rejection sampling:\n            // 0 <= v < 9007199254740992\n            // Probability that v >= 9e15, is\n            // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\n            if (v >= 9e15) {\n              b = crypto.getRandomValues(new Uint32Array(2));\n              a[i] = b[0];\n              a[i + 1] = b[1];\n            } else {\n              // 0 <= v <= 8999999999999999\n              // 0 <= (v % 1e14) <= 99999999999999\n              c.push(v % 1e14);\n              i += 2;\n            }\n          }\n          i = k / 2;\n\n          // Node.js supporting crypto.randomBytes.\n        } else if (crypto.randomBytes) {\n          // buffer\n          a = crypto.randomBytes(k *= 7);\n          for (; i < k;) {\n            // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\n            // 0x100000000 is 2^32, 0x1000000 is 2^24\n            // 11111 11111111 11111111 11111111 11111111 11111111 11111111\n            // 0 <= v < 9007199254740992\n            v = (a[i] & 31) * 0x1000000000000 + a[i + 1] * 0x10000000000 + a[i + 2] * 0x100000000 + a[i + 3] * 0x1000000 + (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\n            if (v >= 9e15) {\n              crypto.randomBytes(7).copy(a, i);\n            } else {\n              // 0 <= (v % 1e14) <= 99999999999999\n              c.push(v % 1e14);\n              i += 7;\n            }\n          }\n          i = k / 7;\n        } else {\n          CRYPTO = false;\n          throw Error(bignumberError + 'crypto unavailable');\n        }\n      }\n\n      // Use Math.random.\n      if (!CRYPTO) {\n        for (; i < k;) {\n          v = random53bitInt();\n          if (v < 9e15) c[i++] = v % 1e14;\n        }\n      }\n      k = c[--i];\n      dp %= LOG_BASE;\n\n      // Convert trailing digits to zeros according to dp.\n      if (k && dp) {\n        v = POWS_TEN[LOG_BASE - dp];\n        c[i] = mathfloor(k / v) * v;\n      }\n\n      // Remove trailing elements which are zero.\n      for (; c[i] === 0; c.pop(), i--);\n\n      // Zero?\n      if (i < 0) {\n        c = [e = 0];\n      } else {\n        // Remove leading elements which are zero and adjust exponent accordingly.\n        for (e = -1; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\n\n        // Count the digits of the first element of c to determine leading zeros, and...\n        for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\n\n        // adjust the exponent accordingly.\n        if (i < LOG_BASE) e -= LOG_BASE - i;\n      }\n      rand.e = e;\n      rand.c = c;\n      return rand;\n    };\n  }();\n\n  // PRIVATE FUNCTIONS\n\n  // Called by BigNumber and BigNumber.prototype.toString.\n  convertBase = function () {\n    var decimal = '0123456789';\n\n    /*\r\n     * Convert string of baseIn to an array of numbers of baseOut.\r\n     * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n     * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n     */\n    function toBaseOut(str, baseIn, baseOut, alphabet) {\n      var j,\n        arr = [0],\n        arrL,\n        i = 0,\n        len = str.length;\n      for (; i < len;) {\n        for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\n        arr[0] += alphabet.indexOf(str.charAt(i++));\n        for (j = 0; j < arr.length; j++) {\n          if (arr[j] > baseOut - 1) {\n            if (arr[j + 1] == null) arr[j + 1] = 0;\n            arr[j + 1] += arr[j] / baseOut | 0;\n            arr[j] %= baseOut;\n          }\n        }\n      }\n      return arr.reverse();\n    }\n\n    // Convert a numeric string of baseIn to a numeric string of baseOut.\n    // If the caller is toString, we are converting from base 10 to baseOut.\n    // If the caller is BigNumber, we are converting from baseIn to base 10.\n    return function (str, baseIn, baseOut, sign, callerIsToString) {\n      var alphabet,\n        d,\n        e,\n        k,\n        r,\n        x,\n        xc,\n        y,\n        i = str.indexOf('.'),\n        dp = DECIMAL_PLACES,\n        rm = ROUNDING_MODE;\n\n      // Non-integer.\n      if (i >= 0) {\n        k = POW_PRECISION;\n\n        // Unlimited precision.\n        POW_PRECISION = 0;\n        str = str.replace('.', '');\n        y = new BigNumber(baseIn);\n        x = y.pow(str.length - i);\n        POW_PRECISION = k;\n\n        // Convert str as if an integer, then restore the fraction part by dividing the\n        // result by its base raised to a power.\n\n        y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'), 10, baseOut, decimal);\n        y.e = y.c.length;\n      }\n\n      // Convert the number as integer.\n\n      xc = toBaseOut(str, baseIn, baseOut, callerIsToString ? (alphabet = ALPHABET, decimal) : (alphabet = decimal, ALPHABET));\n\n      // xc now represents str as an integer and converted to baseOut. e is the exponent.\n      e = k = xc.length;\n\n      // Remove trailing zeros.\n      for (; xc[--k] == 0; xc.pop());\n\n      // Zero?\n      if (!xc[0]) return alphabet.charAt(0);\n\n      // Does str represent an integer? If so, no need for the division.\n      if (i < 0) {\n        --e;\n      } else {\n        x.c = xc;\n        x.e = e;\n\n        // The sign is needed for correct rounding.\n        x.s = sign;\n        x = div(x, y, dp, rm, baseOut);\n        xc = x.c;\n        r = x.r;\n        e = x.e;\n      }\n\n      // xc now represents str converted to baseOut.\n\n      // THe index of the rounding digit.\n      d = e + dp + 1;\n\n      // The rounding digit: the digit to the right of the digit that may be rounded up.\n      i = xc[d];\n\n      // Look at the rounding digits and mode to determine whether to round up.\n\n      k = baseOut / 2;\n      r = r || d < 0 || xc[d + 1] != null;\n      r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : i > k || i == k && (rm == 4 || r || rm == 6 && xc[d - 1] & 1 || rm == (x.s < 0 ? 8 : 7));\n\n      // If the index of the rounding digit is not greater than zero, or xc represents\n      // zero, then the result of the base conversion is zero or, if rounding up, a value\n      // such as 0.00001.\n      if (d < 1 || !xc[0]) {\n        // 1^-dp or 0\n        str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\n      } else {\n        // Truncate xc to the required number of decimal places.\n        xc.length = d;\n\n        // Round up?\n        if (r) {\n          // Rounding up may mean the previous digit has to be rounded up and so on.\n          for (--baseOut; ++xc[--d] > baseOut;) {\n            xc[d] = 0;\n            if (!d) {\n              ++e;\n              xc = [1].concat(xc);\n            }\n          }\n        }\n\n        // Determine trailing zeros.\n        for (k = xc.length; !xc[--k];);\n\n        // E.g. [4, 11, 15] becomes 4bf.\n        for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\n\n        // Add leading zeros, decimal point and trailing zeros as required.\n        str = toFixedPoint(str, e, alphabet.charAt(0));\n      }\n\n      // The caller will add the sign.\n      return str;\n    };\n  }();\n\n  // Perform division in the specified base. Called by div and convertBase.\n  div = function () {\n    // Assume non-zero x and k.\n    function multiply(x, k, base) {\n      var m,\n        temp,\n        xlo,\n        xhi,\n        carry = 0,\n        i = x.length,\n        klo = k % SQRT_BASE,\n        khi = k / SQRT_BASE | 0;\n      for (x = x.slice(); i--;) {\n        xlo = x[i] % SQRT_BASE;\n        xhi = x[i] / SQRT_BASE | 0;\n        m = khi * xlo + xhi * klo;\n        temp = klo * xlo + m % SQRT_BASE * SQRT_BASE + carry;\n        carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\n        x[i] = temp % base;\n      }\n      if (carry) x = [carry].concat(x);\n      return x;\n    }\n    function compare(a, b, aL, bL) {\n      var i, cmp;\n      if (aL != bL) {\n        cmp = aL > bL ? 1 : -1;\n      } else {\n        for (i = cmp = 0; i < aL; i++) {\n          if (a[i] != b[i]) {\n            cmp = a[i] > b[i] ? 1 : -1;\n            break;\n          }\n        }\n      }\n      return cmp;\n    }\n    function subtract(a, b, aL, base) {\n      var i = 0;\n\n      // Subtract b from a.\n      for (; aL--;) {\n        a[aL] -= i;\n        i = a[aL] < b[aL] ? 1 : 0;\n        a[aL] = i * base + a[aL] - b[aL];\n      }\n\n      // Remove leading zeros.\n      for (; !a[0] && a.length > 1; a.splice(0, 1));\n    }\n\n    // x: dividend, y: divisor.\n    return function (x, y, dp, rm, base) {\n      var cmp,\n        e,\n        i,\n        more,\n        n,\n        prod,\n        prodL,\n        q,\n        qc,\n        rem,\n        remL,\n        rem0,\n        xi,\n        xL,\n        yc0,\n        yL,\n        yz,\n        s = x.s == y.s ? 1 : -1,\n        xc = x.c,\n        yc = y.c;\n\n      // Either NaN, Infinity or 0?\n      if (!xc || !xc[0] || !yc || !yc[0]) {\n        return new BigNumber(\n        // Return NaN if either NaN, or both Infinity or 0.\n        !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\n        // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\n        xc && xc[0] == 0 || !yc ? s * 0 : s / 0);\n      }\n      q = new BigNumber(s);\n      qc = q.c = [];\n      e = x.e - y.e;\n      s = dp + e + 1;\n      if (!base) {\n        base = BASE;\n        e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\n        s = s / LOG_BASE | 0;\n      }\n\n      // Result exponent may be one less then the current value of e.\n      // The coefficients of the BigNumbers from convertBase may have trailing zeros.\n      for (i = 0; yc[i] == (xc[i] || 0); i++);\n      if (yc[i] > (xc[i] || 0)) e--;\n      if (s < 0) {\n        qc.push(1);\n        more = true;\n      } else {\n        xL = xc.length;\n        yL = yc.length;\n        i = 0;\n        s += 2;\n\n        // Normalise xc and yc so highest order digit of yc is >= base / 2.\n\n        n = mathfloor(base / (yc[0] + 1));\n\n        // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\n        // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\n        if (n > 1) {\n          yc = multiply(yc, n, base);\n          xc = multiply(xc, n, base);\n          yL = yc.length;\n          xL = xc.length;\n        }\n        xi = yL;\n        rem = xc.slice(0, yL);\n        remL = rem.length;\n\n        // Add zeros to make remainder as long as divisor.\n        for (; remL < yL; rem[remL++] = 0);\n        yz = yc.slice();\n        yz = [0].concat(yz);\n        yc0 = yc[0];\n        if (yc[1] >= base / 2) yc0++;\n        // Not necessary, but to prevent trial digit n > base, when using base 3.\n        // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\n\n        do {\n          n = 0;\n\n          // Compare divisor and remainder.\n          cmp = compare(yc, rem, yL, remL);\n\n          // If divisor < remainder.\n          if (cmp < 0) {\n            // Calculate trial digit, n.\n\n            rem0 = rem[0];\n            if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\n\n            // n is how many times the divisor goes into the current remainder.\n            n = mathfloor(rem0 / yc0);\n\n            //  Algorithm:\n            //  product = divisor multiplied by trial digit (n).\n            //  Compare product and remainder.\n            //  If product is greater than remainder:\n            //    Subtract divisor from product, decrement trial digit.\n            //  Subtract product from remainder.\n            //  If product was less than remainder at the last compare:\n            //    Compare new remainder and divisor.\n            //    If remainder is greater than divisor:\n            //      Subtract divisor from remainder, increment trial digit.\n\n            if (n > 1) {\n              // n may be > base only when base is 3.\n              if (n >= base) n = base - 1;\n\n              // product = divisor * trial digit.\n              prod = multiply(yc, n, base);\n              prodL = prod.length;\n              remL = rem.length;\n\n              // Compare product and remainder.\n              // If product > remainder then trial digit n too high.\n              // n is 1 too high about 5% of the time, and is not known to have\n              // ever been more than 1 too high.\n              while (compare(prod, rem, prodL, remL) == 1) {\n                n--;\n\n                // Subtract divisor from product.\n                subtract(prod, yL < prodL ? yz : yc, prodL, base);\n                prodL = prod.length;\n                cmp = 1;\n              }\n            } else {\n              // n is 0 or 1, cmp is -1.\n              // If n is 0, there is no need to compare yc and rem again below,\n              // so change cmp to 1 to avoid it.\n              // If n is 1, leave cmp as -1, so yc and rem are compared again.\n              if (n == 0) {\n                // divisor < remainder, so n must be at least 1.\n                cmp = n = 1;\n              }\n\n              // product = divisor\n              prod = yc.slice();\n              prodL = prod.length;\n            }\n            if (prodL < remL) prod = [0].concat(prod);\n\n            // Subtract product from remainder.\n            subtract(rem, prod, remL, base);\n            remL = rem.length;\n\n            // If product was < remainder.\n            if (cmp == -1) {\n              // Compare divisor and new remainder.\n              // If divisor < new remainder, subtract divisor from remainder.\n              // Trial digit n too low.\n              // n is 1 too low about 5% of the time, and very rarely 2 too low.\n              while (compare(yc, rem, yL, remL) < 1) {\n                n++;\n\n                // Subtract divisor from remainder.\n                subtract(rem, yL < remL ? yz : yc, remL, base);\n                remL = rem.length;\n              }\n            }\n          } else if (cmp === 0) {\n            n++;\n            rem = [0];\n          } // else cmp === 1 and n will be 0\n\n          // Add the next digit, n, to the result array.\n          qc[i++] = n;\n\n          // Update the remainder.\n          if (rem[0]) {\n            rem[remL++] = xc[xi] || 0;\n          } else {\n            rem = [xc[xi]];\n            remL = 1;\n          }\n        } while ((xi++ < xL || rem[0] != null) && s--);\n        more = rem[0] != null;\n\n        // Leading zero?\n        if (!qc[0]) qc.splice(0, 1);\n      }\n      if (base == BASE) {\n        // To calculate q.e, first get the number of digits of qc[0].\n        for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\n        round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\n\n        // Caller is convertBase.\n      } else {\n        q.e = e;\n        q.r = +more;\n      }\n      return q;\n    };\n  }();\n\n  /*\r\n   * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n   * notation rounded to the specified decimal places or significant digits.\r\n   *\r\n   * n: a BigNumber.\r\n   * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n   * rm: the rounding mode.\r\n   * id: 1 (toExponential) or 2 (toPrecision).\r\n   */\n  function format(n, i, rm, id) {\n    var c0, e, ne, len, str;\n    if (rm == null) rm = ROUNDING_MODE;else intCheck(rm, 0, 8);\n    if (!n.c) return n.toString();\n    c0 = n.c[0];\n    ne = n.e;\n    if (i == null) {\n      str = coeffToString(n.c);\n      str = id == 1 || id == 2 && ne <= TO_EXP_NEG ? toExponential(str, ne) : toFixedPoint(str, ne, '0');\n    } else {\n      n = round(new BigNumber(n), i, rm);\n\n      // n.e may have changed if the value was rounded up.\n      e = n.e;\n      str = coeffToString(n.c);\n      len = str.length;\n\n      // toPrecision returns exponential notation if the number of significant digits\n      // specified is less than the number of digits necessary to represent the integer\n      // part of the value in fixed-point notation.\n\n      // Exponential notation.\n      if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\n        // Append zeros?\n        for (; len < i; str += '0', len++);\n        str = toExponential(str, e);\n\n        // Fixed-point notation.\n      } else {\n        i -= ne;\n        str = toFixedPoint(str, e, '0');\n\n        // Append zeros?\n        if (e + 1 > len) {\n          if (--i > 0) for (str += '.'; i--; str += '0');\n        } else {\n          i += e - len;\n          if (i > 0) {\n            if (e + 1 == len) str += '.';\n            for (; i--; str += '0');\n          }\n        }\n      }\n    }\n    return n.s < 0 && c0 ? '-' + str : str;\n  }\n\n  // Handle BigNumber.max and BigNumber.min.\n  function maxOrMin(args, method) {\n    var m,\n      n,\n      i = 0;\n    if (isArray(args[0])) args = args[0];\n    m = new BigNumber(args[0]);\n    for (; ++i < args.length;) {\n      n = new BigNumber(args[i]);\n\n      // If any number is NaN, return NaN.\n      if (!n.s) {\n        m = n;\n        break;\n      } else if (method.call(m, n)) {\n        m = n;\n      }\n    }\n    return m;\n  }\n\n  /*\r\n   * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n   * Called by minus, plus and times.\r\n   */\n  function normalise(n, c, e) {\n    var i = 1,\n      j = c.length;\n\n    // Remove trailing zeros.\n    for (; !c[--j]; c.pop());\n\n    // Calculate the base 10 exponent. First get the number of digits of c[0].\n    for (j = c[0]; j >= 10; j /= 10, i++);\n\n    // Overflow?\n    if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\n      // Infinity.\n      n.c = n.e = null;\n\n      // Underflow?\n    } else if (e < MIN_EXP) {\n      // Zero.\n      n.c = [n.e = 0];\n    } else {\n      n.e = e;\n      n.c = c;\n    }\n    return n;\n  }\n\n  // Handle values that fail the validity test in BigNumber.\n  parseNumeric = function () {\n    var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\n      dotAfter = /^([^.]+)\\.$/,\n      dotBefore = /^\\.([^.]+)$/,\n      isInfinityOrNaN = /^-?(Infinity|NaN)$/,\n      whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\n    return function (x, str, isNum, b) {\n      var base,\n        s = isNum ? str : str.replace(whitespaceOrPlus, '');\n\n      // No exception on ±Infinity or NaN.\n      if (isInfinityOrNaN.test(s)) {\n        x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\n        x.c = x.e = null;\n      } else {\n        if (!isNum) {\n          // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\n          s = s.replace(basePrefix, function (m, p1, p2) {\n            base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\n            return !b || b == base ? p1 : m;\n          });\n          if (b) {\n            base = b;\n\n            // E.g. '1.' to '1', '.1' to '0.1'\n            s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\n          }\n          if (str != s) return new BigNumber(s, base);\n        }\n\n        // '[BigNumber Error] Not a number: {n}'\n        // '[BigNumber Error] Not a base {b} number: {n}'\n        if (BigNumber.DEBUG) {\n          throw Error(bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\n        }\n\n        // NaN\n        x.c = x.e = x.s = null;\n      }\n    };\n  }();\n\n  /*\r\n   * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n   * If r is truthy, it is known that there are more digits after the rounding digit.\r\n   */\n  function round(x, sd, rm, r) {\n    var d,\n      i,\n      j,\n      k,\n      n,\n      ni,\n      rd,\n      xc = x.c,\n      pows10 = POWS_TEN;\n\n    // if x is not Infinity or NaN...\n    if (xc) {\n      // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\n      // n is a base 1e14 number, the value of the element of array x.c containing rd.\n      // ni is the index of n within x.c.\n      // d is the number of digits of n.\n      // i is the index of rd within n including leading zeros.\n      // j is the actual index of rd within n (if < 0, rd is a leading zero).\n      out: {\n        // Get the number of digits of the first element of xc.\n        for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\n        i = sd - d;\n\n        // If the rounding digit is in the first element of xc...\n        if (i < 0) {\n          i += LOG_BASE;\n          j = sd;\n          n = xc[ni = 0];\n\n          // Get the rounding digit at index j of n.\n          rd = n / pows10[d - j - 1] % 10 | 0;\n        } else {\n          ni = mathceil((i + 1) / LOG_BASE);\n          if (ni >= xc.length) {\n            if (r) {\n              // Needed by sqrt.\n              for (; xc.length <= ni; xc.push(0));\n              n = rd = 0;\n              d = 1;\n              i %= LOG_BASE;\n              j = i - LOG_BASE + 1;\n            } else {\n              break out;\n            }\n          } else {\n            n = k = xc[ni];\n\n            // Get the number of digits of n.\n            for (d = 1; k >= 10; k /= 10, d++);\n\n            // Get the index of rd within n.\n            i %= LOG_BASE;\n\n            // Get the index of rd within n, adjusted for leading zeros.\n            // The number of leading zeros of n is given by LOG_BASE - d.\n            j = i - LOG_BASE + d;\n\n            // Get the rounding digit at index j of n.\n            rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\n          }\n        }\n        r = r || sd < 0 ||\n        // Are there any non-zero digits after the rounding digit?\n        // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\n        // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\n        xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\n        r = rm < 4 ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\n        // Check whether the digit to the left of the rounding digit is odd.\n        (i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10 & 1 || rm == (x.s < 0 ? 8 : 7));\n        if (sd < 1 || !xc[0]) {\n          xc.length = 0;\n          if (r) {\n            // Convert sd to decimal places.\n            sd -= x.e + 1;\n\n            // 1, 0.1, 0.01, 0.001, 0.0001 etc.\n            xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\n            x.e = -sd || 0;\n          } else {\n            // Zero.\n            xc[0] = x.e = 0;\n          }\n          return x;\n        }\n\n        // Remove excess digits.\n        if (i == 0) {\n          xc.length = ni;\n          k = 1;\n          ni--;\n        } else {\n          xc.length = ni + 1;\n          k = pows10[LOG_BASE - i];\n\n          // E.g. 56700 becomes 56000 if 7 is the rounding digit.\n          // j > 0 means i > number of leading zeros of n.\n          xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\n        }\n\n        // Round up?\n        if (r) {\n          for (;;) {\n            // If the digit to be rounded up is in the first element of xc...\n            if (ni == 0) {\n              // i will be the length of xc[0] before k is added.\n              for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\n              j = xc[0] += k;\n              for (k = 1; j >= 10; j /= 10, k++);\n\n              // if i != k the length has increased.\n              if (i != k) {\n                x.e++;\n                if (xc[0] == BASE) xc[0] = 1;\n              }\n              break;\n            } else {\n              xc[ni] += k;\n              if (xc[ni] != BASE) break;\n              xc[ni--] = 0;\n              k = 1;\n            }\n          }\n        }\n\n        // Remove trailing zeros.\n        for (i = xc.length; xc[--i] === 0; xc.pop());\n      }\n\n      // Overflow? Infinity.\n      if (x.e > MAX_EXP) {\n        x.c = x.e = null;\n\n        // Underflow? Zero.\n      } else if (x.e < MIN_EXP) {\n        x.c = [x.e = 0];\n      }\n    }\n    return x;\n  }\n\n  // PROTOTYPE/INSTANCE METHODS\n\n  /*\r\n   * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n   */\n  P.absoluteValue = P.abs = function () {\n    var x = new BigNumber(this);\n    if (x.s < 0) x.s = 1;\n    return x;\n  };\n\n  /*\r\n   * Return\r\n   *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n   *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n   *   0 if they have the same value,\r\n   *   or null if the value of either is NaN.\r\n   */\n  P.comparedTo = function (y, b) {\n    return compare(this, new BigNumber(y, b));\n  };\n\n  /*\r\n   * If dp is undefined or null or true or false, return the number of decimal places of the\r\n   * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n   *\r\n   * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n   * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n   * ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */\n  P.decimalPlaces = P.dp = function (dp, rm) {\n    var c,\n      n,\n      v,\n      x = this;\n    if (dp != null) {\n      intCheck(dp, 0, MAX);\n      if (rm == null) rm = ROUNDING_MODE;else intCheck(rm, 0, 8);\n      return round(new BigNumber(x), dp + x.e + 1, rm);\n    }\n    if (!(c = x.c)) return null;\n    n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\n\n    // Subtract the number of trailing zeros of the last number.\n    if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\n    if (n < 0) n = 0;\n    return n;\n  };\n\n  /*\r\n   *  n / 0 = I\r\n   *  n / N = N\r\n   *  n / I = 0\r\n   *  0 / n = 0\r\n   *  0 / 0 = N\r\n   *  0 / N = N\r\n   *  0 / I = 0\r\n   *  N / n = N\r\n   *  N / 0 = N\r\n   *  N / N = N\r\n   *  N / I = N\r\n   *  I / n = I\r\n   *  I / 0 = I\r\n   *  I / N = N\r\n   *  I / I = N\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n   * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n   */\n  P.dividedBy = P.div = function (y, b) {\n    return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\n  };\n\n  /*\r\n   * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n   * BigNumber by the value of BigNumber(y, b).\r\n   */\n  P.dividedToIntegerBy = P.idiv = function (y, b) {\n    return div(this, new BigNumber(y, b), 0, 1);\n  };\n\n  /*\r\n   * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n   *\r\n   * If m is present, return the result modulo m.\r\n   * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n   * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n   *\r\n   * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n   * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n   *\r\n   * n {number|string|BigNumber} The exponent. An integer.\r\n   * [m] {number|string|BigNumber} The modulus.\r\n   *\r\n   * '[BigNumber Error] Exponent not an integer: {n}'\r\n   */\n  P.exponentiatedBy = P.pow = function (n, m) {\n    var half,\n      isModExp,\n      k,\n      more,\n      nIsBig,\n      nIsNeg,\n      nIsOdd,\n      y,\n      x = this;\n    n = new BigNumber(n);\n\n    // Allow NaN and ±Infinity, but not other non-integers.\n    if (n.c && !n.isInteger()) {\n      throw Error(bignumberError + 'Exponent not an integer: ' + n);\n    }\n    if (m != null) m = new BigNumber(m);\n\n    // Exponent of MAX_SAFE_INTEGER is 15.\n    nIsBig = n.e > 14;\n\n    // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\n    if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\n      // The sign of the result of pow when x is negative depends on the evenness of n.\n      // If +n overflows to ±Infinity, the evenness of n would be not be known.\n      y = new BigNumber(Math.pow(+x.valueOf(), nIsBig ? 2 - isOdd(n) : +n));\n      return m ? y.mod(m) : y;\n    }\n    nIsNeg = n.s < 0;\n    if (m) {\n      // x % m returns NaN if abs(m) is zero, or m is NaN.\n      if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\n      isModExp = !nIsNeg && x.isInteger() && m.isInteger();\n      if (isModExp) x = x.mod(m);\n\n      // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\n      // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\n    } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\n    // [1, 240000000]\n    ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\n    // [80000000000000]  [99999750000000]\n    : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\n      // If x is negative and n is odd, k = -0, else k = 0.\n      k = x.s < 0 && isOdd(n) ? -0 : 0;\n\n      // If x >= 1, k = ±Infinity.\n      if (x.e > -1) k = 1 / k;\n\n      // If n is negative return ±0, else return ±Infinity.\n      return new BigNumber(nIsNeg ? 1 / k : k);\n    } else if (POW_PRECISION) {\n      // Truncating each coefficient array to a length of k after each multiplication\n      // equates to truncating significant digits to POW_PRECISION + [28, 41],\n      // i.e. there will be a minimum of 28 guard digits retained.\n      k = mathceil(POW_PRECISION / LOG_BASE + 2);\n    }\n    if (nIsBig) {\n      half = new BigNumber(0.5);\n      nIsOdd = isOdd(n);\n    } else {\n      nIsOdd = n % 2;\n    }\n    if (nIsNeg) n.s = 1;\n    y = new BigNumber(ONE);\n\n    // Performs 54 loop iterations for n of 9007199254740991.\n    for (;;) {\n      if (nIsOdd) {\n        y = y.times(x);\n        if (!y.c) break;\n        if (k) {\n          if (y.c.length > k) y.c.length = k;\n        } else if (isModExp) {\n          y = y.mod(m); //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\n        }\n      }\n\n      if (nIsBig) {\n        n = n.times(half);\n        round(n, n.e + 1, 1);\n        if (!n.c[0]) break;\n        nIsBig = n.e > 14;\n        nIsOdd = isOdd(n);\n      } else {\n        n = mathfloor(n / 2);\n        if (!n) break;\n        nIsOdd = n % 2;\n      }\n      x = x.times(x);\n      if (k) {\n        if (x.c && x.c.length > k) x.c.length = k;\n      } else if (isModExp) {\n        x = x.mod(m); //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\n      }\n    }\n\n    if (isModExp) return y;\n    if (nIsNeg) y = ONE.div(y);\n    return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\n  };\n\n  /*\r\n   * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n   * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n   */\n  P.integerValue = function (rm) {\n    var n = new BigNumber(this);\n    if (rm == null) rm = ROUNDING_MODE;else intCheck(rm, 0, 8);\n    return round(n, n.e + 1, rm);\n  };\n\n  /*\r\n   * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n   * otherwise return false.\r\n   */\n  P.isEqualTo = P.eq = function (y, b) {\n    return compare(this, new BigNumber(y, b)) === 0;\n  };\n\n  /*\r\n   * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n   */\n  P.isFinite = function () {\n    return !!this.c;\n  };\n\n  /*\r\n   * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n   * otherwise return false.\r\n   */\n  P.isGreaterThan = P.gt = function (y, b) {\n    return compare(this, new BigNumber(y, b)) > 0;\n  };\n\n  /*\r\n   * Return true if the value of this BigNumber is greater than or equal to the value of\r\n   * BigNumber(y, b), otherwise return false.\r\n   */\n  P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\n    return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\n  };\n\n  /*\r\n   * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n   */\n  P.isInteger = function () {\n    return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\n  };\n\n  /*\r\n   * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n   * otherwise return false.\r\n   */\n  P.isLessThan = P.lt = function (y, b) {\n    return compare(this, new BigNumber(y, b)) < 0;\n  };\n\n  /*\r\n   * Return true if the value of this BigNumber is less than or equal to the value of\r\n   * BigNumber(y, b), otherwise return false.\r\n   */\n  P.isLessThanOrEqualTo = P.lte = function (y, b) {\n    return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\n  };\n\n  /*\r\n   * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n   */\n  P.isNaN = function () {\n    return !this.s;\n  };\n\n  /*\r\n   * Return true if the value of this BigNumber is negative, otherwise return false.\r\n   */\n  P.isNegative = function () {\n    return this.s < 0;\n  };\n\n  /*\r\n   * Return true if the value of this BigNumber is positive, otherwise return false.\r\n   */\n  P.isPositive = function () {\n    return this.s > 0;\n  };\n\n  /*\r\n   * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n   */\n  P.isZero = function () {\n    return !!this.c && this.c[0] == 0;\n  };\n\n  /*\r\n   *  n - 0 = n\r\n   *  n - N = N\r\n   *  n - I = -I\r\n   *  0 - n = -n\r\n   *  0 - 0 = 0\r\n   *  0 - N = N\r\n   *  0 - I = -I\r\n   *  N - n = N\r\n   *  N - 0 = N\r\n   *  N - N = N\r\n   *  N - I = N\r\n   *  I - n = I\r\n   *  I - 0 = I\r\n   *  I - N = N\r\n   *  I - I = N\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n   * BigNumber(y, b).\r\n   */\n  P.minus = function (y, b) {\n    var i,\n      j,\n      t,\n      xLTy,\n      x = this,\n      a = x.s;\n    y = new BigNumber(y, b);\n    b = y.s;\n\n    // Either NaN?\n    if (!a || !b) return new BigNumber(NaN);\n\n    // Signs differ?\n    if (a != b) {\n      y.s = -b;\n      return x.plus(y);\n    }\n    var xe = x.e / LOG_BASE,\n      ye = y.e / LOG_BASE,\n      xc = x.c,\n      yc = y.c;\n    if (!xe || !ye) {\n      // Either Infinity?\n      if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\n\n      // Either zero?\n      if (!xc[0] || !yc[0]) {\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\n        return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\n        // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\n        ROUNDING_MODE == 3 ? -0 : 0);\n      }\n    }\n    xe = bitFloor(xe);\n    ye = bitFloor(ye);\n    xc = xc.slice();\n\n    // Determine which is the bigger number.\n    if (a = xe - ye) {\n      if (xLTy = a < 0) {\n        a = -a;\n        t = xc;\n      } else {\n        ye = xe;\n        t = yc;\n      }\n      t.reverse();\n\n      // Prepend zeros to equalise exponents.\n      for (b = a; b--; t.push(0));\n      t.reverse();\n    } else {\n      // Exponents equal. Check digit by digit.\n      j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\n      for (a = b = 0; b < j; b++) {\n        if (xc[b] != yc[b]) {\n          xLTy = xc[b] < yc[b];\n          break;\n        }\n      }\n    }\n\n    // x < y? Point xc to the array of the bigger number.\n    if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\n    b = (j = yc.length) - (i = xc.length);\n\n    // Append zeros to xc if shorter.\n    // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\n    if (b > 0) for (; b--; xc[i++] = 0);\n    b = BASE - 1;\n\n    // Subtract yc from xc.\n    for (; j > a;) {\n      if (xc[--j] < yc[j]) {\n        for (i = j; i && !xc[--i]; xc[i] = b);\n        --xc[i];\n        xc[j] += BASE;\n      }\n      xc[j] -= yc[j];\n    }\n\n    // Remove leading zeros and adjust exponent accordingly.\n    for (; xc[0] == 0; xc.splice(0, 1), --ye);\n\n    // Zero?\n    if (!xc[0]) {\n      // Following IEEE 754 (2008) 6.3,\n      // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\n      y.s = ROUNDING_MODE == 3 ? -1 : 1;\n      y.c = [y.e = 0];\n      return y;\n    }\n\n    // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\n    // for finite x and y.\n    return normalise(y, xc, ye);\n  };\n\n  /*\r\n   *   n % 0 =  N\r\n   *   n % N =  N\r\n   *   n % I =  n\r\n   *   0 % n =  0\r\n   *  -0 % n = -0\r\n   *   0 % 0 =  N\r\n   *   0 % N =  N\r\n   *   0 % I =  0\r\n   *   N % n =  N\r\n   *   N % 0 =  N\r\n   *   N % N =  N\r\n   *   N % I =  N\r\n   *   I % n =  N\r\n   *   I % 0 =  N\r\n   *   I % N =  N\r\n   *   I % I =  N\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n   * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n   */\n  P.modulo = P.mod = function (y, b) {\n    var q,\n      s,\n      x = this;\n    y = new BigNumber(y, b);\n\n    // Return NaN if x is Infinity or NaN, or y is NaN or zero.\n    if (!x.c || !y.s || y.c && !y.c[0]) {\n      return new BigNumber(NaN);\n\n      // Return x if y is Infinity or x is zero.\n    } else if (!y.c || x.c && !x.c[0]) {\n      return new BigNumber(x);\n    }\n    if (MODULO_MODE == 9) {\n      // Euclidian division: q = sign(y) * floor(x / abs(y))\n      // r = x - qy    where  0 <= r < abs(y)\n      s = y.s;\n      y.s = 1;\n      q = div(x, y, 0, 3);\n      y.s = s;\n      q.s *= s;\n    } else {\n      q = div(x, y, 0, MODULO_MODE);\n    }\n    y = x.minus(q.times(y));\n\n    // To match JavaScript %, ensure sign of zero is sign of dividend.\n    if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\n    return y;\n  };\n\n  /*\r\n   *  n * 0 = 0\r\n   *  n * N = N\r\n   *  n * I = I\r\n   *  0 * n = 0\r\n   *  0 * 0 = 0\r\n   *  0 * N = N\r\n   *  0 * I = N\r\n   *  N * n = N\r\n   *  N * 0 = N\r\n   *  N * N = N\r\n   *  N * I = N\r\n   *  I * n = I\r\n   *  I * 0 = N\r\n   *  I * N = N\r\n   *  I * I = I\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n   * of BigNumber(y, b).\r\n   */\n  P.multipliedBy = P.times = function (y, b) {\n    var c,\n      e,\n      i,\n      j,\n      k,\n      m,\n      xcL,\n      xlo,\n      xhi,\n      ycL,\n      ylo,\n      yhi,\n      zc,\n      base,\n      sqrtBase,\n      x = this,\n      xc = x.c,\n      yc = (y = new BigNumber(y, b)).c;\n\n    // Either NaN, ±Infinity or ±0?\n    if (!xc || !yc || !xc[0] || !yc[0]) {\n      // Return NaN if either is NaN, or one is 0 and the other is Infinity.\n      if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\n        y.c = y.e = y.s = null;\n      } else {\n        y.s *= x.s;\n\n        // Return ±Infinity if either is ±Infinity.\n        if (!xc || !yc) {\n          y.c = y.e = null;\n\n          // Return ±0 if either is ±0.\n        } else {\n          y.c = [0];\n          y.e = 0;\n        }\n      }\n      return y;\n    }\n    e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\n    y.s *= x.s;\n    xcL = xc.length;\n    ycL = yc.length;\n\n    // Ensure xc points to longer array and xcL to its length.\n    if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\n\n    // Initialise the result array with zeros.\n    for (i = xcL + ycL, zc = []; i--; zc.push(0));\n    base = BASE;\n    sqrtBase = SQRT_BASE;\n    for (i = ycL; --i >= 0;) {\n      c = 0;\n      ylo = yc[i] % sqrtBase;\n      yhi = yc[i] / sqrtBase | 0;\n      for (k = xcL, j = i + k; j > i;) {\n        xlo = xc[--k] % sqrtBase;\n        xhi = xc[k] / sqrtBase | 0;\n        m = yhi * xlo + xhi * ylo;\n        xlo = ylo * xlo + m % sqrtBase * sqrtBase + zc[j] + c;\n        c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\n        zc[j--] = xlo % base;\n      }\n      zc[j] = c;\n    }\n    if (c) {\n      ++e;\n    } else {\n      zc.splice(0, 1);\n    }\n    return normalise(y, zc, e);\n  };\n\n  /*\r\n   * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n   * i.e. multiplied by -1.\r\n   */\n  P.negated = function () {\n    var x = new BigNumber(this);\n    x.s = -x.s || null;\n    return x;\n  };\n\n  /*\r\n   *  n + 0 = n\r\n   *  n + N = N\r\n   *  n + I = I\r\n   *  0 + n = n\r\n   *  0 + 0 = 0\r\n   *  0 + N = N\r\n   *  0 + I = I\r\n   *  N + n = N\r\n   *  N + 0 = N\r\n   *  N + N = N\r\n   *  N + I = N\r\n   *  I + n = I\r\n   *  I + 0 = I\r\n   *  I + N = N\r\n   *  I + I = I\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n   * BigNumber(y, b).\r\n   */\n  P.plus = function (y, b) {\n    var t,\n      x = this,\n      a = x.s;\n    y = new BigNumber(y, b);\n    b = y.s;\n\n    // Either NaN?\n    if (!a || !b) return new BigNumber(NaN);\n\n    // Signs differ?\n    if (a != b) {\n      y.s = -b;\n      return x.minus(y);\n    }\n    var xe = x.e / LOG_BASE,\n      ye = y.e / LOG_BASE,\n      xc = x.c,\n      yc = y.c;\n    if (!xe || !ye) {\n      // Return ±Infinity if either ±Infinity.\n      if (!xc || !yc) return new BigNumber(a / 0);\n\n      // Either zero?\n      // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\n      if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\n    }\n    xe = bitFloor(xe);\n    ye = bitFloor(ye);\n    xc = xc.slice();\n\n    // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\n    if (a = xe - ye) {\n      if (a > 0) {\n        ye = xe;\n        t = yc;\n      } else {\n        a = -a;\n        t = xc;\n      }\n      t.reverse();\n      for (; a--; t.push(0));\n      t.reverse();\n    }\n    a = xc.length;\n    b = yc.length;\n\n    // Point xc to the longer array, and b to the shorter length.\n    if (a - b < 0) t = yc, yc = xc, xc = t, b = a;\n\n    // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\n    for (a = 0; b;) {\n      a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\n      xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\n    }\n    if (a) {\n      xc = [a].concat(xc);\n      ++ye;\n    }\n\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\n    // ye = MAX_EXP + 1 possible\n    return normalise(y, xc, ye);\n  };\n\n  /*\r\n   * If sd is undefined or null or true or false, return the number of significant digits of\r\n   * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n   * If sd is true include integer-part trailing zeros in the count.\r\n   *\r\n   * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n   * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n   * ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n   *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n   */\n  P.precision = P.sd = function (sd, rm) {\n    var c,\n      n,\n      v,\n      x = this;\n    if (sd != null && sd !== !!sd) {\n      intCheck(sd, 1, MAX);\n      if (rm == null) rm = ROUNDING_MODE;else intCheck(rm, 0, 8);\n      return round(new BigNumber(x), sd, rm);\n    }\n    if (!(c = x.c)) return null;\n    v = c.length - 1;\n    n = v * LOG_BASE + 1;\n    if (v = c[v]) {\n      // Subtract the number of trailing zeros of the last element.\n      for (; v % 10 == 0; v /= 10, n--);\n\n      // Add the number of digits of the first element.\n      for (v = c[0]; v >= 10; v /= 10, n++);\n    }\n    if (sd && x.e + 1 > n) n = x.e + 1;\n    return n;\n  };\n\n  /*\r\n   * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n   * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n   *\r\n   * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n   */\n  P.shiftedBy = function (k) {\n    intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\n    return this.times('1e' + k);\n  };\n\n  /*\r\n   *  sqrt(-n) =  N\r\n   *  sqrt(N) =  N\r\n   *  sqrt(-I) =  N\r\n   *  sqrt(I) =  I\r\n   *  sqrt(0) =  0\r\n   *  sqrt(-0) = -0\r\n   *\r\n   * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n   * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n   */\n  P.squareRoot = P.sqrt = function () {\n    var m,\n      n,\n      r,\n      rep,\n      t,\n      x = this,\n      c = x.c,\n      s = x.s,\n      e = x.e,\n      dp = DECIMAL_PLACES + 4,\n      half = new BigNumber('0.5');\n\n    // Negative/NaN/Infinity/zero?\n    if (s !== 1 || !c || !c[0]) {\n      return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\n    }\n\n    // Initial estimate.\n    s = Math.sqrt(+x);\n\n    // Math.sqrt underflow/overflow?\n    // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\n    if (s == 0 || s == 1 / 0) {\n      n = coeffToString(c);\n      if ((n.length + e) % 2 == 0) n += '0';\n      s = Math.sqrt(n);\n      e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\n      if (s == 1 / 0) {\n        n = '1e' + e;\n      } else {\n        n = s.toExponential();\n        n = n.slice(0, n.indexOf('e') + 1) + e;\n      }\n      r = new BigNumber(n);\n    } else {\n      r = new BigNumber(s + '');\n    }\n\n    // Check for zero.\n    // r could be zero if MIN_EXP is changed after the this value was created.\n    // This would cause a division by zero (x/t) and hence Infinity below, which would cause\n    // coeffToString to throw.\n    if (r.c[0]) {\n      e = r.e;\n      s = e + dp;\n      if (s < 3) s = 0;\n\n      // Newton-Raphson iteration.\n      for (;;) {\n        t = r;\n        r = half.times(t.plus(div(x, t, dp, 1)));\n        if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\n          // The exponent of r may here be one less than the final result exponent,\n          // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\n          // are indexed correctly.\n          if (r.e < e) --s;\n          n = n.slice(s - 3, s + 1);\n\n          // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\n          // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\n          // iteration.\n          if (n == '9999' || !rep && n == '4999') {\n            // On the first iteration only, check to see if rounding up gives the\n            // exact result as the nines may infinitely repeat.\n            if (!rep) {\n              round(t, t.e + DECIMAL_PLACES + 2, 0);\n              if (t.times(t).eq(x)) {\n                r = t;\n                break;\n              }\n            }\n            dp += 4;\n            s += 4;\n            rep = 1;\n          } else {\n            // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\n            // result. If not, then there are further digits and m will be truthy.\n            if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\n              // Truncate to the first rounding digit.\n              round(r, r.e + DECIMAL_PLACES + 2, 1);\n              m = !r.times(r).eq(x);\n            }\n            break;\n          }\n        }\n      }\n    }\n    return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\n  };\n\n  /*\r\n   * Return a string representing the value of this BigNumber in exponential notation and\r\n   * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */\n  P.toExponential = function (dp, rm) {\n    if (dp != null) {\n      intCheck(dp, 0, MAX);\n      dp++;\n    }\n    return format(this, dp, rm, 1);\n  };\n\n  /*\r\n   * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n   * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n   * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */\n  P.toFixed = function (dp, rm) {\n    if (dp != null) {\n      intCheck(dp, 0, MAX);\n      dp = dp + this.e + 1;\n    }\n    return format(this, dp, rm);\n  };\n\n  /*\r\n   * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n   * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n   * of the FORMAT object (see BigNumber.set).\r\n   *\r\n   * FORMAT = {\r\n   *      decimalSeparator : '.',\r\n   *      groupSeparator : ',',\r\n   *      groupSize : 3,\r\n   *      secondaryGroupSize : 0,\r\n   *      fractionGroupSeparator : '\\xA0',    // non-breaking space\r\n   *      fractionGroupSize : 0\r\n   * };\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */\n  P.toFormat = function (dp, rm) {\n    var str = this.toFixed(dp, rm);\n    if (this.c) {\n      var i,\n        arr = str.split('.'),\n        g1 = +FORMAT.groupSize,\n        g2 = +FORMAT.secondaryGroupSize,\n        groupSeparator = FORMAT.groupSeparator,\n        intPart = arr[0],\n        fractionPart = arr[1],\n        isNeg = this.s < 0,\n        intDigits = isNeg ? intPart.slice(1) : intPart,\n        len = intDigits.length;\n      if (g2) i = g1, g1 = g2, g2 = i, len -= i;\n      if (g1 > 0 && len > 0) {\n        i = len % g1 || g1;\n        intPart = intDigits.substr(0, i);\n        for (; i < len; i += g1) {\n          intPart += groupSeparator + intDigits.substr(i, g1);\n        }\n        if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\n        if (isNeg) intPart = '-' + intPart;\n      }\n      str = fractionPart ? intPart + FORMAT.decimalSeparator + ((g2 = +FORMAT.fractionGroupSize) ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'), '$&' + FORMAT.fractionGroupSeparator) : fractionPart) : intPart;\n    }\n    return str;\n  };\n\n  /*\r\n   * Return a string array representing the value of this BigNumber as a simple fraction with\r\n   * an integer numerator and an integer denominator. The denominator will be a positive\r\n   * non-zero value less than or equal to the specified maximum denominator. If a maximum\r\n   * denominator is not specified, the denominator will be the lowest value necessary to\r\n   * represent the number exactly.\r\n   *\r\n   * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n   *\r\n   * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n   */\n  P.toFraction = function (md) {\n    var arr,\n      d,\n      d0,\n      d1,\n      d2,\n      e,\n      exp,\n      n,\n      n0,\n      n1,\n      q,\n      s,\n      x = this,\n      xc = x.c;\n    if (md != null) {\n      n = new BigNumber(md);\n\n      // Throw if md is less than one or is not an integer, unless it is Infinity.\n      if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\n        throw Error(bignumberError + 'Argument ' + (n.isInteger() ? 'out of range: ' : 'not an integer: ') + md);\n      }\n    }\n    if (!xc) return x.toString();\n    d = new BigNumber(ONE);\n    n1 = d0 = new BigNumber(ONE);\n    d1 = n0 = new BigNumber(ONE);\n    s = coeffToString(xc);\n\n    // Determine initial denominator.\n    // d is a power of 10 and the minimum max denominator that specifies the value exactly.\n    e = d.e = s.length - x.e - 1;\n    d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\n    md = !md || n.comparedTo(d) > 0 ? e > 0 ? d : n1 : n;\n    exp = MAX_EXP;\n    MAX_EXP = 1 / 0;\n    n = new BigNumber(s);\n\n    // n0 = d1 = 0\n    n0.c[0] = 0;\n    for (;;) {\n      q = div(n, d, 0, 1);\n      d2 = d0.plus(q.times(d1));\n      if (d2.comparedTo(md) == 1) break;\n      d0 = d1;\n      d1 = d2;\n      n1 = n0.plus(q.times(d2 = n1));\n      n0 = d2;\n      d = n.minus(q.times(d2 = d));\n      n = d2;\n    }\n    d2 = div(md.minus(d0), d1, 0, 1);\n    n0 = n0.plus(d2.times(n1));\n    d0 = d0.plus(d2.times(d1));\n    n0.s = n1.s = x.s;\n    e *= 2;\n\n    // Determine which fraction is closer to x, n0/d0 or n1/d1\n    arr = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1.toString(), d1.toString()] : [n0.toString(), d0.toString()];\n    MAX_EXP = exp;\n    return arr;\n  };\n\n  /*\r\n   * Return the value of this BigNumber converted to a number primitive.\r\n   */\n  P.toNumber = function () {\n    return +this;\n  };\n\n  /*\r\n   * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n   * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n   * necessary to represent the integer part of the value in fixed-point notation, then use\r\n   * exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n   */\n  P.toPrecision = function (sd, rm) {\n    if (sd != null) intCheck(sd, 1, MAX);\n    return format(this, sd, rm, 2);\n  };\n\n  /*\r\n   * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n   * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n   * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n   * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n   * TO_EXP_NEG, return exponential notation.\r\n   *\r\n   * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n   *\r\n   * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n   */\n  P.toString = function (b) {\n    var str,\n      n = this,\n      s = n.s,\n      e = n.e;\n\n    // Infinity or NaN?\n    if (e === null) {\n      if (s) {\n        str = 'Infinity';\n        if (s < 0) str = '-' + str;\n      } else {\n        str = 'NaN';\n      }\n    } else {\n      str = coeffToString(n.c);\n      if (b == null) {\n        str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(str, e) : toFixedPoint(str, e, '0');\n      } else {\n        intCheck(b, 2, ALPHABET.length, 'Base');\n        str = convertBase(toFixedPoint(str, e, '0'), 10, b, s, true);\n      }\n      if (s < 0 && n.c[0]) str = '-' + str;\n    }\n    return str;\n  };\n\n  /*\r\n   * Return as toString, but do not accept a base argument, and include the minus sign for\r\n   * negative zero.\r\n   */\n  P.valueOf = P.toJSON = function () {\n    var str,\n      n = this,\n      e = n.e;\n    if (e === null) return n.toString();\n    str = coeffToString(n.c);\n    str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(str, e) : toFixedPoint(str, e, '0');\n    return n.s < 0 ? '-' + str : str;\n  };\n  P._isBigNumber = true;\n  if (configObject != null) BigNumber.set(configObject);\n  return BigNumber;\n}\n\n// PRIVATE HELPER FUNCTIONS\n\nfunction bitFloor(n) {\n  var i = n | 0;\n  return n > 0 || n === i ? i : i - 1;\n}\n\n// Return a coefficient array as a string of base 10 digits.\nfunction coeffToString(a) {\n  var s,\n    z,\n    i = 1,\n    j = a.length,\n    r = a[0] + '';\n  for (; i < j;) {\n    s = a[i++] + '';\n    z = LOG_BASE - s.length;\n    for (; z--; s = '0' + s);\n    r += s;\n  }\n\n  // Determine trailing zeros.\n  for (j = r.length; r.charCodeAt(--j) === 48;);\n  return r.slice(0, j + 1 || 1);\n}\n\n// Compare the value of BigNumbers x and y.\nfunction compare(x, y) {\n  var a,\n    b,\n    xc = x.c,\n    yc = y.c,\n    i = x.s,\n    j = y.s,\n    k = x.e,\n    l = y.e;\n\n  // Either NaN?\n  if (!i || !j) return null;\n  a = xc && !xc[0];\n  b = yc && !yc[0];\n\n  // Either zero?\n  if (a || b) return a ? b ? 0 : -j : i;\n\n  // Signs differ?\n  if (i != j) return i;\n  a = i < 0;\n  b = k == l;\n\n  // Either Infinity?\n  if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\n\n  // Compare exponents.\n  if (!b) return k > l ^ a ? 1 : -1;\n  j = (k = xc.length) < (l = yc.length) ? k : l;\n\n  // Compare digit by digit.\n  for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\n\n  // Compare lengths.\n  return k == l ? 0 : k > l ^ a ? 1 : -1;\n}\n\n/*\r\n * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n */\nfunction intCheck(n, min, max, name) {\n  if (n < min || n > max || n !== (n < 0 ? mathceil(n) : mathfloor(n))) {\n    throw Error(bignumberError + (name || 'Argument') + (typeof n == 'number' ? n < min || n > max ? ' out of range: ' : ' not an integer: ' : ' not a primitive number: ') + n);\n  }\n}\nfunction isArray(obj) {\n  return Object.prototype.toString.call(obj) == '[object Array]';\n}\n\n// Assumes finite n.\nfunction isOdd(n) {\n  var k = n.c.length - 1;\n  return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\n}\nfunction toExponential(str, e) {\n  return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) + (e < 0 ? 'e' : 'e+') + e;\n}\nfunction toFixedPoint(str, e, z) {\n  var len, zs;\n\n  // Negative exponent?\n  if (e < 0) {\n    // Prepend zeros.\n    for (zs = z + '.'; ++e; zs += z);\n    str = zs + str;\n\n    // Positive exponent\n  } else {\n    len = str.length;\n\n    // Append zeros.\n    if (++e > len) {\n      for (zs = z, e -= len; --e; zs += z);\n      str += zs;\n    } else if (e < len) {\n      str = str.slice(0, e) + '.' + str.slice(e);\n    }\n  }\n  return str;\n}\n\n// EXPORTS\n\nexport var BigNumber = clone();\nexport default BigNumber;","map":{"version":3,"names":["isNumeric","mathceil","Math","ceil","mathfloor","floor","bignumberError","tooManyDigits","BASE","LOG_BASE","MAX_SAFE_INTEGER","POWS_TEN","SQRT_BASE","MAX","clone","configObject","div","convertBase","parseNumeric","P","BigNumber","prototype","constructor","toString","valueOf","ONE","DECIMAL_PLACES","ROUNDING_MODE","TO_EXP_NEG","TO_EXP_POS","MIN_EXP","MAX_EXP","CRYPTO","MODULO_MODE","POW_PRECISION","FORMAT","decimalSeparator","groupSeparator","groupSize","secondaryGroupSize","fractionGroupSeparator","fractionGroupSize","ALPHABET","n","b","alphabet","c","caseChanged","e","i","isNum","len","str","x","s","slice","test","charCodeAt","indexOf","replace","search","substring","length","intCheck","round","DEBUG","Error","charAt","toUpperCase","toLowerCase","push","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","config","set","obj","p","v","hasOwnProperty","isArray","crypto","getRandomValues","randomBytes","EXPONENTIAL_AT","RANGE","isBigNumber","_isBigNumber","maximum","max","maxOrMin","arguments","lt","minimum","min","gt","random","pow2_53","random53bitInt","dp","a","k","rand","Uint32Array","copy","pop","splice","decimal","toBaseOut","baseIn","baseOut","j","arr","arrL","reverse","sign","callerIsToString","d","r","xc","y","rm","pow","toFixedPoint","coeffToString","concat","multiply","base","m","temp","xlo","xhi","carry","klo","khi","compare","aL","bL","cmp","subtract","more","prod","prodL","q","qc","rem","remL","rem0","xi","xL","yc0","yL","yz","yc","NaN","bitFloor","format","id","c0","ne","toExponential","args","method","call","normalise","basePrefix","dotAfter","dotBefore","isInfinityOrNaN","whitespaceOrPlus","isNaN","p1","p2","sd","ni","rd","pows10","out","absoluteValue","abs","comparedTo","decimalPlaces","dividedBy","dividedToIntegerBy","idiv","exponentiatedBy","half","isModExp","nIsBig","nIsNeg","nIsOdd","isInteger","isOdd","mod","times","integerValue","isEqualTo","eq","isFinite","isGreaterThan","isGreaterThanOrEqualTo","gte","isLessThan","isLessThanOrEqualTo","lte","isNegative","isPositive","isZero","minus","t","xLTy","plus","xe","ye","modulo","multipliedBy","xcL","ycL","ylo","yhi","zc","sqrtBase","negated","precision","shiftedBy","squareRoot","sqrt","rep","toFixed","toFormat","split","g1","g2","intPart","fractionPart","isNeg","intDigits","substr","RegExp","toFraction","md","d0","d1","d2","exp","n0","n1","toNumber","toPrecision","toJSON","z","l","name","Object","zs"],"sources":["/home/peilunnn/Downloads/Internship Projects/gcp-dapp-auction/client/node_modules/truffle-contract/node_modules/bignumber.js/bignumber.mjs"],"sourcesContent":["/*\r\n *      bignumber.js v7.2.1\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2018 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\nvar isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n\r\n  mathceil = Math.ceil,\r\n  mathfloor = Math.floor,\r\n\r\n  bignumberError = '[BigNumber Error] ',\r\n  tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n  BASE = 1e14,\r\n  LOG_BASE = 14,\r\n  MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n  // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n  POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n  SQRT_BASE = 1e7,\r\n\r\n  // EDITABLE\r\n  // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n  // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n  MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n/*\r\n * Create and return a BigNumber constructor.\r\n */\r\nfunction clone(configObject) {\r\n  var div, convertBase, parseNumeric,\r\n    P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n    ONE = new BigNumber(1),\r\n\r\n\r\n    //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n    // The default values below must be integers within the inclusive ranges stated.\r\n    // The values can also be changed at run-time using BigNumber.set.\r\n\r\n    // The maximum number of decimal places for operations involving division.\r\n    DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n    // The rounding mode used when rounding to the above decimal places, and when using\r\n    // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n    // UP         0 Away from zero.\r\n    // DOWN       1 Towards zero.\r\n    // CEIL       2 Towards +Infinity.\r\n    // FLOOR      3 Towards -Infinity.\r\n    // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n    // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n    // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n    // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n    // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n    ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n    // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n    // The exponent value at and beneath which toString returns exponential notation.\r\n    // Number type: -7\r\n    TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n    // The exponent value at and above which toString returns exponential notation.\r\n    // Number type: 21\r\n    TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n    // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n    // The minimum exponent value, beneath which underflow to zero occurs.\r\n    // Number type: -324  (5e-324)\r\n    MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n    // The maximum exponent value, above which overflow to Infinity occurs.\r\n    // Number type:  308  (1.7976931348623157e+308)\r\n    // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n    MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n    // Whether to use cryptographically-secure random number generation, if available.\r\n    CRYPTO = false,                          // true or false\r\n\r\n    // The modulo mode used when calculating the modulus: a mod n.\r\n    // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n    // The remainder (r) is calculated as: r = a - n * q.\r\n    //\r\n    // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n    // DOWN      1 The remainder has the same sign as the dividend.\r\n    //             This modulo mode is commonly known as 'truncated division' and is\r\n    //             equivalent to (a % n) in JavaScript.\r\n    // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n    // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n    // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n    //             The remainder is always positive.\r\n    //\r\n    // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n    // modes are commonly used for the modulus operation.\r\n    // Although the other rounding modes can also be used, they may not give useful results.\r\n    MODULO_MODE = 1,                         // 0 to 9\r\n\r\n    // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n    // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n    POW_PRECISION = 0,                    // 0 to MAX\r\n\r\n    // The format specification used by the BigNumber.prototype.toFormat method.\r\n    FORMAT = {\r\n      decimalSeparator: '.',\r\n      groupSeparator: ',',\r\n      groupSize: 3,\r\n      secondaryGroupSize: 0,\r\n      fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n      fractionGroupSize: 0\r\n    },\r\n\r\n    // The alphabet used for base conversion.\r\n    // It must be at least 2 characters long, with no '.' or repeated character.\r\n    // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n    ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz';\r\n\r\n\r\n  //------------------------------------------------------------------------------------------\r\n\r\n\r\n  // CONSTRUCTOR\r\n\r\n\r\n  /*\r\n   * The BigNumber constructor and exported function.\r\n   * Create and return a new instance of a BigNumber object.\r\n   *\r\n   * n {number|string|BigNumber} A numeric value.\r\n   * [b] {number} The base of n. Integer, 2 to ALPHABET.length inclusive.\r\n   */\r\n  function BigNumber(n, b) {\r\n    var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n      x = this;\r\n\r\n    // Enable constructor usage without new.\r\n    if (!(x instanceof BigNumber)) {\r\n\r\n      // Don't throw on constructor call without new (#81).\r\n      // '[BigNumber Error] Constructor call without new: {n}'\r\n      //throw Error(bignumberError + ' Constructor call without new: ' + n);\r\n      return new BigNumber(n, b);\r\n    }\r\n\r\n    if (b == null) {\r\n\r\n      // Duplicate.\r\n      if (n instanceof BigNumber) {\r\n        x.s = n.s;\r\n        x.e = n.e;\r\n        x.c = (n = n.c) ? n.slice() : n;\r\n        return;\r\n      }\r\n\r\n      isNum = typeof n == 'number';\r\n\r\n      if (isNum && n * 0 == 0) {\r\n\r\n        // Use `1 / n` to handle minus zero also.\r\n        x.s = 1 / n < 0 ? (n = -n, -1) : 1;\r\n\r\n        // Faster path for integers.\r\n        if (n === ~~n) {\r\n          for (e = 0, i = n; i >= 10; i /= 10, e++);\r\n          x.e = e;\r\n          x.c = [n];\r\n          return;\r\n        }\r\n\r\n        str = n + '';\r\n      } else {\r\n        if (!isNumeric.test(str = n + '')) return parseNumeric(x, str, isNum);\r\n        x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n      }\r\n\r\n      // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n        // Exponential form?\r\n        if ((i = str.search(/e/i)) > 0) {\r\n\r\n          // Determine exponent.\r\n          if (e < 0) e = i;\r\n          e += +str.slice(i + 1);\r\n          str = str.substring(0, i);\r\n        } else if (e < 0) {\r\n\r\n          // Integer.\r\n          e = str.length;\r\n        }\r\n\r\n    } else {\r\n\r\n      // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n      intCheck(b, 2, ALPHABET.length, 'Base');\r\n      str = n + '';\r\n\r\n      // Allow exponential notation to be used with base 10 argument, while\r\n      // also rounding to DECIMAL_PLACES as with other bases.\r\n      if (b == 10) {\r\n        x = new BigNumber(n instanceof BigNumber ? n : str);\r\n        return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n      }\r\n\r\n      isNum = typeof n == 'number';\r\n\r\n      if (isNum) {\r\n\r\n        // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n        if (n * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n        x.s = 1 / n < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n          throw Error\r\n           (tooManyDigits + n);\r\n        }\r\n\r\n        // Prevent later check for length on converted number.\r\n        isNum = false;\r\n      } else {\r\n        x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n      }\r\n\r\n      alphabet = ALPHABET.slice(0, b);\r\n      e = i = 0;\r\n\r\n      // Check that str is a valid base b number.\r\n      // Don't use RegExp so alphabet can contain special characters.\r\n      for (len = str.length; i < len; i++) {\r\n        if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n          if (c == '.') {\r\n\r\n            // If '.' is not the first character and it has not be found before.\r\n            if (i > e) {\r\n              e = len;\r\n              continue;\r\n            }\r\n          } else if (!caseChanged) {\r\n\r\n            // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n            if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n              caseChanged = true;\r\n              i = -1;\r\n              e = 0;\r\n              continue;\r\n            }\r\n          }\r\n\r\n          return parseNumeric(x, n + '', isNum, b);\r\n        }\r\n      }\r\n\r\n      str = convertBase(str, b, 10, x.s);\r\n\r\n      // Decimal point?\r\n      if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n      else e = str.length;\r\n    }\r\n\r\n    // Determine leading zeros.\r\n    for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n    // Determine trailing zeros.\r\n    for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n    str = str.slice(i, ++len);\r\n\r\n    if (str) {\r\n      len -= i;\r\n\r\n      // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n      if (isNum && BigNumber.DEBUG &&\r\n        len > 15 && (n > MAX_SAFE_INTEGER || n !== mathfloor(n))) {\r\n          throw Error\r\n           (tooManyDigits + (x.s * n));\r\n      }\r\n\r\n      e = e - i - 1;\r\n\r\n       // Overflow?\r\n      if (e > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        x.c = x.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      } else {\r\n        x.e = e;\r\n        x.c = [];\r\n\r\n        // Transform base\r\n\r\n        // e is the base 10 exponent.\r\n        // i is where to slice str to get the first element of the coefficient array.\r\n        i = (e + 1) % LOG_BASE;\r\n        if (e < 0) i += LOG_BASE;\r\n\r\n        if (i < len) {\r\n          if (i) x.c.push(+str.slice(0, i));\r\n\r\n          for (len -= LOG_BASE; i < len;) {\r\n            x.c.push(+str.slice(i, i += LOG_BASE));\r\n          }\r\n\r\n          str = str.slice(i);\r\n          i = LOG_BASE - str.length;\r\n        } else {\r\n          i -= len;\r\n        }\r\n\r\n        for (; i--; str += '0');\r\n        x.c.push(+str);\r\n      }\r\n    } else {\r\n\r\n      // Zero.\r\n      x.c = [x.e = 0];\r\n    }\r\n  }\r\n\r\n\r\n  // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n  BigNumber.clone = clone;\r\n\r\n  BigNumber.ROUND_UP = 0;\r\n  BigNumber.ROUND_DOWN = 1;\r\n  BigNumber.ROUND_CEIL = 2;\r\n  BigNumber.ROUND_FLOOR = 3;\r\n  BigNumber.ROUND_HALF_UP = 4;\r\n  BigNumber.ROUND_HALF_DOWN = 5;\r\n  BigNumber.ROUND_HALF_EVEN = 6;\r\n  BigNumber.ROUND_HALF_CEIL = 7;\r\n  BigNumber.ROUND_HALF_FLOOR = 8;\r\n  BigNumber.EUCLID = 9;\r\n\r\n\r\n  /*\r\n   * Configure infrequently-changing library-wide settings.\r\n   *\r\n   * Accept an object with the following optional properties (if the value of a property is\r\n   * a number, it must be an integer within the inclusive range stated):\r\n   *\r\n   *   DECIMAL_PLACES   {number}           0 to MAX\r\n   *   ROUNDING_MODE    {number}           0 to 8\r\n   *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n   *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n   *   CRYPTO           {boolean}          true or false\r\n   *   MODULO_MODE      {number}           0 to 9\r\n   *   POW_PRECISION       {number}           0 to MAX\r\n   *   ALPHABET         {string}           A string of two or more unique characters which does\r\n   *                                     not contain '.'.\r\n   *   FORMAT           {object}           An object with some of the following properties:\r\n   *      decimalSeparator       {string}\r\n   *      groupSeparator         {string}\r\n   *      groupSize              {number}\r\n   *      secondaryGroupSize     {number}\r\n   *      fractionGroupSeparator {string}\r\n   *      fractionGroupSize      {number}\r\n   *\r\n   * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n   *\r\n   * E.g.\r\n   * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n   *\r\n   * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n   *\r\n   * Return an object with the properties current values.\r\n   */\r\n  BigNumber.config = BigNumber.set = function (obj) {\r\n    var p, v;\r\n\r\n    if (obj != null) {\r\n\r\n      if (typeof obj == 'object') {\r\n\r\n        // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n        // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, MAX, p);\r\n          DECIMAL_PLACES = v;\r\n        }\r\n\r\n        // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n        // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, 8, p);\r\n          ROUNDING_MODE = v;\r\n        }\r\n\r\n        // EXPONENTIAL_AT {number|number[]}\r\n        // Integer, -MAX to MAX inclusive or\r\n        // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n        // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n          v = obj[p];\r\n          if (isArray(v)) {\r\n            intCheck(v[0], -MAX, 0, p);\r\n            intCheck(v[1], 0, MAX, p);\r\n            TO_EXP_NEG = v[0];\r\n            TO_EXP_POS = v[1];\r\n          } else {\r\n            intCheck(v, -MAX, MAX, p);\r\n            TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n          }\r\n        }\r\n\r\n        // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n        // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n        // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n        if (obj.hasOwnProperty(p = 'RANGE')) {\r\n          v = obj[p];\r\n          if (isArray(v)) {\r\n            intCheck(v[0], -MAX, -1, p);\r\n            intCheck(v[1], 1, MAX, p);\r\n            MIN_EXP = v[0];\r\n            MAX_EXP = v[1];\r\n          } else {\r\n            intCheck(v, -MAX, MAX, p);\r\n            if (v) {\r\n              MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' cannot be zero: ' + v);\r\n            }\r\n          }\r\n        }\r\n\r\n        // CRYPTO {boolean} true or false.\r\n        // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n        // '[BigNumber Error] crypto unavailable'\r\n        if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n          v = obj[p];\r\n          if (v === !!v) {\r\n            if (v) {\r\n              if (typeof crypto != 'undefined' && crypto &&\r\n               (crypto.getRandomValues || crypto.randomBytes)) {\r\n                CRYPTO = v;\r\n              } else {\r\n                CRYPTO = !v;\r\n                throw Error\r\n                 (bignumberError + 'crypto unavailable');\r\n              }\r\n            } else {\r\n              CRYPTO = v;\r\n            }\r\n          } else {\r\n            throw Error\r\n             (bignumberError + p + ' not true or false: ' + v);\r\n          }\r\n        }\r\n\r\n        // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n        // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, 9, p);\r\n          MODULO_MODE = v;\r\n        }\r\n\r\n        // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n        // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n        if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n          v = obj[p];\r\n          intCheck(v, 0, MAX, p);\r\n          POW_PRECISION = v;\r\n        }\r\n\r\n        // FORMAT {object}\r\n        // '[BigNumber Error] FORMAT not an object: {v}'\r\n        if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n          v = obj[p];\r\n          if (typeof v == 'object') FORMAT = v;\r\n          else throw Error\r\n           (bignumberError + p + ' not an object: ' + v);\r\n        }\r\n\r\n        // ALPHABET {string}\r\n        // '[BigNumber Error] ALPHABET invalid: {v}'\r\n        if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n          v = obj[p];\r\n\r\n          // Disallow if only one character, or contains '.' or a repeated character.\r\n          if (typeof v == 'string' && !/^.$|\\.|(.).*\\1/.test(v)) {\r\n            ALPHABET = v;\r\n          } else {\r\n            throw Error\r\n             (bignumberError + p + ' invalid: ' + v);\r\n          }\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Object expected: {v}'\r\n        throw Error\r\n         (bignumberError + 'Object expected: ' + obj);\r\n      }\r\n    }\r\n\r\n    return {\r\n      DECIMAL_PLACES: DECIMAL_PLACES,\r\n      ROUNDING_MODE: ROUNDING_MODE,\r\n      EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n      RANGE: [MIN_EXP, MAX_EXP],\r\n      CRYPTO: CRYPTO,\r\n      MODULO_MODE: MODULO_MODE,\r\n      POW_PRECISION: POW_PRECISION,\r\n      FORMAT: FORMAT,\r\n      ALPHABET: ALPHABET\r\n    };\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if v is a BigNumber instance, otherwise return false.\r\n   *\r\n   * v {any}\r\n   */\r\n  BigNumber.isBigNumber = function (v) {\r\n    return v instanceof BigNumber || v && v._isBigNumber === true || false;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the maximum of the arguments.\r\n   *\r\n   * arguments {number|string|BigNumber}\r\n   */\r\n  BigNumber.maximum = BigNumber.max = function () {\r\n    return maxOrMin(arguments, P.lt);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the minimum of the arguments.\r\n   *\r\n   * arguments {number|string|BigNumber}\r\n   */\r\n  BigNumber.minimum = BigNumber.min = function () {\r\n    return maxOrMin(arguments, P.gt);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n   * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n   * zeros are produced).\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n   * '[BigNumber Error] crypto unavailable'\r\n   */\r\n  BigNumber.random = (function () {\r\n    var pow2_53 = 0x20000000000000;\r\n\r\n    // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n    // Check if Math.random() produces more than 32 bits of randomness.\r\n    // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n    // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n    var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n     ? function () { return mathfloor(Math.random() * pow2_53); }\r\n     : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n       (Math.random() * 0x800000 | 0); };\r\n\r\n    return function (dp) {\r\n      var a, b, e, k, v,\r\n        i = 0,\r\n        c = [],\r\n        rand = new BigNumber(ONE);\r\n\r\n      if (dp == null) dp = DECIMAL_PLACES;\r\n      else intCheck(dp, 0, MAX);\r\n\r\n      k = mathceil(dp / LOG_BASE);\r\n\r\n      if (CRYPTO) {\r\n\r\n        // Browsers supporting crypto.getRandomValues.\r\n        if (crypto.getRandomValues) {\r\n\r\n          a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n          for (; i < k;) {\r\n\r\n            // 53 bits:\r\n            // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n            // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n            // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n            //                                     11111 11111111 11111111\r\n            // 0x20000 is 2^21.\r\n            v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n            // Rejection sampling:\r\n            // 0 <= v < 9007199254740992\r\n            // Probability that v >= 9e15, is\r\n            // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n            if (v >= 9e15) {\r\n              b = crypto.getRandomValues(new Uint32Array(2));\r\n              a[i] = b[0];\r\n              a[i + 1] = b[1];\r\n            } else {\r\n\r\n              // 0 <= v <= 8999999999999999\r\n              // 0 <= (v % 1e14) <= 99999999999999\r\n              c.push(v % 1e14);\r\n              i += 2;\r\n            }\r\n          }\r\n          i = k / 2;\r\n\r\n        // Node.js supporting crypto.randomBytes.\r\n        } else if (crypto.randomBytes) {\r\n\r\n          // buffer\r\n          a = crypto.randomBytes(k *= 7);\r\n\r\n          for (; i < k;) {\r\n\r\n            // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n            // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n            // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n            // 0 <= v < 9007199254740992\r\n            v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n               (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n               (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n            if (v >= 9e15) {\r\n              crypto.randomBytes(7).copy(a, i);\r\n            } else {\r\n\r\n              // 0 <= (v % 1e14) <= 99999999999999\r\n              c.push(v % 1e14);\r\n              i += 7;\r\n            }\r\n          }\r\n          i = k / 7;\r\n        } else {\r\n          CRYPTO = false;\r\n          throw Error\r\n           (bignumberError + 'crypto unavailable');\r\n        }\r\n      }\r\n\r\n      // Use Math.random.\r\n      if (!CRYPTO) {\r\n\r\n        for (; i < k;) {\r\n          v = random53bitInt();\r\n          if (v < 9e15) c[i++] = v % 1e14;\r\n        }\r\n      }\r\n\r\n      k = c[--i];\r\n      dp %= LOG_BASE;\r\n\r\n      // Convert trailing digits to zeros according to dp.\r\n      if (k && dp) {\r\n        v = POWS_TEN[LOG_BASE - dp];\r\n        c[i] = mathfloor(k / v) * v;\r\n      }\r\n\r\n      // Remove trailing elements which are zero.\r\n      for (; c[i] === 0; c.pop(), i--);\r\n\r\n      // Zero?\r\n      if (i < 0) {\r\n        c = [e = 0];\r\n      } else {\r\n\r\n        // Remove leading elements which are zero and adjust exponent accordingly.\r\n        for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n        // Count the digits of the first element of c to determine leading zeros, and...\r\n        for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n        // adjust the exponent accordingly.\r\n        if (i < LOG_BASE) e -= LOG_BASE - i;\r\n      }\r\n\r\n      rand.e = e;\r\n      rand.c = c;\r\n      return rand;\r\n    };\r\n  })();\r\n\r\n\r\n  // PRIVATE FUNCTIONS\r\n\r\n\r\n  // Called by BigNumber and BigNumber.prototype.toString.\r\n  convertBase = (function () {\r\n    var decimal = '0123456789';\r\n\r\n    /*\r\n     * Convert string of baseIn to an array of numbers of baseOut.\r\n     * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n     * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n     */\r\n    function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n      var j,\r\n        arr = [0],\r\n        arrL,\r\n        i = 0,\r\n        len = str.length;\r\n\r\n      for (; i < len;) {\r\n        for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n        arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n        for (j = 0; j < arr.length; j++) {\r\n\r\n          if (arr[j] > baseOut - 1) {\r\n            if (arr[j + 1] == null) arr[j + 1] = 0;\r\n            arr[j + 1] += arr[j] / baseOut | 0;\r\n            arr[j] %= baseOut;\r\n          }\r\n        }\r\n      }\r\n\r\n      return arr.reverse();\r\n    }\r\n\r\n    // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n    // If the caller is toString, we are converting from base 10 to baseOut.\r\n    // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n    return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n      var alphabet, d, e, k, r, x, xc, y,\r\n        i = str.indexOf('.'),\r\n        dp = DECIMAL_PLACES,\r\n        rm = ROUNDING_MODE;\r\n\r\n      // Non-integer.\r\n      if (i >= 0) {\r\n        k = POW_PRECISION;\r\n\r\n        // Unlimited precision.\r\n        POW_PRECISION = 0;\r\n        str = str.replace('.', '');\r\n        y = new BigNumber(baseIn);\r\n        x = y.pow(str.length - i);\r\n        POW_PRECISION = k;\r\n\r\n        // Convert str as if an integer, then restore the fraction part by dividing the\r\n        // result by its base raised to a power.\r\n\r\n        y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n         10, baseOut, decimal);\r\n        y.e = y.c.length;\r\n      }\r\n\r\n      // Convert the number as integer.\r\n\r\n      xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n       ? (alphabet = ALPHABET, decimal)\r\n       : (alphabet = decimal, ALPHABET));\r\n\r\n      // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n      e = k = xc.length;\r\n\r\n      // Remove trailing zeros.\r\n      for (; xc[--k] == 0; xc.pop());\r\n\r\n      // Zero?\r\n      if (!xc[0]) return alphabet.charAt(0);\r\n\r\n      // Does str represent an integer? If so, no need for the division.\r\n      if (i < 0) {\r\n        --e;\r\n      } else {\r\n        x.c = xc;\r\n        x.e = e;\r\n\r\n        // The sign is needed for correct rounding.\r\n        x.s = sign;\r\n        x = div(x, y, dp, rm, baseOut);\r\n        xc = x.c;\r\n        r = x.r;\r\n        e = x.e;\r\n      }\r\n\r\n      // xc now represents str converted to baseOut.\r\n\r\n      // THe index of the rounding digit.\r\n      d = e + dp + 1;\r\n\r\n      // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n      i = xc[d];\r\n\r\n      // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n      k = baseOut / 2;\r\n      r = r || d < 0 || xc[d + 1] != null;\r\n\r\n      r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n            : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n      // If the index of the rounding digit is not greater than zero, or xc represents\r\n      // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n      // such as 0.00001.\r\n      if (d < 1 || !xc[0]) {\r\n\r\n        // 1^-dp or 0\r\n        str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0))\r\n            : alphabet.charAt(0);\r\n      } else {\r\n\r\n        // Truncate xc to the required number of decimal places.\r\n        xc.length = d;\r\n\r\n        // Round up?\r\n        if (r) {\r\n\r\n          // Rounding up may mean the previous digit has to be rounded up and so on.\r\n          for (--baseOut; ++xc[--d] > baseOut;) {\r\n            xc[d] = 0;\r\n\r\n            if (!d) {\r\n              ++e;\r\n              xc = [1].concat(xc);\r\n            }\r\n          }\r\n        }\r\n\r\n        // Determine trailing zeros.\r\n        for (k = xc.length; !xc[--k];);\r\n\r\n        // E.g. [4, 11, 15] becomes 4bf.\r\n        for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n        // Add leading zeros, decimal point and trailing zeros as required.\r\n        str = toFixedPoint(str, e, alphabet.charAt(0));\r\n      }\r\n\r\n      // The caller will add the sign.\r\n      return str;\r\n    };\r\n  })();\r\n\r\n\r\n  // Perform division in the specified base. Called by div and convertBase.\r\n  div = (function () {\r\n\r\n    // Assume non-zero x and k.\r\n    function multiply(x, k, base) {\r\n      var m, temp, xlo, xhi,\r\n        carry = 0,\r\n        i = x.length,\r\n        klo = k % SQRT_BASE,\r\n        khi = k / SQRT_BASE | 0;\r\n\r\n      for (x = x.slice(); i--;) {\r\n        xlo = x[i] % SQRT_BASE;\r\n        xhi = x[i] / SQRT_BASE | 0;\r\n        m = khi * xlo + xhi * klo;\r\n        temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n        carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n        x[i] = temp % base;\r\n      }\r\n\r\n      if (carry) x = [carry].concat(x);\r\n\r\n      return x;\r\n    }\r\n\r\n    function compare(a, b, aL, bL) {\r\n      var i, cmp;\r\n\r\n      if (aL != bL) {\r\n        cmp = aL > bL ? 1 : -1;\r\n      } else {\r\n\r\n        for (i = cmp = 0; i < aL; i++) {\r\n\r\n          if (a[i] != b[i]) {\r\n            cmp = a[i] > b[i] ? 1 : -1;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      return cmp;\r\n    }\r\n\r\n    function subtract(a, b, aL, base) {\r\n      var i = 0;\r\n\r\n      // Subtract b from a.\r\n      for (; aL--;) {\r\n        a[aL] -= i;\r\n        i = a[aL] < b[aL] ? 1 : 0;\r\n        a[aL] = i * base + a[aL] - b[aL];\r\n      }\r\n\r\n      // Remove leading zeros.\r\n      for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n    }\r\n\r\n    // x: dividend, y: divisor.\r\n    return function (x, y, dp, rm, base) {\r\n      var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n        yL, yz,\r\n        s = x.s == y.s ? 1 : -1,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      // Either NaN, Infinity or 0?\r\n      if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n        return new BigNumber(\r\n\r\n         // Return NaN if either NaN, or both Infinity or 0.\r\n         !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n          // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n          xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n       );\r\n      }\r\n\r\n      q = new BigNumber(s);\r\n      qc = q.c = [];\r\n      e = x.e - y.e;\r\n      s = dp + e + 1;\r\n\r\n      if (!base) {\r\n        base = BASE;\r\n        e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n        s = s / LOG_BASE | 0;\r\n      }\r\n\r\n      // Result exponent may be one less then the current value of e.\r\n      // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n      for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n      if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n      if (s < 0) {\r\n        qc.push(1);\r\n        more = true;\r\n      } else {\r\n        xL = xc.length;\r\n        yL = yc.length;\r\n        i = 0;\r\n        s += 2;\r\n\r\n        // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n        n = mathfloor(base / (yc[0] + 1));\r\n\r\n        // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n        // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n        if (n > 1) {\r\n          yc = multiply(yc, n, base);\r\n          xc = multiply(xc, n, base);\r\n          yL = yc.length;\r\n          xL = xc.length;\r\n        }\r\n\r\n        xi = yL;\r\n        rem = xc.slice(0, yL);\r\n        remL = rem.length;\r\n\r\n        // Add zeros to make remainder as long as divisor.\r\n        for (; remL < yL; rem[remL++] = 0);\r\n        yz = yc.slice();\r\n        yz = [0].concat(yz);\r\n        yc0 = yc[0];\r\n        if (yc[1] >= base / 2) yc0++;\r\n        // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n        // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n        do {\r\n          n = 0;\r\n\r\n          // Compare divisor and remainder.\r\n          cmp = compare(yc, rem, yL, remL);\r\n\r\n          // If divisor < remainder.\r\n          if (cmp < 0) {\r\n\r\n            // Calculate trial digit, n.\r\n\r\n            rem0 = rem[0];\r\n            if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n            // n is how many times the divisor goes into the current remainder.\r\n            n = mathfloor(rem0 / yc0);\r\n\r\n            //  Algorithm:\r\n            //  product = divisor multiplied by trial digit (n).\r\n            //  Compare product and remainder.\r\n            //  If product is greater than remainder:\r\n            //    Subtract divisor from product, decrement trial digit.\r\n            //  Subtract product from remainder.\r\n            //  If product was less than remainder at the last compare:\r\n            //    Compare new remainder and divisor.\r\n            //    If remainder is greater than divisor:\r\n            //      Subtract divisor from remainder, increment trial digit.\r\n\r\n            if (n > 1) {\r\n\r\n              // n may be > base only when base is 3.\r\n              if (n >= base) n = base - 1;\r\n\r\n              // product = divisor * trial digit.\r\n              prod = multiply(yc, n, base);\r\n              prodL = prod.length;\r\n              remL = rem.length;\r\n\r\n              // Compare product and remainder.\r\n              // If product > remainder then trial digit n too high.\r\n              // n is 1 too high about 5% of the time, and is not known to have\r\n              // ever been more than 1 too high.\r\n              while (compare(prod, rem, prodL, remL) == 1) {\r\n                n--;\r\n\r\n                // Subtract divisor from product.\r\n                subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                prodL = prod.length;\r\n                cmp = 1;\r\n              }\r\n            } else {\r\n\r\n              // n is 0 or 1, cmp is -1.\r\n              // If n is 0, there is no need to compare yc and rem again below,\r\n              // so change cmp to 1 to avoid it.\r\n              // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n              if (n == 0) {\r\n\r\n                // divisor < remainder, so n must be at least 1.\r\n                cmp = n = 1;\r\n              }\r\n\r\n              // product = divisor\r\n              prod = yc.slice();\r\n              prodL = prod.length;\r\n            }\r\n\r\n            if (prodL < remL) prod = [0].concat(prod);\r\n\r\n            // Subtract product from remainder.\r\n            subtract(rem, prod, remL, base);\r\n            remL = rem.length;\r\n\r\n             // If product was < remainder.\r\n            if (cmp == -1) {\r\n\r\n              // Compare divisor and new remainder.\r\n              // If divisor < new remainder, subtract divisor from remainder.\r\n              // Trial digit n too low.\r\n              // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n              while (compare(yc, rem, yL, remL) < 1) {\r\n                n++;\r\n\r\n                // Subtract divisor from remainder.\r\n                subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                remL = rem.length;\r\n              }\r\n            }\r\n          } else if (cmp === 0) {\r\n            n++;\r\n            rem = [0];\r\n          } // else cmp === 1 and n will be 0\r\n\r\n          // Add the next digit, n, to the result array.\r\n          qc[i++] = n;\r\n\r\n          // Update the remainder.\r\n          if (rem[0]) {\r\n            rem[remL++] = xc[xi] || 0;\r\n          } else {\r\n            rem = [xc[xi]];\r\n            remL = 1;\r\n          }\r\n        } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n        more = rem[0] != null;\r\n\r\n        // Leading zero?\r\n        if (!qc[0]) qc.splice(0, 1);\r\n      }\r\n\r\n      if (base == BASE) {\r\n\r\n        // To calculate q.e, first get the number of digits of qc[0].\r\n        for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n        round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n      // Caller is convertBase.\r\n      } else {\r\n        q.e = e;\r\n        q.r = +more;\r\n      }\r\n\r\n      return q;\r\n    };\r\n  })();\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n   * notation rounded to the specified decimal places or significant digits.\r\n   *\r\n   * n: a BigNumber.\r\n   * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n   * rm: the rounding mode.\r\n   * id: 1 (toExponential) or 2 (toPrecision).\r\n   */\r\n  function format(n, i, rm, id) {\r\n    var c0, e, ne, len, str;\r\n\r\n    if (rm == null) rm = ROUNDING_MODE;\r\n    else intCheck(rm, 0, 8);\r\n\r\n    if (!n.c) return n.toString();\r\n\r\n    c0 = n.c[0];\r\n    ne = n.e;\r\n\r\n    if (i == null) {\r\n      str = coeffToString(n.c);\r\n      str = id == 1 || id == 2 && ne <= TO_EXP_NEG\r\n       ? toExponential(str, ne)\r\n       : toFixedPoint(str, ne, '0');\r\n    } else {\r\n      n = round(new BigNumber(n), i, rm);\r\n\r\n      // n.e may have changed if the value was rounded up.\r\n      e = n.e;\r\n\r\n      str = coeffToString(n.c);\r\n      len = str.length;\r\n\r\n      // toPrecision returns exponential notation if the number of significant digits\r\n      // specified is less than the number of digits necessary to represent the integer\r\n      // part of the value in fixed-point notation.\r\n\r\n      // Exponential notation.\r\n      if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n        // Append zeros?\r\n        for (; len < i; str += '0', len++);\r\n        str = toExponential(str, e);\r\n\r\n      // Fixed-point notation.\r\n      } else {\r\n        i -= ne;\r\n        str = toFixedPoint(str, e, '0');\r\n\r\n        // Append zeros?\r\n        if (e + 1 > len) {\r\n          if (--i > 0) for (str += '.'; i--; str += '0');\r\n        } else {\r\n          i += e - len;\r\n          if (i > 0) {\r\n            if (e + 1 == len) str += '.';\r\n            for (; i--; str += '0');\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return n.s < 0 && c0 ? '-' + str : str;\r\n  }\r\n\r\n\r\n  // Handle BigNumber.max and BigNumber.min.\r\n  function maxOrMin(args, method) {\r\n    var m, n,\r\n      i = 0;\r\n\r\n    if (isArray(args[0])) args = args[0];\r\n    m = new BigNumber(args[0]);\r\n\r\n    for (; ++i < args.length;) {\r\n      n = new BigNumber(args[i]);\r\n\r\n      // If any number is NaN, return NaN.\r\n      if (!n.s) {\r\n        m = n;\r\n        break;\r\n      } else if (method.call(m, n)) {\r\n        m = n;\r\n      }\r\n    }\r\n\r\n    return m;\r\n  }\r\n\r\n\r\n  /*\r\n   * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n   * Called by minus, plus and times.\r\n   */\r\n  function normalise(n, c, e) {\r\n    var i = 1,\r\n      j = c.length;\r\n\r\n     // Remove trailing zeros.\r\n    for (; !c[--j]; c.pop());\r\n\r\n    // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n    for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n    // Overflow?\r\n    if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n      // Infinity.\r\n      n.c = n.e = null;\r\n\r\n    // Underflow?\r\n    } else if (e < MIN_EXP) {\r\n\r\n      // Zero.\r\n      n.c = [n.e = 0];\r\n    } else {\r\n      n.e = e;\r\n      n.c = c;\r\n    }\r\n\r\n    return n;\r\n  }\r\n\r\n\r\n  // Handle values that fail the validity test in BigNumber.\r\n  parseNumeric = (function () {\r\n    var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n      dotAfter = /^([^.]+)\\.$/,\r\n      dotBefore = /^\\.([^.]+)$/,\r\n      isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n      whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n    return function (x, str, isNum, b) {\r\n      var base,\r\n        s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n      // No exception on ±Infinity or NaN.\r\n      if (isInfinityOrNaN.test(s)) {\r\n        x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n        x.c = x.e = null;\r\n      } else {\r\n        if (!isNum) {\r\n\r\n          // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n          s = s.replace(basePrefix, function (m, p1, p2) {\r\n            base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n            return !b || b == base ? p1 : m;\r\n          });\r\n\r\n          if (b) {\r\n            base = b;\r\n\r\n            // E.g. '1.' to '1', '.1' to '0.1'\r\n            s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n          }\r\n\r\n          if (str != s) return new BigNumber(s, base);\r\n        }\r\n\r\n        // '[BigNumber Error] Not a number: {n}'\r\n        // '[BigNumber Error] Not a base {b} number: {n}'\r\n        if (BigNumber.DEBUG) {\r\n          throw Error\r\n            (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n        }\r\n\r\n        // NaN\r\n        x.c = x.e = x.s = null;\r\n      }\r\n    }\r\n  })();\r\n\r\n\r\n  /*\r\n   * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n   * If r is truthy, it is known that there are more digits after the rounding digit.\r\n   */\r\n  function round(x, sd, rm, r) {\r\n    var d, i, j, k, n, ni, rd,\r\n      xc = x.c,\r\n      pows10 = POWS_TEN;\r\n\r\n    // if x is not Infinity or NaN...\r\n    if (xc) {\r\n\r\n      // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n      // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n      // ni is the index of n within x.c.\r\n      // d is the number of digits of n.\r\n      // i is the index of rd within n including leading zeros.\r\n      // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n      out: {\r\n\r\n        // Get the number of digits of the first element of xc.\r\n        for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n        i = sd - d;\r\n\r\n        // If the rounding digit is in the first element of xc...\r\n        if (i < 0) {\r\n          i += LOG_BASE;\r\n          j = sd;\r\n          n = xc[ni = 0];\r\n\r\n          // Get the rounding digit at index j of n.\r\n          rd = n / pows10[d - j - 1] % 10 | 0;\r\n        } else {\r\n          ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n          if (ni >= xc.length) {\r\n\r\n            if (r) {\r\n\r\n              // Needed by sqrt.\r\n              for (; xc.length <= ni; xc.push(0));\r\n              n = rd = 0;\r\n              d = 1;\r\n              i %= LOG_BASE;\r\n              j = i - LOG_BASE + 1;\r\n            } else {\r\n              break out;\r\n            }\r\n          } else {\r\n            n = k = xc[ni];\r\n\r\n            // Get the number of digits of n.\r\n            for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n            // Get the index of rd within n.\r\n            i %= LOG_BASE;\r\n\r\n            // Get the index of rd within n, adjusted for leading zeros.\r\n            // The number of leading zeros of n is given by LOG_BASE - d.\r\n            j = i - LOG_BASE + d;\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\r\n          }\r\n        }\r\n\r\n        r = r || sd < 0 ||\r\n\r\n        // Are there any non-zero digits after the rounding digit?\r\n        // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n        // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n         xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n        r = rm < 4\r\n         ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n         : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n          // Check whether the digit to the left of the rounding digit is odd.\r\n          ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n           rm == (x.s < 0 ? 8 : 7));\r\n\r\n        if (sd < 1 || !xc[0]) {\r\n          xc.length = 0;\r\n\r\n          if (r) {\r\n\r\n            // Convert sd to decimal places.\r\n            sd -= x.e + 1;\r\n\r\n            // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n            xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n            x.e = -sd || 0;\r\n          } else {\r\n\r\n            // Zero.\r\n            xc[0] = x.e = 0;\r\n          }\r\n\r\n          return x;\r\n        }\r\n\r\n        // Remove excess digits.\r\n        if (i == 0) {\r\n          xc.length = ni;\r\n          k = 1;\r\n          ni--;\r\n        } else {\r\n          xc.length = ni + 1;\r\n          k = pows10[LOG_BASE - i];\r\n\r\n          // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n          // j > 0 means i > number of leading zeros of n.\r\n          xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n        }\r\n\r\n        // Round up?\r\n        if (r) {\r\n\r\n          for (; ;) {\r\n\r\n            // If the digit to be rounded up is in the first element of xc...\r\n            if (ni == 0) {\r\n\r\n              // i will be the length of xc[0] before k is added.\r\n              for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n              j = xc[0] += k;\r\n              for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n              // if i != k the length has increased.\r\n              if (i != k) {\r\n                x.e++;\r\n                if (xc[0] == BASE) xc[0] = 1;\r\n              }\r\n\r\n              break;\r\n            } else {\r\n              xc[ni] += k;\r\n              if (xc[ni] != BASE) break;\r\n              xc[ni--] = 0;\r\n              k = 1;\r\n            }\r\n          }\r\n        }\r\n\r\n        // Remove trailing zeros.\r\n        for (i = xc.length; xc[--i] === 0; xc.pop());\r\n      }\r\n\r\n      // Overflow? Infinity.\r\n      if (x.e > MAX_EXP) {\r\n        x.c = x.e = null;\r\n\r\n      // Underflow? Zero.\r\n      } else if (x.e < MIN_EXP) {\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n   */\r\n  P.absoluteValue = P.abs = function () {\r\n    var x = new BigNumber(this);\r\n    if (x.s < 0) x.s = 1;\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return\r\n   *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n   *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n   *   0 if they have the same value,\r\n   *   or null if the value of either is NaN.\r\n   */\r\n  P.comparedTo = function (y, b) {\r\n    return compare(this, new BigNumber(y, b));\r\n  };\r\n\r\n\r\n  /*\r\n   * If dp is undefined or null or true or false, return the number of decimal places of the\r\n   * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n   *\r\n   * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n   * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n   * ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */\r\n  P.decimalPlaces = P.dp = function (dp, rm) {\r\n    var c, n, v,\r\n      x = this;\r\n\r\n    if (dp != null) {\r\n      intCheck(dp, 0, MAX);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      return round(new BigNumber(x), dp + x.e + 1, rm);\r\n    }\r\n\r\n    if (!(c = x.c)) return null;\r\n    n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n    // Subtract the number of trailing zeros of the last number.\r\n    if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n    if (n < 0) n = 0;\r\n\r\n    return n;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n / 0 = I\r\n   *  n / N = N\r\n   *  n / I = 0\r\n   *  0 / n = 0\r\n   *  0 / 0 = N\r\n   *  0 / N = N\r\n   *  0 / I = 0\r\n   *  N / n = N\r\n   *  N / 0 = N\r\n   *  N / N = N\r\n   *  N / I = N\r\n   *  I / n = I\r\n   *  I / 0 = I\r\n   *  I / N = N\r\n   *  I / I = N\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n   * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n   */\r\n  P.dividedBy = P.div = function (y, b) {\r\n    return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n   * BigNumber by the value of BigNumber(y, b).\r\n   */\r\n  P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n    return div(this, new BigNumber(y, b), 0, 1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n   *\r\n   * If m is present, return the result modulo m.\r\n   * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n   * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n   *\r\n   * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n   * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n   *\r\n   * n {number|string|BigNumber} The exponent. An integer.\r\n   * [m] {number|string|BigNumber} The modulus.\r\n   *\r\n   * '[BigNumber Error] Exponent not an integer: {n}'\r\n   */\r\n  P.exponentiatedBy = P.pow = function (n, m) {\r\n    var half, isModExp, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n      x = this;\r\n\r\n    n = new BigNumber(n);\r\n\r\n    // Allow NaN and ±Infinity, but not other non-integers.\r\n    if (n.c && !n.isInteger()) {\r\n      throw Error\r\n        (bignumberError + 'Exponent not an integer: ' + n);\r\n    }\r\n\r\n    if (m != null) m = new BigNumber(m);\r\n\r\n    // Exponent of MAX_SAFE_INTEGER is 15.\r\n    nIsBig = n.e > 14;\r\n\r\n    // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\r\n    if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n      // The sign of the result of pow when x is negative depends on the evenness of n.\r\n      // If +n overflows to ±Infinity, the evenness of n would be not be known.\r\n      y = new BigNumber(Math.pow(+x.valueOf(), nIsBig ? 2 - isOdd(n) : +n));\r\n      return m ? y.mod(m) : y;\r\n    }\r\n\r\n    nIsNeg = n.s < 0;\r\n\r\n    if (m) {\r\n\r\n      // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n      if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n      isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n      if (isModExp) x = x.mod(m);\r\n\r\n    // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n    // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n    } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n      // [1, 240000000]\r\n      ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n      // [80000000000000]  [99999750000000]\r\n      : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n      // If x is negative and n is odd, k = -0, else k = 0.\r\n      k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n      // If x >= 1, k = ±Infinity.\r\n      if (x.e > -1) k = 1 / k;\r\n\r\n      // If n is negative return ±0, else return ±Infinity.\r\n      return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n    } else if (POW_PRECISION) {\r\n\r\n      // Truncating each coefficient array to a length of k after each multiplication\r\n      // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n      // i.e. there will be a minimum of 28 guard digits retained.\r\n      k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n    }\r\n\r\n    if (nIsBig) {\r\n      half = new BigNumber(0.5);\r\n      nIsOdd = isOdd(n);\r\n    } else {\r\n      nIsOdd = n % 2;\r\n    }\r\n\r\n    if (nIsNeg) n.s = 1;\r\n\r\n    y = new BigNumber(ONE);\r\n\r\n    // Performs 54 loop iterations for n of 9007199254740991.\r\n    for (; ;) {\r\n\r\n      if (nIsOdd) {\r\n        y = y.times(x);\r\n        if (!y.c) break;\r\n\r\n        if (k) {\r\n          if (y.c.length > k) y.c.length = k;\r\n        } else if (isModExp) {\r\n          y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (nIsBig) {\r\n        n = n.times(half);\r\n        round(n, n.e + 1, 1);\r\n        if (!n.c[0]) break;\r\n        nIsBig = n.e > 14;\r\n        nIsOdd = isOdd(n);\r\n      } else {\r\n        n = mathfloor(n / 2);\r\n        if (!n) break;\r\n        nIsOdd = n % 2;\r\n      }\r\n\r\n      x = x.times(x);\r\n\r\n      if (k) {\r\n        if (x.c && x.c.length > k) x.c.length = k;\r\n      } else if (isModExp) {\r\n        x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n      }\r\n    }\r\n\r\n    if (isModExp) return y;\r\n    if (nIsNeg) y = ONE.div(y);\r\n\r\n    return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n   * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n   */\r\n  P.integerValue = function (rm) {\r\n    var n = new BigNumber(this);\r\n    if (rm == null) rm = ROUNDING_MODE;\r\n    else intCheck(rm, 0, 8);\r\n    return round(n, n.e + 1, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n   * otherwise return false.\r\n   */\r\n  P.isEqualTo = P.eq = function (y, b) {\r\n    return compare(this, new BigNumber(y, b)) === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n   */\r\n  P.isFinite = function () {\r\n    return !!this.c;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n   * otherwise return false.\r\n   */\r\n  P.isGreaterThan = P.gt = function (y, b) {\r\n    return compare(this, new BigNumber(y, b)) > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is greater than or equal to the value of\r\n   * BigNumber(y, b), otherwise return false.\r\n   */\r\n  P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n    return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n   */\r\n  P.isInteger = function () {\r\n    return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n   * otherwise return false.\r\n   */\r\n  P.isLessThan = P.lt = function (y, b) {\r\n    return compare(this, new BigNumber(y, b)) < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is less than or equal to the value of\r\n   * BigNumber(y, b), otherwise return false.\r\n   */\r\n  P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n    return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n   */\r\n  P.isNaN = function () {\r\n    return !this.s;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is negative, otherwise return false.\r\n   */\r\n  P.isNegative = function () {\r\n    return this.s < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is positive, otherwise return false.\r\n   */\r\n  P.isPositive = function () {\r\n    return this.s > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n   */\r\n  P.isZero = function () {\r\n    return !!this.c && this.c[0] == 0;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n - 0 = n\r\n   *  n - N = N\r\n   *  n - I = -I\r\n   *  0 - n = -n\r\n   *  0 - 0 = 0\r\n   *  0 - N = N\r\n   *  0 - I = -I\r\n   *  N - n = N\r\n   *  N - 0 = N\r\n   *  N - N = N\r\n   *  N - I = N\r\n   *  I - n = I\r\n   *  I - 0 = I\r\n   *  I - N = N\r\n   *  I - I = N\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n   * BigNumber(y, b).\r\n   */\r\n  P.minus = function (y, b) {\r\n    var i, j, t, xLTy,\r\n      x = this,\r\n      a = x.s;\r\n\r\n    y = new BigNumber(y, b);\r\n    b = y.s;\r\n\r\n    // Either NaN?\r\n    if (!a || !b) return new BigNumber(NaN);\r\n\r\n    // Signs differ?\r\n    if (a != b) {\r\n      y.s = -b;\r\n      return x.plus(y);\r\n    }\r\n\r\n    var xe = x.e / LOG_BASE,\r\n      ye = y.e / LOG_BASE,\r\n      xc = x.c,\r\n      yc = y.c;\r\n\r\n    if (!xe || !ye) {\r\n\r\n      // Either Infinity?\r\n      if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n      // Either zero?\r\n      if (!xc[0] || !yc[0]) {\r\n\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n         // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n         ROUNDING_MODE == 3 ? -0 : 0);\r\n      }\r\n    }\r\n\r\n    xe = bitFloor(xe);\r\n    ye = bitFloor(ye);\r\n    xc = xc.slice();\r\n\r\n    // Determine which is the bigger number.\r\n    if (a = xe - ye) {\r\n\r\n      if (xLTy = a < 0) {\r\n        a = -a;\r\n        t = xc;\r\n      } else {\r\n        ye = xe;\r\n        t = yc;\r\n      }\r\n\r\n      t.reverse();\r\n\r\n      // Prepend zeros to equalise exponents.\r\n      for (b = a; b--; t.push(0));\r\n      t.reverse();\r\n    } else {\r\n\r\n      // Exponents equal. Check digit by digit.\r\n      j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n      for (a = b = 0; b < j; b++) {\r\n\r\n        if (xc[b] != yc[b]) {\r\n          xLTy = xc[b] < yc[b];\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    // x < y? Point xc to the array of the bigger number.\r\n    if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\r\n\r\n    b = (j = yc.length) - (i = xc.length);\r\n\r\n    // Append zeros to xc if shorter.\r\n    // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n    if (b > 0) for (; b--; xc[i++] = 0);\r\n    b = BASE - 1;\r\n\r\n    // Subtract yc from xc.\r\n    for (; j > a;) {\r\n\r\n      if (xc[--j] < yc[j]) {\r\n        for (i = j; i && !xc[--i]; xc[i] = b);\r\n        --xc[i];\r\n        xc[j] += BASE;\r\n      }\r\n\r\n      xc[j] -= yc[j];\r\n    }\r\n\r\n    // Remove leading zeros and adjust exponent accordingly.\r\n    for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n    // Zero?\r\n    if (!xc[0]) {\r\n\r\n      // Following IEEE 754 (2008) 6.3,\r\n      // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n      y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n      y.c = [y.e = 0];\r\n      return y;\r\n    }\r\n\r\n    // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n    // for finite x and y.\r\n    return normalise(y, xc, ye);\r\n  };\r\n\r\n\r\n  /*\r\n   *   n % 0 =  N\r\n   *   n % N =  N\r\n   *   n % I =  n\r\n   *   0 % n =  0\r\n   *  -0 % n = -0\r\n   *   0 % 0 =  N\r\n   *   0 % N =  N\r\n   *   0 % I =  0\r\n   *   N % n =  N\r\n   *   N % 0 =  N\r\n   *   N % N =  N\r\n   *   N % I =  N\r\n   *   I % n =  N\r\n   *   I % 0 =  N\r\n   *   I % N =  N\r\n   *   I % I =  N\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n   * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n   */\r\n  P.modulo = P.mod = function (y, b) {\r\n    var q, s,\r\n      x = this;\r\n\r\n    y = new BigNumber(y, b);\r\n\r\n    // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n    if (!x.c || !y.s || y.c && !y.c[0]) {\r\n      return new BigNumber(NaN);\r\n\r\n    // Return x if y is Infinity or x is zero.\r\n    } else if (!y.c || x.c && !x.c[0]) {\r\n      return new BigNumber(x);\r\n    }\r\n\r\n    if (MODULO_MODE == 9) {\r\n\r\n      // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n      // r = x - qy    where  0 <= r < abs(y)\r\n      s = y.s;\r\n      y.s = 1;\r\n      q = div(x, y, 0, 3);\r\n      y.s = s;\r\n      q.s *= s;\r\n    } else {\r\n      q = div(x, y, 0, MODULO_MODE);\r\n    }\r\n\r\n    y = x.minus(q.times(y));\r\n\r\n    // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n    if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n    return y;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n * 0 = 0\r\n   *  n * N = N\r\n   *  n * I = I\r\n   *  0 * n = 0\r\n   *  0 * 0 = 0\r\n   *  0 * N = N\r\n   *  0 * I = N\r\n   *  N * n = N\r\n   *  N * 0 = N\r\n   *  N * N = N\r\n   *  N * I = N\r\n   *  I * n = I\r\n   *  I * 0 = N\r\n   *  I * N = N\r\n   *  I * I = I\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n   * of BigNumber(y, b).\r\n   */\r\n  P.multipliedBy = P.times = function (y, b) {\r\n    var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n      base, sqrtBase,\r\n      x = this,\r\n      xc = x.c,\r\n      yc = (y = new BigNumber(y, b)).c;\r\n\r\n    // Either NaN, ±Infinity or ±0?\r\n    if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n      // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n      if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n        y.c = y.e = y.s = null;\r\n      } else {\r\n        y.s *= x.s;\r\n\r\n        // Return ±Infinity if either is ±Infinity.\r\n        if (!xc || !yc) {\r\n          y.c = y.e = null;\r\n\r\n        // Return ±0 if either is ±0.\r\n        } else {\r\n          y.c = [0];\r\n          y.e = 0;\r\n        }\r\n      }\r\n\r\n      return y;\r\n    }\r\n\r\n    e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n    y.s *= x.s;\r\n    xcL = xc.length;\r\n    ycL = yc.length;\r\n\r\n    // Ensure xc points to longer array and xcL to its length.\r\n    if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\r\n\r\n    // Initialise the result array with zeros.\r\n    for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n    base = BASE;\r\n    sqrtBase = SQRT_BASE;\r\n\r\n    for (i = ycL; --i >= 0;) {\r\n      c = 0;\r\n      ylo = yc[i] % sqrtBase;\r\n      yhi = yc[i] / sqrtBase | 0;\r\n\r\n      for (k = xcL, j = i + k; j > i;) {\r\n        xlo = xc[--k] % sqrtBase;\r\n        xhi = xc[k] / sqrtBase | 0;\r\n        m = yhi * xlo + xhi * ylo;\r\n        xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n        c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n        zc[j--] = xlo % base;\r\n      }\r\n\r\n      zc[j] = c;\r\n    }\r\n\r\n    if (c) {\r\n      ++e;\r\n    } else {\r\n      zc.splice(0, 1);\r\n    }\r\n\r\n    return normalise(y, zc, e);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n   * i.e. multiplied by -1.\r\n   */\r\n  P.negated = function () {\r\n    var x = new BigNumber(this);\r\n    x.s = -x.s || null;\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n + 0 = n\r\n   *  n + N = N\r\n   *  n + I = I\r\n   *  0 + n = n\r\n   *  0 + 0 = 0\r\n   *  0 + N = N\r\n   *  0 + I = I\r\n   *  N + n = N\r\n   *  N + 0 = N\r\n   *  N + N = N\r\n   *  N + I = N\r\n   *  I + n = I\r\n   *  I + 0 = I\r\n   *  I + N = N\r\n   *  I + I = I\r\n   *\r\n   * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n   * BigNumber(y, b).\r\n   */\r\n  P.plus = function (y, b) {\r\n    var t,\r\n      x = this,\r\n      a = x.s;\r\n\r\n    y = new BigNumber(y, b);\r\n    b = y.s;\r\n\r\n    // Either NaN?\r\n    if (!a || !b) return new BigNumber(NaN);\r\n\r\n    // Signs differ?\r\n     if (a != b) {\r\n      y.s = -b;\r\n      return x.minus(y);\r\n    }\r\n\r\n    var xe = x.e / LOG_BASE,\r\n      ye = y.e / LOG_BASE,\r\n      xc = x.c,\r\n      yc = y.c;\r\n\r\n    if (!xe || !ye) {\r\n\r\n      // Return ±Infinity if either ±Infinity.\r\n      if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n      // Either zero?\r\n      // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n      if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n    }\r\n\r\n    xe = bitFloor(xe);\r\n    ye = bitFloor(ye);\r\n    xc = xc.slice();\r\n\r\n    // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n    if (a = xe - ye) {\r\n      if (a > 0) {\r\n        ye = xe;\r\n        t = yc;\r\n      } else {\r\n        a = -a;\r\n        t = xc;\r\n      }\r\n\r\n      t.reverse();\r\n      for (; a--; t.push(0));\r\n      t.reverse();\r\n    }\r\n\r\n    a = xc.length;\r\n    b = yc.length;\r\n\r\n    // Point xc to the longer array, and b to the shorter length.\r\n    if (a - b < 0) t = yc, yc = xc, xc = t, b = a;\r\n\r\n    // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n    for (a = 0; b;) {\r\n      a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n      xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n    }\r\n\r\n    if (a) {\r\n      xc = [a].concat(xc);\r\n      ++ye;\r\n    }\r\n\r\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n    // ye = MAX_EXP + 1 possible\r\n    return normalise(y, xc, ye);\r\n  };\r\n\r\n\r\n  /*\r\n   * If sd is undefined or null or true or false, return the number of significant digits of\r\n   * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n   * If sd is true include integer-part trailing zeros in the count.\r\n   *\r\n   * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n   * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n   * ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n   *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n   */\r\n  P.precision = P.sd = function (sd, rm) {\r\n    var c, n, v,\r\n      x = this;\r\n\r\n    if (sd != null && sd !== !!sd) {\r\n      intCheck(sd, 1, MAX);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      return round(new BigNumber(x), sd, rm);\r\n    }\r\n\r\n    if (!(c = x.c)) return null;\r\n    v = c.length - 1;\r\n    n = v * LOG_BASE + 1;\r\n\r\n    if (v = c[v]) {\r\n\r\n      // Subtract the number of trailing zeros of the last element.\r\n      for (; v % 10 == 0; v /= 10, n--);\r\n\r\n      // Add the number of digits of the first element.\r\n      for (v = c[0]; v >= 10; v /= 10, n++);\r\n    }\r\n\r\n    if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n    return n;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n   * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n   *\r\n   * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n   */\r\n  P.shiftedBy = function (k) {\r\n    intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n    return this.times('1e' + k);\r\n  };\r\n\r\n\r\n  /*\r\n   *  sqrt(-n) =  N\r\n   *  sqrt(N) =  N\r\n   *  sqrt(-I) =  N\r\n   *  sqrt(I) =  I\r\n   *  sqrt(0) =  0\r\n   *  sqrt(-0) = -0\r\n   *\r\n   * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n   * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n   */\r\n  P.squareRoot = P.sqrt = function () {\r\n    var m, n, r, rep, t,\r\n      x = this,\r\n      c = x.c,\r\n      s = x.s,\r\n      e = x.e,\r\n      dp = DECIMAL_PLACES + 4,\r\n      half = new BigNumber('0.5');\r\n\r\n    // Negative/NaN/Infinity/zero?\r\n    if (s !== 1 || !c || !c[0]) {\r\n      return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n    }\r\n\r\n    // Initial estimate.\r\n    s = Math.sqrt(+x);\r\n\r\n    // Math.sqrt underflow/overflow?\r\n    // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n    if (s == 0 || s == 1 / 0) {\r\n      n = coeffToString(c);\r\n      if ((n.length + e) % 2 == 0) n += '0';\r\n      s = Math.sqrt(n);\r\n      e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n      if (s == 1 / 0) {\r\n        n = '1e' + e;\r\n      } else {\r\n        n = s.toExponential();\r\n        n = n.slice(0, n.indexOf('e') + 1) + e;\r\n      }\r\n\r\n      r = new BigNumber(n);\r\n    } else {\r\n      r = new BigNumber(s + '');\r\n    }\r\n\r\n    // Check for zero.\r\n    // r could be zero if MIN_EXP is changed after the this value was created.\r\n    // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n    // coeffToString to throw.\r\n    if (r.c[0]) {\r\n      e = r.e;\r\n      s = e + dp;\r\n      if (s < 3) s = 0;\r\n\r\n      // Newton-Raphson iteration.\r\n      for (; ;) {\r\n        t = r;\r\n        r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n        if (coeffToString(t.c  ).slice(0, s) === (n =\r\n           coeffToString(r.c)).slice(0, s)) {\r\n\r\n          // The exponent of r may here be one less than the final result exponent,\r\n          // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n          // are indexed correctly.\r\n          if (r.e < e) --s;\r\n          n = n.slice(s - 3, s + 1);\r\n\r\n          // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n          // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n          // iteration.\r\n          if (n == '9999' || !rep && n == '4999') {\r\n\r\n            // On the first iteration only, check to see if rounding up gives the\r\n            // exact result as the nines may infinitely repeat.\r\n            if (!rep) {\r\n              round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n              if (t.times(t).eq(x)) {\r\n                r = t;\r\n                break;\r\n              }\r\n            }\r\n\r\n            dp += 4;\r\n            s += 4;\r\n            rep = 1;\r\n          } else {\r\n\r\n            // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n            // result. If not, then there are further digits and m will be truthy.\r\n            if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n              // Truncate to the first rounding digit.\r\n              round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n              m = !r.times(r).eq(x);\r\n            }\r\n\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in exponential notation and\r\n   * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */\r\n  P.toExponential = function (dp, rm) {\r\n    if (dp != null) {\r\n      intCheck(dp, 0, MAX);\r\n      dp++;\r\n    }\r\n    return format(this, dp, rm, 1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n   * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n   *\r\n   * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n   * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */\r\n  P.toFixed = function (dp, rm) {\r\n    if (dp != null) {\r\n      intCheck(dp, 0, MAX);\r\n      dp = dp + this.e + 1;\r\n    }\r\n    return format(this, dp, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n   * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n   * of the FORMAT object (see BigNumber.set).\r\n   *\r\n   * FORMAT = {\r\n   *      decimalSeparator : '.',\r\n   *      groupSeparator : ',',\r\n   *      groupSize : 3,\r\n   *      secondaryGroupSize : 0,\r\n   *      fractionGroupSeparator : '\\xA0',    // non-breaking space\r\n   *      fractionGroupSize : 0\r\n   * };\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n   */\r\n  P.toFormat = function (dp, rm) {\r\n    var str = this.toFixed(dp, rm);\r\n\r\n    if (this.c) {\r\n      var i,\r\n        arr = str.split('.'),\r\n        g1 = +FORMAT.groupSize,\r\n        g2 = +FORMAT.secondaryGroupSize,\r\n        groupSeparator = FORMAT.groupSeparator,\r\n        intPart = arr[0],\r\n        fractionPart = arr[1],\r\n        isNeg = this.s < 0,\r\n        intDigits = isNeg ? intPart.slice(1) : intPart,\r\n        len = intDigits.length;\r\n\r\n      if (g2) i = g1, g1 = g2, g2 = i, len -= i;\r\n\r\n      if (g1 > 0 && len > 0) {\r\n        i = len % g1 || g1;\r\n        intPart = intDigits.substr(0, i);\r\n\r\n        for (; i < len; i += g1) {\r\n          intPart += groupSeparator + intDigits.substr(i, g1);\r\n        }\r\n\r\n        if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n        if (isNeg) intPart = '-' + intPart;\r\n      }\r\n\r\n      str = fractionPart\r\n       ? intPart + FORMAT.decimalSeparator + ((g2 = +FORMAT.fractionGroupSize)\r\n        ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n         '$&' + FORMAT.fractionGroupSeparator)\r\n        : fractionPart)\r\n       : intPart;\r\n    }\r\n\r\n    return str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string array representing the value of this BigNumber as a simple fraction with\r\n   * an integer numerator and an integer denominator. The denominator will be a positive\r\n   * non-zero value less than or equal to the specified maximum denominator. If a maximum\r\n   * denominator is not specified, the denominator will be the lowest value necessary to\r\n   * represent the number exactly.\r\n   *\r\n   * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n   *\r\n   * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n   */\r\n  P.toFraction = function (md) {\r\n    var arr, d, d0, d1, d2, e, exp, n, n0, n1, q, s,\r\n      x = this,\r\n      xc = x.c;\r\n\r\n    if (md != null) {\r\n      n = new BigNumber(md);\r\n\r\n      // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n      if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n        throw Error\r\n          (bignumberError + 'Argument ' +\r\n            (n.isInteger() ? 'out of range: ' : 'not an integer: ') + md);\r\n      }\r\n    }\r\n\r\n    if (!xc) return x.toString();\r\n\r\n    d = new BigNumber(ONE);\r\n    n1 = d0 = new BigNumber(ONE);\r\n    d1 = n0 = new BigNumber(ONE);\r\n    s = coeffToString(xc);\r\n\r\n    // Determine initial denominator.\r\n    // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n    e = d.e = s.length - x.e - 1;\r\n    d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n    md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n    exp = MAX_EXP;\r\n    MAX_EXP = 1 / 0;\r\n    n = new BigNumber(s);\r\n\r\n    // n0 = d1 = 0\r\n    n0.c[0] = 0;\r\n\r\n    for (; ;)  {\r\n      q = div(n, d, 0, 1);\r\n      d2 = d0.plus(q.times(d1));\r\n      if (d2.comparedTo(md) == 1) break;\r\n      d0 = d1;\r\n      d1 = d2;\r\n      n1 = n0.plus(q.times(d2 = n1));\r\n      n0 = d2;\r\n      d = n.minus(q.times(d2 = d));\r\n      n = d2;\r\n    }\r\n\r\n    d2 = div(md.minus(d0), d1, 0, 1);\r\n    n0 = n0.plus(d2.times(n1));\r\n    d0 = d0.plus(d2.times(d1));\r\n    n0.s = n1.s = x.s;\r\n    e *= 2;\r\n\r\n    // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n    arr = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n       div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1\r\n        ? [n1.toString(), d1.toString()]\r\n        : [n0.toString(), d0.toString()];\r\n\r\n    MAX_EXP = exp;\r\n    return arr;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the value of this BigNumber converted to a number primitive.\r\n   */\r\n  P.toNumber = function () {\r\n    return +this;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n   * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n   * necessary to represent the integer part of the value in fixed-point notation, then use\r\n   * exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n   */\r\n  P.toPrecision = function (sd, rm) {\r\n    if (sd != null) intCheck(sd, 1, MAX);\r\n    return format(this, sd, rm, 2);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n   * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n   * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n   * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n   * TO_EXP_NEG, return exponential notation.\r\n   *\r\n   * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n   *\r\n   * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n   */\r\n  P.toString = function (b) {\r\n    var str,\r\n      n = this,\r\n      s = n.s,\r\n      e = n.e;\r\n\r\n    // Infinity or NaN?\r\n    if (e === null) {\r\n\r\n      if (s) {\r\n        str = 'Infinity';\r\n        if (s < 0) str = '-' + str;\r\n      } else {\r\n        str = 'NaN';\r\n      }\r\n    } else {\r\n      str = coeffToString(n.c);\r\n\r\n      if (b == null) {\r\n        str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n         ? toExponential(str, e)\r\n         : toFixedPoint(str, e, '0');\r\n      } else {\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n        str = convertBase(toFixedPoint(str, e, '0'), 10, b, s, true);\r\n      }\r\n\r\n      if (s < 0 && n.c[0]) str = '-' + str;\r\n    }\r\n\r\n    return str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return as toString, but do not accept a base argument, and include the minus sign for\r\n   * negative zero.\r\n   */\r\n  P.valueOf = P.toJSON = function () {\r\n    var str,\r\n      n = this,\r\n      e = n.e;\r\n\r\n    if (e === null) return n.toString();\r\n\r\n    str = coeffToString(n.c);\r\n\r\n    str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n      ? toExponential(str, e)\r\n      : toFixedPoint(str, e, '0');\r\n\r\n    return n.s < 0 ? '-' + str : str;\r\n  };\r\n\r\n\r\n  P._isBigNumber = true;\r\n\r\n  if (configObject != null) BigNumber.set(configObject);\r\n\r\n  return BigNumber;\r\n}\r\n\r\n\r\n// PRIVATE HELPER FUNCTIONS\r\n\r\n\r\nfunction bitFloor(n) {\r\n  var i = n | 0;\r\n  return n > 0 || n === i ? i : i - 1;\r\n}\r\n\r\n\r\n// Return a coefficient array as a string of base 10 digits.\r\nfunction coeffToString(a) {\r\n  var s, z,\r\n    i = 1,\r\n    j = a.length,\r\n    r = a[0] + '';\r\n\r\n  for (; i < j;) {\r\n    s = a[i++] + '';\r\n    z = LOG_BASE - s.length;\r\n    for (; z--; s = '0' + s);\r\n    r += s;\r\n  }\r\n\r\n  // Determine trailing zeros.\r\n  for (j = r.length; r.charCodeAt(--j) === 48;);\r\n  return r.slice(0, j + 1 || 1);\r\n}\r\n\r\n\r\n// Compare the value of BigNumbers x and y.\r\nfunction compare(x, y) {\r\n  var a, b,\r\n    xc = x.c,\r\n    yc = y.c,\r\n    i = x.s,\r\n    j = y.s,\r\n    k = x.e,\r\n    l = y.e;\r\n\r\n  // Either NaN?\r\n  if (!i || !j) return null;\r\n\r\n  a = xc && !xc[0];\r\n  b = yc && !yc[0];\r\n\r\n  // Either zero?\r\n  if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n  // Signs differ?\r\n  if (i != j) return i;\r\n\r\n  a = i < 0;\r\n  b = k == l;\r\n\r\n  // Either Infinity?\r\n  if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n  // Compare exponents.\r\n  if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n  j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n  // Compare digit by digit.\r\n  for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n  // Compare lengths.\r\n  return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n}\r\n\r\n\r\n/*\r\n * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n */\r\nfunction intCheck(n, min, max, name) {\r\n  if (n < min || n > max || n !== (n < 0 ? mathceil(n) : mathfloor(n))) {\r\n    throw Error\r\n     (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n       ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n       : ' not a primitive number: ') + n);\r\n  }\r\n}\r\n\r\n\r\nfunction isArray(obj) {\r\n  return Object.prototype.toString.call(obj) == '[object Array]';\r\n}\r\n\r\n\r\n// Assumes finite n.\r\nfunction isOdd(n) {\r\n  var k = n.c.length - 1;\r\n  return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n}\r\n\r\n\r\nfunction toExponential(str, e) {\r\n  return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n   (e < 0 ? 'e' : 'e+') + e;\r\n}\r\n\r\n\r\nfunction toFixedPoint(str, e, z) {\r\n  var len, zs;\r\n\r\n  // Negative exponent?\r\n  if (e < 0) {\r\n\r\n    // Prepend zeros.\r\n    for (zs = z + '.'; ++e; zs += z);\r\n    str = zs + str;\r\n\r\n  // Positive exponent\r\n  } else {\r\n    len = str.length;\r\n\r\n    // Append zeros.\r\n    if (++e > len) {\r\n      for (zs = z, e -= len; --e; zs += z);\r\n      str += zs;\r\n    } else if (e < len) {\r\n      str = str.slice(0, e) + '.' + str.slice(e);\r\n    }\r\n  }\r\n\r\n  return str;\r\n}\r\n\r\n\r\n// EXPORTS\r\n\r\n\r\nexport var BigNumber = clone();\r\n\r\nexport default BigNumber;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}