{"ast":null,"code":"/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file subscription.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\n\"use strict\";\n\nvar _ = require('underscore');\nvar errors = require('web3-core-helpers').errors;\nvar EventEmitter = require('eventemitter3');\nfunction Subscription(options) {\n  EventEmitter.call(this);\n  this.id = null;\n  this.callback = _.identity;\n  this.arguments = null;\n  this._reconnectIntervalId = null;\n  this.options = {\n    subscription: options.subscription,\n    type: options.type,\n    requestManager: options.requestManager\n  };\n}\n\n// INHERIT\nSubscription.prototype = Object.create(EventEmitter.prototype);\nSubscription.prototype.constructor = Subscription;\n\n/**\n * Should be used to extract callback from array of arguments. Modifies input param\n *\n * @method extractCallback\n * @param {Array} arguments\n * @return {Function|Null} callback, if exists\n */\n\nSubscription.prototype._extractCallback = function (args) {\n  if (_.isFunction(args[args.length - 1])) {\n    return args.pop(); // modify the args array!\n  }\n};\n\n/**\n * Should be called to check if the number of arguments is correct\n *\n * @method validateArgs\n * @param {Array} arguments\n * @throws {Error} if it is not\n */\n\nSubscription.prototype._validateArgs = function (args) {\n  var subscription = this.options.subscription;\n  if (!subscription) subscription = {};\n  if (!subscription.params) subscription.params = 0;\n  if (args.length !== subscription.params) {\n    throw errors.InvalidNumberOfParams(args.length, subscription.params + 1, args[0]);\n  }\n};\n\n/**\n * Should be called to format input args of method\n *\n * @method formatInput\n * @param {Array}\n * @return {Array}\n */\n\nSubscription.prototype._formatInput = function (args) {\n  var subscription = this.options.subscription;\n  if (!subscription) {\n    return args;\n  }\n  if (!subscription.inputFormatter) {\n    return args;\n  }\n  var formattedArgs = subscription.inputFormatter.map(function (formatter, index) {\n    return formatter ? formatter(args[index]) : args[index];\n  });\n  return formattedArgs;\n};\n\n/**\n * Should be called to format output(result) of method\n *\n * @method formatOutput\n * @param {Object}\n * @return {Object}\n */\n\nSubscription.prototype._formatOutput = function (result) {\n  var subscription = this.options.subscription;\n  return subscription && subscription.outputFormatter && result ? subscription.outputFormatter(result) : result;\n};\n\n/**\n * Should create payload from given input args\n *\n * @method toPayload\n * @param {Array} args\n * @return {Object}\n */\nSubscription.prototype._toPayload = function (args) {\n  var params = [];\n  this.callback = this._extractCallback(args) || _.identity;\n  if (!this.subscriptionMethod) {\n    this.subscriptionMethod = args.shift();\n\n    // replace subscription with given name\n    if (this.options.subscription.subscriptionName) {\n      this.subscriptionMethod = this.options.subscription.subscriptionName;\n    }\n  }\n  if (!this.arguments) {\n    this.arguments = this._formatInput(args);\n    this._validateArgs(this.arguments);\n    args = []; // make empty after validation\n  }\n\n  // re-add subscriptionName\n  params.push(this.subscriptionMethod);\n  params = params.concat(this.arguments);\n  if (args.length) {\n    throw new Error('Only a callback is allowed as parameter on an already instantiated subscription.');\n  }\n  return {\n    method: this.options.type + '_subscribe',\n    params: params\n  };\n};\n\n/**\n * Unsubscribes and clears callbacks\n *\n * @method unsubscribe\n * @return {Object}\n */\nSubscription.prototype.unsubscribe = function (callback) {\n  this.options.requestManager.removeSubscription(this.id, callback);\n  this.id = null;\n  this.removeAllListeners();\n  clearInterval(this._reconnectIntervalId);\n};\n\n/**\n * Subscribes and watches for changes\n *\n * @method subscribe\n * @param {String} subscription the subscription\n * @param {Object} options the options object with address topics and fromBlock\n * @return {Object}\n */\nSubscription.prototype.subscribe = function () {\n  var _this = this;\n  var args = Array.prototype.slice.call(arguments);\n  var payload = this._toPayload(args);\n  if (!payload) {\n    return this;\n  }\n  if (!this.options.requestManager.provider) {\n    var err1 = new Error('No provider set.');\n    this.callback(err1, null, this);\n    this.emit('error', err1);\n    return this;\n  }\n\n  // throw error, if provider doesnt support subscriptions\n  if (!this.options.requestManager.provider.on) {\n    var err2 = new Error('The current provider doesn\\'t support subscriptions: ' + this.options.requestManager.provider.constructor.name);\n    this.callback(err2, null, this);\n    this.emit('error', err2);\n    return this;\n  }\n\n  // if id is there unsubscribe first\n  if (this.id) {\n    this.unsubscribe();\n  }\n\n  // store the params in the options object\n  this.options.params = payload.params[1];\n\n  // get past logs, if fromBlock is available\n  if (payload.params[0] === 'logs' && _.isObject(payload.params[1]) && payload.params[1].hasOwnProperty('fromBlock') && isFinite(payload.params[1].fromBlock)) {\n    // send the subscription request\n    this.options.requestManager.send({\n      method: 'eth_getLogs',\n      params: [payload.params[1]]\n    }, function (err, logs) {\n      if (!err) {\n        logs.forEach(function (log) {\n          var output = _this._formatOutput(log);\n          _this.callback(null, output, _this);\n          _this.emit('data', output);\n        });\n\n        // TODO subscribe here? after the past logs?\n      } else {\n        _this.callback(err, null, _this);\n        _this.emit('error', err);\n      }\n    });\n  }\n\n  // create subscription\n  // TODO move to separate function? so that past logs can go first?\n\n  if (typeof payload.params[1] === 'object') delete payload.params[1].fromBlock;\n  this.options.requestManager.send(payload, function (err, result) {\n    if (!err && result) {\n      _this.id = result;\n\n      // call callback on notifications\n      _this.options.requestManager.addSubscription(_this.id, payload.params[0], _this.options.type, function (err, result) {\n        if (!err) {\n          if (!_.isArray(result)) {\n            result = [result];\n          }\n          result.forEach(function (resultItem) {\n            var output = _this._formatOutput(resultItem);\n            if (_.isFunction(_this.options.subscription.subscriptionHandler)) {\n              return _this.options.subscription.subscriptionHandler.call(_this, output);\n            } else {\n              _this.emit('data', output);\n            }\n\n            // call the callback, last so that unsubscribe there won't affect the emit above\n            _this.callback(null, output, _this);\n          });\n        } else {\n          // unsubscribe, but keep listeners\n          _this.options.requestManager.removeSubscription(_this.id);\n\n          // re-subscribe, if connection fails\n          if (_this.options.requestManager.provider.once) {\n            _this._reconnectIntervalId = setInterval(function () {\n              // TODO check if that makes sense!\n              if (_this.options.requestManager.provider.reconnect) {\n                _this.options.requestManager.provider.reconnect();\n              }\n            }, 500);\n            _this.options.requestManager.provider.once('connect', function () {\n              clearInterval(_this._reconnectIntervalId);\n              _this.subscribe(_this.callback);\n            });\n          }\n          _this.emit('error', err);\n\n          // call the callback, last so that unsubscribe there won't affect the emit above\n          _this.callback(err, null, _this);\n        }\n      });\n    } else {\n      _this.callback(err, null, _this);\n      _this.emit('error', err);\n    }\n  });\n\n  // return an object to cancel the subscription\n  return this;\n};\nmodule.exports = Subscription;","map":{"version":3,"names":["_","require","errors","EventEmitter","Subscription","options","call","id","callback","identity","arguments","_reconnectIntervalId","subscription","type","requestManager","prototype","Object","create","constructor","_extractCallback","args","isFunction","length","pop","_validateArgs","params","InvalidNumberOfParams","_formatInput","inputFormatter","formattedArgs","map","formatter","index","_formatOutput","result","outputFormatter","_toPayload","subscriptionMethod","shift","subscriptionName","push","concat","Error","method","unsubscribe","removeSubscription","removeAllListeners","clearInterval","subscribe","_this","Array","slice","payload","provider","err1","emit","on","err2","name","isObject","hasOwnProperty","isFinite","fromBlock","send","err","logs","forEach","log","output","addSubscription","isArray","resultItem","subscriptionHandler","once","setInterval","reconnect","module","exports"],"sources":["/home/peilunnn/Downloads/Internship Projects/gcp-dapp-auction/client/node_modules/truffle-contract/node_modules/web3-core-subscriptions/src/subscription.js"],"sourcesContent":["/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file subscription.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2017\n */\n\n\"use strict\";\n\nvar _ = require('underscore');\nvar errors = require('web3-core-helpers').errors;\nvar EventEmitter = require('eventemitter3');\n\nfunction Subscription(options) {\n    EventEmitter.call(this);\n\n    this.id = null;\n    this.callback = _.identity;\n    this.arguments = null;\n    this._reconnectIntervalId = null;\n\n    this.options = {\n        subscription: options.subscription,\n        type: options.type,\n        requestManager: options.requestManager\n    };\n}\n\n// INHERIT\nSubscription.prototype = Object.create(EventEmitter.prototype);\nSubscription.prototype.constructor = Subscription;\n\n\n/**\n * Should be used to extract callback from array of arguments. Modifies input param\n *\n * @method extractCallback\n * @param {Array} arguments\n * @return {Function|Null} callback, if exists\n */\n\nSubscription.prototype._extractCallback = function (args) {\n    if (_.isFunction(args[args.length - 1])) {\n        return args.pop(); // modify the args array!\n    }\n};\n\n/**\n * Should be called to check if the number of arguments is correct\n *\n * @method validateArgs\n * @param {Array} arguments\n * @throws {Error} if it is not\n */\n\nSubscription.prototype._validateArgs = function (args) {\n    var subscription = this.options.subscription;\n\n    if(!subscription)\n        subscription = {};\n\n    if(!subscription.params)\n        subscription.params = 0;\n\n    if (args.length !== subscription.params) {\n        throw errors.InvalidNumberOfParams(args.length, subscription.params + 1, args[0]);\n    }\n};\n\n/**\n * Should be called to format input args of method\n *\n * @method formatInput\n * @param {Array}\n * @return {Array}\n */\n\nSubscription.prototype._formatInput = function (args) {\n    var subscription = this.options.subscription;\n\n    if (!subscription) {\n        return args;\n    }\n\n    if (!subscription.inputFormatter) {\n        return args;\n    }\n\n    var formattedArgs = subscription.inputFormatter.map(function (formatter, index) {\n        return formatter ? formatter(args[index]) : args[index];\n    });\n\n    return formattedArgs;\n};\n\n/**\n * Should be called to format output(result) of method\n *\n * @method formatOutput\n * @param {Object}\n * @return {Object}\n */\n\nSubscription.prototype._formatOutput = function (result) {\n    var subscription = this.options.subscription;\n\n    return (subscription && subscription.outputFormatter && result) ? subscription.outputFormatter(result) : result;\n};\n\n/**\n * Should create payload from given input args\n *\n * @method toPayload\n * @param {Array} args\n * @return {Object}\n */\nSubscription.prototype._toPayload = function (args) {\n    var params = [];\n    this.callback = this._extractCallback(args) || _.identity;\n\n    if (!this.subscriptionMethod) {\n        this.subscriptionMethod = args.shift();\n\n        // replace subscription with given name\n        if (this.options.subscription.subscriptionName) {\n            this.subscriptionMethod = this.options.subscription.subscriptionName;\n        }\n    }\n\n    if (!this.arguments) {\n        this.arguments = this._formatInput(args);\n        this._validateArgs(this.arguments);\n        args = []; // make empty after validation\n\n    }\n\n    // re-add subscriptionName\n    params.push(this.subscriptionMethod);\n    params = params.concat(this.arguments);\n\n\n    if (args.length) {\n        throw new Error('Only a callback is allowed as parameter on an already instantiated subscription.');\n    }\n\n    return {\n        method: this.options.type + '_subscribe',\n        params: params\n    };\n};\n\n/**\n * Unsubscribes and clears callbacks\n *\n * @method unsubscribe\n * @return {Object}\n */\nSubscription.prototype.unsubscribe = function(callback) {\n    this.options.requestManager.removeSubscription(this.id, callback);\n    this.id = null;\n    this.removeAllListeners();\n    clearInterval(this._reconnectIntervalId);\n};\n\n/**\n * Subscribes and watches for changes\n *\n * @method subscribe\n * @param {String} subscription the subscription\n * @param {Object} options the options object with address topics and fromBlock\n * @return {Object}\n */\nSubscription.prototype.subscribe = function() {\n    var _this = this;\n    var args = Array.prototype.slice.call(arguments);\n    var payload = this._toPayload(args);\n\n    if(!payload) {\n        return this;\n    }\n\n    if(!this.options.requestManager.provider) {\n        var err1 = new Error('No provider set.');\n        this.callback(err1, null, this);\n        this.emit('error', err1);\n        return this;\n    }\n\n    // throw error, if provider doesnt support subscriptions\n    if(!this.options.requestManager.provider.on) {\n        var err2 = new Error('The current provider doesn\\'t support subscriptions: '+ this.options.requestManager.provider.constructor.name);\n        this.callback(err2, null, this);\n        this.emit('error', err2);\n        return this;\n    }\n\n    // if id is there unsubscribe first\n    if (this.id) {\n        this.unsubscribe();\n    }\n\n    // store the params in the options object\n    this.options.params = payload.params[1];\n\n    // get past logs, if fromBlock is available\n    if(payload.params[0] === 'logs' && _.isObject(payload.params[1]) && payload.params[1].hasOwnProperty('fromBlock') && isFinite(payload.params[1].fromBlock)) {\n        // send the subscription request\n        this.options.requestManager.send({\n            method: 'eth_getLogs',\n            params: [payload.params[1]]\n        }, function (err, logs) {\n            if(!err) {\n                logs.forEach(function(log){\n                    var output = _this._formatOutput(log);\n                    _this.callback(null, output, _this);\n                    _this.emit('data', output);\n                });\n\n                // TODO subscribe here? after the past logs?\n\n            } else {\n                _this.callback(err, null, _this);\n                _this.emit('error', err);\n            }\n        });\n    }\n\n    // create subscription\n    // TODO move to separate function? so that past logs can go first?\n\n    if(typeof payload.params[1] === 'object')\n        delete payload.params[1].fromBlock;\n\n    this.options.requestManager.send(payload, function (err, result) {\n        if(!err && result) {\n            _this.id = result;\n\n            // call callback on notifications\n            _this.options.requestManager.addSubscription(_this.id, payload.params[0] , _this.options.type, function(err, result) {\n\n                if (!err) {\n                    if (!_.isArray(result)) {\n                        result = [result];\n                    }\n\n                    result.forEach(function(resultItem) {\n                        var output = _this._formatOutput(resultItem);\n\n                        if (_.isFunction(_this.options.subscription.subscriptionHandler)) {\n                            return _this.options.subscription.subscriptionHandler.call(_this, output);\n                        } else {\n                            _this.emit('data', output);\n                        }\n\n                        // call the callback, last so that unsubscribe there won't affect the emit above\n                        _this.callback(null, output, _this);\n                    });\n                } else {\n                    // unsubscribe, but keep listeners\n                    _this.options.requestManager.removeSubscription(_this.id);\n\n                    // re-subscribe, if connection fails\n                    if(_this.options.requestManager.provider.once) {\n                        _this._reconnectIntervalId = setInterval(function () {\n                            // TODO check if that makes sense!\n                            if (_this.options.requestManager.provider.reconnect) {\n                                _this.options.requestManager.provider.reconnect();\n                            }\n                        }, 500);\n\n                        _this.options.requestManager.provider.once('connect', function () {\n                            clearInterval(_this._reconnectIntervalId);\n                            _this.subscribe(_this.callback);\n                        });\n                    }\n                    _this.emit('error', err);\n\n                     // call the callback, last so that unsubscribe there won't affect the emit above\n                    _this.callback(err, null, _this);\n                }\n            });\n        } else {\n          _this.callback(err, null, _this);\n          _this.emit('error', err);\n        }\n    });\n\n    // return an object to cancel the subscription\n    return this;\n};\n\nmodule.exports = Subscription;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}