{"ast":null,"code":"// The RLP format\n// Serialization and deserialization for the BytesTree type, under the following grammar:\n// | First byte | Meaning                                                                    |\n// | ---------- | -------------------------------------------------------------------------- |\n// | 0   to 127 | HEX(leaf)                                                                  |\n// | 128 to 183 | HEX(length_of_leaf + 128) + HEX(leaf)                                      |\n// | 184 to 191 | HEX(length_of_length_of_leaf + 128 + 55) + HEX(length_of_leaf) + HEX(leaf) |\n// | 192 to 247 | HEX(length_of_node + 192) + HEX(node)                                      |\n// | 248 to 255 | HEX(length_of_length_of_node + 128 + 55) + HEX(length_of_node) + HEX(node) |\n\nvar encode = function encode(tree) {\n  var padEven = function padEven(str) {\n    return str.length % 2 === 0 ? str : \"0\" + str;\n  };\n  var uint = function uint(num) {\n    return padEven(num.toString(16));\n  };\n  var length = function length(len, add) {\n    return len < 56 ? uint(add + len) : uint(add + uint(len).length / 2 + 55) + uint(len);\n  };\n  var dataTree = function dataTree(tree) {\n    if (typeof tree === \"string\") {\n      var hex = tree.slice(2);\n      var pre = hex.length != 2 || hex >= \"80\" ? length(hex.length / 2, 128) : \"\";\n      return pre + hex;\n    } else {\n      var _hex = tree.map(dataTree).join(\"\");\n      var _pre = length(_hex.length / 2, 192);\n      return _pre + _hex;\n    }\n  };\n  return \"0x\" + dataTree(tree);\n};\nvar decode = function decode(hex) {\n  var i = 2;\n  var parseTree = function parseTree() {\n    if (i >= hex.length) throw \"\";\n    var head = hex.slice(i, i + 2);\n    return head < \"80\" ? (i += 2, \"0x\" + head) : head < \"c0\" ? parseHex() : parseList();\n  };\n  var parseLength = function parseLength() {\n    var len = parseInt(hex.slice(i, i += 2), 16) % 64;\n    return len < 56 ? len : parseInt(hex.slice(i, i += (len - 55) * 2), 16);\n  };\n  var parseHex = function parseHex() {\n    var len = parseLength();\n    return \"0x\" + hex.slice(i, i += len * 2);\n  };\n  var parseList = function parseList() {\n    var lim = parseLength() * 2 + i;\n    var list = [];\n    while (i < lim) {\n      list.push(parseTree());\n    }\n    return list;\n  };\n  try {\n    return parseTree();\n  } catch (e) {\n    return [];\n  }\n};\nmodule.exports = {\n  encode: encode,\n  decode: decode\n};","map":{"version":3,"names":["encode","tree","padEven","str","length","uint","num","toString","len","add","dataTree","hex","slice","pre","_hex","map","join","_pre","decode","i","parseTree","head","parseHex","parseList","parseLength","parseInt","lim","list","push","e","module","exports"],"sources":["/home/peilunnn/Downloads/Internship Projects/gcp-dapp-auction/client/node_modules/truffle-contract/node_modules/web3-eth-accounts/node_modules/eth-lib/lib/rlp.js"],"sourcesContent":["// The RLP format\n// Serialization and deserialization for the BytesTree type, under the following grammar:\n// | First byte | Meaning                                                                    |\n// | ---------- | -------------------------------------------------------------------------- |\n// | 0   to 127 | HEX(leaf)                                                                  |\n// | 128 to 183 | HEX(length_of_leaf + 128) + HEX(leaf)                                      |\n// | 184 to 191 | HEX(length_of_length_of_leaf + 128 + 55) + HEX(length_of_leaf) + HEX(leaf) |\n// | 192 to 247 | HEX(length_of_node + 192) + HEX(node)                                      |\n// | 248 to 255 | HEX(length_of_length_of_node + 128 + 55) + HEX(length_of_node) + HEX(node) |\n\nvar encode = function encode(tree) {\n  var padEven = function padEven(str) {\n    return str.length % 2 === 0 ? str : \"0\" + str;\n  };\n\n  var uint = function uint(num) {\n    return padEven(num.toString(16));\n  };\n\n  var length = function length(len, add) {\n    return len < 56 ? uint(add + len) : uint(add + uint(len).length / 2 + 55) + uint(len);\n  };\n\n  var dataTree = function dataTree(tree) {\n    if (typeof tree === \"string\") {\n      var hex = tree.slice(2);\n      var pre = hex.length != 2 || hex >= \"80\" ? length(hex.length / 2, 128) : \"\";\n      return pre + hex;\n    } else {\n      var _hex = tree.map(dataTree).join(\"\");\n      var _pre = length(_hex.length / 2, 192);\n      return _pre + _hex;\n    }\n  };\n\n  return \"0x\" + dataTree(tree);\n};\n\nvar decode = function decode(hex) {\n  var i = 2;\n\n  var parseTree = function parseTree() {\n    if (i >= hex.length) throw \"\";\n    var head = hex.slice(i, i + 2);\n    return head < \"80\" ? (i += 2, \"0x\" + head) : head < \"c0\" ? parseHex() : parseList();\n  };\n\n  var parseLength = function parseLength() {\n    var len = parseInt(hex.slice(i, i += 2), 16) % 64;\n    return len < 56 ? len : parseInt(hex.slice(i, i += (len - 55) * 2), 16);\n  };\n\n  var parseHex = function parseHex() {\n    var len = parseLength();\n    return \"0x\" + hex.slice(i, i += len * 2);\n  };\n\n  var parseList = function parseList() {\n    var lim = parseLength() * 2 + i;\n    var list = [];\n    while (i < lim) {\n      list.push(parseTree());\n    }return list;\n  };\n\n  try {\n    return parseTree();\n  } catch (e) {\n    return [];\n  }\n};\n\nmodule.exports = { encode: encode, decode: decode };"],"mappings":"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"},"metadata":{},"sourceType":"script"}