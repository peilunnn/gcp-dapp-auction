{"ast":null,"code":"import axios from \"axios\";\nconst FormData = require(\"form-data\");\nconst {\n  storeDataToFile\n} = require(\"./ipfsHelper.js\");\nconst pinataEndpoint = \"https://api.pinata.cloud/pinning/pinFileToIPFS\";\n\n// We have to save the file and then use the file path for the read stream later since Pinata's API only accepts a read stream\nfunction saveFile(dataUrl) {\n  const filePath = \"/path/to/save/file.png\";\n  // Remove the data URL prefix\n  const base64Data = dataUrl.replace(/^data:image\\/png;base64,/, \"\");\n  const buffer = Buffer.from(base64Data, \"base64\");\n}\nconst pinImage = async (selectedFile, pinataApiKey, pinataSecretApiKey) => {\n  const form_data = new FormData();\n  try {\n    form_data.append(\"file\", selectedFile);\n    const request = {\n      method: \"post\",\n      url: pinataEndpoint,\n      maxContentLength: \"Infinity\",\n      headers: {\n        pinata_api_key: pinataApiKey,\n        pinata_secret_api_key: pinataSecretApiKey,\n        \"Content-Type\": `multipart/form-data; boundary=${form_data._boundary}`\n      },\n      data: form_data\n    };\n    const response = await axios(request);\n    await storeDataToFile(response.data);\n    console.log(\"Successfully pinned image, response added to JSON file\");\n  } catch (err) {\n    console.log(\"Error occurred while pinning NFT to IPFS: \", err);\n  }\n};\nexport default pinImage;","map":{"version":3,"names":["axios","FormData","require","storeDataToFile","pinataEndpoint","saveFile","dataUrl","filePath","base64Data","replace","buffer","Buffer","from","pinImage","selectedFile","pinataApiKey","pinataSecretApiKey","form_data","append","request","method","url","maxContentLength","headers","pinata_api_key","pinata_secret_api_key","_boundary","data","response","console","log","err"],"sources":["/home/peilunnn/Downloads/Internship Projects/gcp-dapp-auction/client/src/pinNFT.js"],"sourcesContent":["import axios from \"axios\";\nconst FormData = require(\"form-data\");\nconst { storeDataToFile } = require(\"./ipfsHelper.js\");\n\nconst pinataEndpoint = \"https://api.pinata.cloud/pinning/pinFileToIPFS\";\n\n// We have to save the file and then use the file path for the read stream later since Pinata's API only accepts a read stream\nfunction saveFile(dataUrl) {\n    const filePath = \"/path/to/save/file.png\";\n    // Remove the data URL prefix\n    const base64Data = dataUrl.replace(/^data:image\\/png;base64,/, \"\");\n    const buffer = Buffer.from(base64Data, \"base64\");\n}\n\nconst pinImage = async (selectedFile, pinataApiKey, pinataSecretApiKey) => {\n  const form_data = new FormData();\n  try {\n    form_data.append(\"file\", selectedFile);\n    const request = {\n      method: \"post\",\n      url: pinataEndpoint,\n      maxContentLength: \"Infinity\",\n      headers: {\n        pinata_api_key: pinataApiKey,\n        pinata_secret_api_key: pinataSecretApiKey,\n        \"Content-Type\": `multipart/form-data; boundary=${form_data._boundary}`,\n      },\n      data: form_data,\n    };\n    const response = await axios(request);\n    await storeDataToFile(response.data);\n    console.log(\"Successfully pinned image, response added to JSON file\");\n  } catch (err) {\n    console.log(\"Error occurred while pinning NFT to IPFS: \", err);\n  }\n};\n\nexport default pinImage;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,MAAMC,QAAQ,GAAGC,OAAO,CAAC,WAAW,CAAC;AACrC,MAAM;EAAEC;AAAgB,CAAC,GAAGD,OAAO,CAAC,iBAAiB,CAAC;AAEtD,MAAME,cAAc,GAAG,gDAAgD;;AAEvE;AACA,SAASC,QAAQ,CAACC,OAAO,EAAE;EACvB,MAAMC,QAAQ,GAAG,wBAAwB;EACzC;EACA,MAAMC,UAAU,GAAGF,OAAO,CAACG,OAAO,CAAC,0BAA0B,EAAE,EAAE,CAAC;EAClE,MAAMC,MAAM,GAAGC,MAAM,CAACC,IAAI,CAACJ,UAAU,EAAE,QAAQ,CAAC;AACpD;AAEA,MAAMK,QAAQ,GAAG,OAAOC,YAAY,EAAEC,YAAY,EAAEC,kBAAkB,KAAK;EACzE,MAAMC,SAAS,GAAG,IAAIhB,QAAQ,EAAE;EAChC,IAAI;IACFgB,SAAS,CAACC,MAAM,CAAC,MAAM,EAAEJ,YAAY,CAAC;IACtC,MAAMK,OAAO,GAAG;MACdC,MAAM,EAAE,MAAM;MACdC,GAAG,EAAEjB,cAAc;MACnBkB,gBAAgB,EAAE,UAAU;MAC5BC,OAAO,EAAE;QACPC,cAAc,EAAET,YAAY;QAC5BU,qBAAqB,EAAET,kBAAkB;QACzC,cAAc,EAAG,iCAAgCC,SAAS,CAACS,SAAU;MACvE,CAAC;MACDC,IAAI,EAAEV;IACR,CAAC;IACD,MAAMW,QAAQ,GAAG,MAAM5B,KAAK,CAACmB,OAAO,CAAC;IACrC,MAAMhB,eAAe,CAACyB,QAAQ,CAACD,IAAI,CAAC;IACpCE,OAAO,CAACC,GAAG,CAAC,wDAAwD,CAAC;EACvE,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZF,OAAO,CAACC,GAAG,CAAC,4CAA4C,EAAEC,GAAG,CAAC;EAChE;AACF,CAAC;AAED,eAAelB,QAAQ"},"metadata":{},"sourceType":"module"}