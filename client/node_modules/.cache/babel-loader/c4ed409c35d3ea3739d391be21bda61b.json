{"ast":null,"code":"export function getAuctionFactoryContract(web3, networkID) {\n  if (web3 === null || networkID === null) {\n    console.log(\"Unable to get AuctionFactory contract. web3 or networkID is null.\");\n    return;\n  }\n  const auctionFactoryJson = require(\"./contracts/AuctionFactory.json\");\n  if (auctionFactoryJson && auctionFactoryJson.networks[networkID] === undefined) {\n    console.log(\"Unable to get AuctionFactory contract. networkID is invalid.\");\n    return;\n  }\n  const auctionFactoryAddress = auctionFactoryJson.networks[networkID].address;\n  const auctionFactoryContract = new web3.eth.Contract(auctionFactoryJson.abi, auctionFactoryAddress);\n  return auctionFactoryContract;\n}\nexport async function getAuctions(web3, auctionFactoryContract, accounts) {\n  if (web3 === null || auctionFactoryContract === null || accounts == null || auctionFactoryContract === undefined) {\n    console.log(\"Unable to get auctions. web3 or auctionFactoryContract is null.\");\n    return [];\n  }\n  const auctionContractAddresses = await auctionFactoryContract.methods.getAuctions().call();\n  const auctionContractJson = require(\"./contracts/Auction.json\");\n  const mintNftContractJson = require(\"./contracts/MintNFT.json\");\n  const auctions = [];\n  for (let auctionContractAddress of auctionContractAddresses) {\n    const auctionContract = new web3.eth.Contract(auctionContractJson.abi, auctionContractAddress);\n    const nftId = parseInt(await auctionContract.methods.nftId().call());\n    const info = await auctionContract.methods.info().call({\n      from: accounts[0]\n    });\n    // console.log(\"Auction info\", info);\n    try {\n      const mintNftContractAddress = await auctionContract.methods.nft().call();\n      const mintNftContract = new web3.eth.Contract(mintNftContractJson.abi, mintNftContractAddress);\n      const nftMetadataUri = await mintNftContract.methods.tokenURI(nftId).call();\n      const nftMetadata = await fetch(nftMetadataUri);\n      const nftMetadataJson = await nftMetadata.json();\n      const auction = {\n        pinataImageUri: nftMetadataJson.image,\n        pinataMetadata: nftMetadataJson,\n        seller: info[0],\n        highestBidder: info[1],\n        startAt: parseInt(info[2]),\n        duration: parseInt(info[3]),\n        endAt: parseInt(info[4]),\n        increment: parseInt(info[5]),\n        highestBid: parseInt(info[6]),\n        nftId: parseInt(info[7]),\n        userBidAmount: parseInt(info[8]),\n        started: info[9],\n        ended: info[10],\n        nft: info[11],\n        auctionContract: auctionContract\n      };\n      // console.log(\"auction object\", auction);\n      auctions.push(auction);\n    } catch (e) {\n      console.log(\"Unable to get NFT for auction: \" + auctionContractAddress);\n      continue;\n    }\n  }\n  return auctions;\n}\nexport function displayInGwei(wei) {\n  return wei / 1000000000;\n}\nexport function displayInHours(seconds) {\n  // rounded to 2 decimal places\n  return Math.round(seconds / 60 / 60 * 100) / 100;\n}\nexport function displayTimestampInHumanReadable(timestamp) {\n  if (timestamp === 0) {\n    return \"Not Started\";\n  }\n  return new Date(timestamp * 1000).toLocaleString();\n}","map":{"version":3,"names":["getAuctionFactoryContract","web3","networkID","console","log","auctionFactoryJson","require","networks","undefined","auctionFactoryAddress","address","auctionFactoryContract","eth","Contract","abi","getAuctions","accounts","auctionContractAddresses","methods","call","auctionContractJson","mintNftContractJson","auctions","auctionContractAddress","auctionContract","nftId","parseInt","info","from","mintNftContractAddress","nft","mintNftContract","nftMetadataUri","tokenURI","nftMetadata","fetch","nftMetadataJson","json","auction","pinataImageUri","image","pinataMetadata","seller","highestBidder","startAt","duration","endAt","increment","highestBid","userBidAmount","started","ended","push","e","displayInGwei","wei","displayInHours","seconds","Math","round","displayTimestampInHumanReadable","timestamp","Date","toLocaleString"],"sources":["/home/peilunnn/Downloads/Internship Projects/gcp-dapp-auction/client/src/utils.js"],"sourcesContent":["export function getAuctionFactoryContract(web3, networkID) {\n  if (web3 === null || networkID === null) {\n    console.log(\n      \"Unable to get AuctionFactory contract. web3 or networkID is null.\"\n    );\n    return;\n  }\n\n  const auctionFactoryJson = require(\"./contracts/AuctionFactory.json\");\n  if (\n    auctionFactoryJson &&\n    auctionFactoryJson.networks[networkID] === undefined\n  ) {\n    console.log(\"Unable to get AuctionFactory contract. networkID is invalid.\");\n    return;\n  }\n  const auctionFactoryAddress = auctionFactoryJson.networks[networkID].address;\n  const auctionFactoryContract = new web3.eth.Contract(\n    auctionFactoryJson.abi,\n    auctionFactoryAddress\n  );\n  return auctionFactoryContract;\n}\n\nexport async function getAuctions(web3, auctionFactoryContract, accounts) {\n  if (\n    web3 === null ||\n    auctionFactoryContract === null ||\n    accounts == null ||\n    auctionFactoryContract === undefined\n  ) {\n    console.log(\n      \"Unable to get auctions. web3 or auctionFactoryContract is null.\"\n    );\n    return [];\n  }\n  const auctionContractAddresses = await auctionFactoryContract.methods\n    .getAuctions()\n    .call();\n  const auctionContractJson = require(\"./contracts/Auction.json\");\n  const mintNftContractJson = require(\"./contracts/MintNFT.json\");\n  const auctions = [];\n  for (let auctionContractAddress of auctionContractAddresses) {\n    const auctionContract = new web3.eth.Contract(\n      auctionContractJson.abi,\n      auctionContractAddress\n    );\n    const nftId = parseInt(await auctionContract.methods.nftId().call());\n    const info = await auctionContract.methods\n      .info()\n      .call({ from: accounts[0] });\n    // console.log(\"Auction info\", info);\n    try {\n      const mintNftContractAddress = await auctionContract.methods.nft().call();\n      const mintNftContract = new web3.eth.Contract(\n        mintNftContractJson.abi,\n        mintNftContractAddress\n      );\n      const nftMetadataUri = await mintNftContract.methods\n        .tokenURI(nftId)\n        .call();\n      const nftMetadata = await fetch(nftMetadataUri);\n      const nftMetadataJson = await nftMetadata.json();\n      const auction = {\n        pinataImageUri: nftMetadataJson.image,\n        pinataMetadata: nftMetadataJson,\n        seller: info[0],\n        highestBidder: info[1],\n        startAt: parseInt(info[2]),\n        duration: parseInt(info[3]),\n        endAt: parseInt(info[4]),\n        increment: parseInt(info[5]),\n        highestBid: parseInt(info[6]),\n        nftId: parseInt(info[7]),\n        userBidAmount: parseInt(info[8]),\n        started: info[9],\n        ended: info[10],\n        nft: info[11],\n        auctionContract: auctionContract,\n      };\n      // console.log(\"auction object\", auction);\n      auctions.push(auction);\n    } catch (e) {\n      console.log(\"Unable to get NFT for auction: \" + auctionContractAddress);\n      continue;\n    }\n  }\n  return auctions;\n}\n\nexport function displayInGwei(wei) {\n  return wei / 1000000000;\n}\n\nexport function displayInHours(seconds) {\n  // rounded to 2 decimal places\n  return Math.round((seconds / 60 / 60) * 100) / 100;\n}\n\nexport function displayTimestampInHumanReadable(timestamp) {\n  if (timestamp === 0) {\n    return \"Not Started\";\n  }\n  return new Date(timestamp * 1000).toLocaleString();\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}