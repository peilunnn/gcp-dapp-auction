{"ast":null,"code":"const crypto = require('crypto');\nconst MAX_VALUE = 0x7fffffff;\nconst DEFAULT_PROMISE_INTERVAL = 5000;\n/* eslint-disable camelcase */\n\nfunction checkAndInit(key, salt, N, r, p, dkLen, progressCallback) {\n  if (N === 0 || (N & N - 1) !== 0) throw Error('N must be > 0 and a power of 2');\n  if (N > MAX_VALUE / 128 / r) throw Error('Parameter N is too large');\n  if (r > MAX_VALUE / 128 / p) throw Error('Parameter r is too large');\n  let XY = Buffer.alloc(256 * r);\n  let V = Buffer.alloc(128 * r * N);\n\n  // pseudo global\n  let B32 = new Int32Array(16); // salsa20_8\n  let x = new Int32Array(16); // salsa20_8\n  let _X = Buffer.alloc(64); // blockmix_salsa8\n\n  // pseudo global\n  let B = crypto.pbkdf2Sync(key, salt, 1, p * 128 * r, 'sha256');\n  let tickCallback;\n  if (progressCallback) {\n    let totalOps = p * N * 2;\n    let currentOp = 0;\n    tickCallback = function () {\n      ++currentOp;\n\n      // send progress notifications once every 1,000 ops\n      if (currentOp % 1000 === 0) {\n        progressCallback({\n          current: currentOp,\n          total: totalOps,\n          percent: currentOp / totalOps * 100.0\n        });\n      }\n    };\n  }\n  return {\n    XY,\n    V,\n    B32,\n    x,\n    _X,\n    B,\n    tickCallback\n  };\n}\nasync function smix(B, Bi, r, N, V, XY, _X, B32, x, tickCallback, promiseInterval) {\n  promiseInterval = promiseInterval || DEFAULT_PROMISE_INTERVAL;\n  let Xi = 0;\n  let Yi = 128 * r;\n  let i;\n  B.copy(XY, Xi, Bi, Bi + Yi);\n  for (i = 0; i < N; i++) {\n    XY.copy(V, i * Yi, Xi, Xi + Yi);\n    if (i % promiseInterval === 0) {\n      await new Promise(resolve => setImmediate(resolve));\n    }\n    blockmix_salsa8(XY, Xi, Yi, r, _X, B32, x);\n    if (tickCallback) tickCallback();\n  }\n  for (i = 0; i < N; i++) {\n    let offset = Xi + (2 * r - 1) * 64;\n    let j = XY.readUInt32LE(offset) & N - 1;\n    blockxor(V, j * Yi, XY, Xi, Yi);\n    if (i % promiseInterval === 0) {\n      await new Promise(resolve => setImmediate(resolve));\n    }\n    blockmix_salsa8(XY, Xi, Yi, r, _X, B32, x);\n    if (tickCallback) tickCallback();\n  }\n  XY.copy(B, Bi, Xi, Xi + Yi);\n}\nfunction smixSync(B, Bi, r, N, V, XY, _X, B32, x, tickCallback) {\n  let Xi = 0;\n  let Yi = 128 * r;\n  let i;\n  B.copy(XY, Xi, Bi, Bi + Yi);\n  for (i = 0; i < N; i++) {\n    XY.copy(V, i * Yi, Xi, Xi + Yi);\n    blockmix_salsa8(XY, Xi, Yi, r, _X, B32, x);\n    if (tickCallback) tickCallback();\n  }\n  for (i = 0; i < N; i++) {\n    let offset = Xi + (2 * r - 1) * 64;\n    let j = XY.readUInt32LE(offset) & N - 1;\n    blockxor(V, j * Yi, XY, Xi, Yi);\n    blockmix_salsa8(XY, Xi, Yi, r, _X, B32, x);\n    if (tickCallback) tickCallback();\n  }\n  XY.copy(B, Bi, Xi, Xi + Yi);\n}\nfunction blockmix_salsa8(BY, Bi, Yi, r, _X, B32, x) {\n  let i;\n  arraycopy(BY, Bi + (2 * r - 1) * 64, _X, 0, 64);\n  for (i = 0; i < 2 * r; i++) {\n    blockxor(BY, i * 64, _X, 0, 64);\n    salsa20_8(_X, B32, x);\n    arraycopy(_X, 0, BY, Yi + i * 64, 64);\n  }\n  for (i = 0; i < r; i++) {\n    arraycopy(BY, Yi + i * 2 * 64, BY, Bi + i * 64, 64);\n  }\n  for (i = 0; i < r; i++) {\n    arraycopy(BY, Yi + (i * 2 + 1) * 64, BY, Bi + (i + r) * 64, 64);\n  }\n}\nfunction R(a, b) {\n  return a << b | a >>> 32 - b;\n}\nfunction salsa20_8(B, B32, x) {\n  let i;\n  for (i = 0; i < 16; i++) {\n    B32[i] = (B[i * 4 + 0] & 0xff) << 0;\n    B32[i] |= (B[i * 4 + 1] & 0xff) << 8;\n    B32[i] |= (B[i * 4 + 2] & 0xff) << 16;\n    B32[i] |= (B[i * 4 + 3] & 0xff) << 24;\n    // B32[i] = B.readUInt32LE(i*4)   <--- this is signficantly slower even in Node.js\n  }\n\n  arraycopy(B32, 0, x, 0, 16);\n  for (i = 8; i > 0; i -= 2) {\n    x[4] ^= R(x[0] + x[12], 7);\n    x[8] ^= R(x[4] + x[0], 9);\n    x[12] ^= R(x[8] + x[4], 13);\n    x[0] ^= R(x[12] + x[8], 18);\n    x[9] ^= R(x[5] + x[1], 7);\n    x[13] ^= R(x[9] + x[5], 9);\n    x[1] ^= R(x[13] + x[9], 13);\n    x[5] ^= R(x[1] + x[13], 18);\n    x[14] ^= R(x[10] + x[6], 7);\n    x[2] ^= R(x[14] + x[10], 9);\n    x[6] ^= R(x[2] + x[14], 13);\n    x[10] ^= R(x[6] + x[2], 18);\n    x[3] ^= R(x[15] + x[11], 7);\n    x[7] ^= R(x[3] + x[15], 9);\n    x[11] ^= R(x[7] + x[3], 13);\n    x[15] ^= R(x[11] + x[7], 18);\n    x[1] ^= R(x[0] + x[3], 7);\n    x[2] ^= R(x[1] + x[0], 9);\n    x[3] ^= R(x[2] + x[1], 13);\n    x[0] ^= R(x[3] + x[2], 18);\n    x[6] ^= R(x[5] + x[4], 7);\n    x[7] ^= R(x[6] + x[5], 9);\n    x[4] ^= R(x[7] + x[6], 13);\n    x[5] ^= R(x[4] + x[7], 18);\n    x[11] ^= R(x[10] + x[9], 7);\n    x[8] ^= R(x[11] + x[10], 9);\n    x[9] ^= R(x[8] + x[11], 13);\n    x[10] ^= R(x[9] + x[8], 18);\n    x[12] ^= R(x[15] + x[14], 7);\n    x[13] ^= R(x[12] + x[15], 9);\n    x[14] ^= R(x[13] + x[12], 13);\n    x[15] ^= R(x[14] + x[13], 18);\n  }\n  for (i = 0; i < 16; ++i) B32[i] = x[i] + B32[i];\n  for (i = 0; i < 16; i++) {\n    let bi = i * 4;\n    B[bi + 0] = B32[i] >> 0 & 0xff;\n    B[bi + 1] = B32[i] >> 8 & 0xff;\n    B[bi + 2] = B32[i] >> 16 & 0xff;\n    B[bi + 3] = B32[i] >> 24 & 0xff;\n    // B.writeInt32LE(B32[i], i*4)  //<--- this is signficantly slower even in Node.js\n  }\n}\n\n// naive approach... going back to loop unrolling may yield additional performance\nfunction blockxor(S, Si, D, Di, len) {\n  for (let i = 0; i < len; i++) {\n    D[Di + i] ^= S[Si + i];\n  }\n}\nfunction arraycopy(src, srcPos, dest, destPos, length) {\n  if (Buffer.isBuffer(src) && Buffer.isBuffer(dest)) {\n    src.copy(dest, destPos, srcPos, srcPos + length);\n  } else {\n    while (length--) {\n      dest[destPos++] = src[srcPos++];\n    }\n  }\n}\nmodule.exports = {\n  checkAndInit,\n  smix,\n  smixSync\n};","map":{"version":3,"names":["crypto","require","MAX_VALUE","DEFAULT_PROMISE_INTERVAL","checkAndInit","key","salt","N","r","p","dkLen","progressCallback","Error","XY","Buffer","alloc","V","B32","Int32Array","x","_X","B","pbkdf2Sync","tickCallback","totalOps","currentOp","current","total","percent","smix","Bi","promiseInterval","Xi","Yi","i","copy","Promise","resolve","setImmediate","blockmix_salsa8","offset","j","readUInt32LE","blockxor","smixSync","BY","arraycopy","salsa20_8","R","a","b","bi","S","Si","D","Di","len","src","srcPos","dest","destPos","length","isBuffer","module","exports"],"sources":["/home/peilunnn/Downloads/Internship Projects/gcp-dapp-auction/client/node_modules/scryptsy/lib/utils.js"],"sourcesContent":["const crypto = require('crypto')\nconst MAX_VALUE = 0x7fffffff\nconst DEFAULT_PROMISE_INTERVAL = 5000\n/* eslint-disable camelcase */\n\nfunction checkAndInit (key, salt, N, r, p, dkLen, progressCallback) {\n  if (N === 0 || (N & (N - 1)) !== 0) throw Error('N must be > 0 and a power of 2')\n\n  if (N > MAX_VALUE / 128 / r) throw Error('Parameter N is too large')\n  if (r > MAX_VALUE / 128 / p) throw Error('Parameter r is too large')\n\n  let XY = Buffer.alloc(256 * r)\n  let V = Buffer.alloc(128 * r * N)\n\n  // pseudo global\n  let B32 = new Int32Array(16) // salsa20_8\n  let x = new Int32Array(16) // salsa20_8\n  let _X = Buffer.alloc(64) // blockmix_salsa8\n\n  // pseudo global\n  let B = crypto.pbkdf2Sync(key, salt, 1, p * 128 * r, 'sha256')\n\n  let tickCallback\n  if (progressCallback) {\n    let totalOps = p * N * 2\n    let currentOp = 0\n\n    tickCallback = function () {\n      ++currentOp\n\n      // send progress notifications once every 1,000 ops\n      if (currentOp % 1000 === 0) {\n        progressCallback({\n          current: currentOp,\n          total: totalOps,\n          percent: (currentOp / totalOps) * 100.0\n        })\n      }\n    }\n  }\n  return {\n    XY,\n    V,\n    B32,\n    x,\n    _X,\n    B,\n    tickCallback\n  }\n}\n\nasync function smix (B, Bi, r, N, V, XY, _X, B32, x, tickCallback, promiseInterval) {\n  promiseInterval = promiseInterval || DEFAULT_PROMISE_INTERVAL\n  let Xi = 0\n  let Yi = 128 * r\n  let i\n\n  B.copy(XY, Xi, Bi, Bi + Yi)\n\n  for (i = 0; i < N; i++) {\n    XY.copy(V, i * Yi, Xi, Xi + Yi)\n    if (i % promiseInterval === 0) {\n      await new Promise(resolve => setImmediate(resolve))\n    }\n    blockmix_salsa8(XY, Xi, Yi, r, _X, B32, x)\n\n    if (tickCallback) tickCallback()\n  }\n\n  for (i = 0; i < N; i++) {\n    let offset = Xi + (2 * r - 1) * 64\n    let j = XY.readUInt32LE(offset) & (N - 1)\n    blockxor(V, j * Yi, XY, Xi, Yi)\n    if (i % promiseInterval === 0) {\n      await new Promise(resolve => setImmediate(resolve))\n    }\n    blockmix_salsa8(XY, Xi, Yi, r, _X, B32, x)\n\n    if (tickCallback) tickCallback()\n  }\n\n  XY.copy(B, Bi, Xi, Xi + Yi)\n}\n\nfunction smixSync (B, Bi, r, N, V, XY, _X, B32, x, tickCallback) {\n  let Xi = 0\n  let Yi = 128 * r\n  let i\n\n  B.copy(XY, Xi, Bi, Bi + Yi)\n\n  for (i = 0; i < N; i++) {\n    XY.copy(V, i * Yi, Xi, Xi + Yi)\n    blockmix_salsa8(XY, Xi, Yi, r, _X, B32, x)\n\n    if (tickCallback) tickCallback()\n  }\n\n  for (i = 0; i < N; i++) {\n    let offset = Xi + (2 * r - 1) * 64\n    let j = XY.readUInt32LE(offset) & (N - 1)\n    blockxor(V, j * Yi, XY, Xi, Yi)\n    blockmix_salsa8(XY, Xi, Yi, r, _X, B32, x)\n\n    if (tickCallback) tickCallback()\n  }\n\n  XY.copy(B, Bi, Xi, Xi + Yi)\n}\n\nfunction blockmix_salsa8 (BY, Bi, Yi, r, _X, B32, x) {\n  let i\n\n  arraycopy(BY, Bi + (2 * r - 1) * 64, _X, 0, 64)\n\n  for (i = 0; i < 2 * r; i++) {\n    blockxor(BY, i * 64, _X, 0, 64)\n    salsa20_8(_X, B32, x)\n    arraycopy(_X, 0, BY, Yi + (i * 64), 64)\n  }\n\n  for (i = 0; i < r; i++) {\n    arraycopy(BY, Yi + (i * 2) * 64, BY, Bi + (i * 64), 64)\n  }\n\n  for (i = 0; i < r; i++) {\n    arraycopy(BY, Yi + (i * 2 + 1) * 64, BY, Bi + (i + r) * 64, 64)\n  }\n}\n\nfunction R (a, b) {\n  return (a << b) | (a >>> (32 - b))\n}\n\nfunction salsa20_8 (B, B32, x) {\n  let i\n\n  for (i = 0; i < 16; i++) {\n    B32[i] = (B[i * 4 + 0] & 0xff) << 0\n    B32[i] |= (B[i * 4 + 1] & 0xff) << 8\n    B32[i] |= (B[i * 4 + 2] & 0xff) << 16\n    B32[i] |= (B[i * 4 + 3] & 0xff) << 24\n    // B32[i] = B.readUInt32LE(i*4)   <--- this is signficantly slower even in Node.js\n  }\n\n  arraycopy(B32, 0, x, 0, 16)\n\n  for (i = 8; i > 0; i -= 2) {\n    x[4] ^= R(x[0] + x[12], 7)\n    x[8] ^= R(x[4] + x[0], 9)\n    x[12] ^= R(x[8] + x[4], 13)\n    x[0] ^= R(x[12] + x[8], 18)\n    x[9] ^= R(x[5] + x[1], 7)\n    x[13] ^= R(x[9] + x[5], 9)\n    x[1] ^= R(x[13] + x[9], 13)\n    x[5] ^= R(x[1] + x[13], 18)\n    x[14] ^= R(x[10] + x[6], 7)\n    x[2] ^= R(x[14] + x[10], 9)\n    x[6] ^= R(x[2] + x[14], 13)\n    x[10] ^= R(x[6] + x[2], 18)\n    x[3] ^= R(x[15] + x[11], 7)\n    x[7] ^= R(x[3] + x[15], 9)\n    x[11] ^= R(x[7] + x[3], 13)\n    x[15] ^= R(x[11] + x[7], 18)\n    x[1] ^= R(x[0] + x[3], 7)\n    x[2] ^= R(x[1] + x[0], 9)\n    x[3] ^= R(x[2] + x[1], 13)\n    x[0] ^= R(x[3] + x[2], 18)\n    x[6] ^= R(x[5] + x[4], 7)\n    x[7] ^= R(x[6] + x[5], 9)\n    x[4] ^= R(x[7] + x[6], 13)\n    x[5] ^= R(x[4] + x[7], 18)\n    x[11] ^= R(x[10] + x[9], 7)\n    x[8] ^= R(x[11] + x[10], 9)\n    x[9] ^= R(x[8] + x[11], 13)\n    x[10] ^= R(x[9] + x[8], 18)\n    x[12] ^= R(x[15] + x[14], 7)\n    x[13] ^= R(x[12] + x[15], 9)\n    x[14] ^= R(x[13] + x[12], 13)\n    x[15] ^= R(x[14] + x[13], 18)\n  }\n\n  for (i = 0; i < 16; ++i) B32[i] = x[i] + B32[i]\n\n  for (i = 0; i < 16; i++) {\n    let bi = i * 4\n    B[bi + 0] = (B32[i] >> 0 & 0xff)\n    B[bi + 1] = (B32[i] >> 8 & 0xff)\n    B[bi + 2] = (B32[i] >> 16 & 0xff)\n    B[bi + 3] = (B32[i] >> 24 & 0xff)\n    // B.writeInt32LE(B32[i], i*4)  //<--- this is signficantly slower even in Node.js\n  }\n}\n\n// naive approach... going back to loop unrolling may yield additional performance\nfunction blockxor (S, Si, D, Di, len) {\n  for (let i = 0; i < len; i++) {\n    D[Di + i] ^= S[Si + i]\n  }\n}\n\nfunction arraycopy (src, srcPos, dest, destPos, length) {\n  if (Buffer.isBuffer(src) && Buffer.isBuffer(dest)) {\n    src.copy(dest, destPos, srcPos, srcPos + length)\n  } else {\n    while (length--) {\n      dest[destPos++] = src[srcPos++]\n    }\n  }\n}\n\nmodule.exports = {\n  checkAndInit,\n  smix,\n  smixSync\n}\n"],"mappings":"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CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;IAC3BA,CAAC,CAAC,CAAC,CAAC,IAAI6B,CAAC,CAAC7B,CAAC,CAAC,EAAE,CAAC,GAAGA,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;IAC3BA,CAAC,CAAC,CAAC,CAAC,IAAI6B,CAAC,CAAC7B,CAAC,CAAC,CAAC,CAAC,GAAGA,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;IACzBA,CAAC,CAAC,EAAE,CAAC,IAAI6B,CAAC,CAAC7B,CAAC,CAAC,CAAC,CAAC,GAAGA,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;IAC1BA,CAAC,CAAC,CAAC,CAAC,IAAI6B,CAAC,CAAC7B,CAAC,CAAC,EAAE,CAAC,GAAGA,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;IAC3BA,CAAC,CAAC,CAAC,CAAC,IAAI6B,CAAC,CAAC7B,CAAC,CAAC,CAAC,CAAC,GAAGA,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;IAC3BA,CAAC,CAAC,EAAE,CAAC,IAAI6B,CAAC,CAAC7B,CAAC,CAAC,EAAE,CAAC,GAAGA,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;IAC3BA,CAAC,CAAC,CAAC,CAAC,IAAI6B,CAAC,CAAC7B,CAAC,CAAC,EAAE,CAAC,GAAGA,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IAC3BA,CAAC,CAAC,CAAC,CAAC,IAAI6B,CAAC,CAAC7B,CAAC,CAAC,CAAC,CAAC,GAAGA,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;IAC3BA,CAAC,CAAC,EAAE,CAAC,IAAI6B,CAAC,CAAC7B,CAAC,CAAC,CAAC,CAAC,GAAGA,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;IAC3BA,CAAC,CAAC,CAAC,CAAC,IAAI6B,CAAC,CAAC7B,CAAC,CAAC,EAAE,CAAC,GAAGA,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IAC3BA,CAAC,CAAC,CAAC,CAAC,IAAI6B,CAAC,CAAC7B,CAAC,CAAC,CAAC,CAAC,GAAGA,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IAC1BA,CAAC,CAAC,EAAE,CAAC,IAAI6B,CAAC,CAAC7B,CAAC,CAAC,CAAC,CAAC,GAAGA,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;IAC3BA,CAAC,CAAC,EAAE,CAAC,IAAI6B,CAAC,CAAC7B,CAAC,CAAC,EAAE,CAAC,GAAGA,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;IAC5BA,CAAC,CAAC,CAAC,CAAC,IAAI6B,CAAC,CAAC7B,CAAC,CAAC,CAAC,CAAC,GAAGA,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;IACzBA,CAAC,CAAC,CAAC,CAAC,IAAI6B,CAAC,CAAC7B,CAAC,CAAC,CAAC,CAAC,GAAGA,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;IACzBA,CAAC,CAAC,CAAC,CAAC,IAAI6B,CAAC,CAAC7B,CAAC,CAAC,CAAC,CAAC,GAAGA,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;IAC1BA,CAAC,CAAC,CAAC,CAAC,IAAI6B,CAAC,CAAC7B,CAAC,CAAC,CAAC,CAAC,GAAGA,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;IAC1BA,CAAC,CAAC,CAAC,CAAC,IAAI6B,CAAC,CAAC7B,CAAC,CAAC,CAAC,CAAC,GAAGA,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;IACzBA,CAAC,CAAC,CAAC,CAAC,IAAI6B,CAAC,CAAC7B,CAAC,CAAC,CAAC,CAAC,GAAGA,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;IACzBA,CAAC,CAAC,CAAC,CAAC,IAAI6B,CAAC,CAAC7B,CAAC,CAAC,CAAC,CAAC,GAAGA,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;IAC1BA,CAAC,CAAC,CAAC,CAAC,IAAI6B,CAAC,CAAC7B,CAAC,CAAC,CAAC,CAAC,GAAGA,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;IAC1BA,CAAC,CAAC,EAAE,CAAC,IAAI6B,CAAC,CAAC7B,CAAC,CAAC,EAAE,CAAC,GAAGA,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;IAC3BA,CAAC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"},"metadata":{},"sourceType":"script"}