{"ast":null,"code":"const debug = require(\"debug\")(\"contract:execute\"); // eslint-disable-line no-unused-vars\nvar Web3PromiEvent = require(\"web3-core-promievent\");\nvar EventEmitter = require(\"events\");\nvar utils = require(\"./utils\");\nvar StatusError = require(\"./statuserror\");\nvar Reason = require(\"./reason\");\nvar handlers = require(\"./handlers\");\nvar override = require(\"./override\");\nvar reformat = require(\"./reformat\");\nvar execute = {\n  // -----------------------------------  Helpers --------------------------------------------------\n  /**\n   * Retrieves gas estimate multiplied by the set gas multiplier for a `sendTransaction` call.\n   * @param  {Object} params     `sendTransaction` parameters\n   * @param  {Number} blockLimit  most recent network block.blockLimit\n   * @return {Number}             gas estimate\n   */\n  getGasEstimate: function (params, blockLimit) {\n    var constructor = this;\n    var web3 = this.web3;\n    return new Promise(function (accept) {\n      // Always prefer specified gas - this includes gas set by class_defaults\n      if (params.gas) return accept(params.gas);\n      if (!constructor.autoGas) return accept();\n      web3.eth.estimateGas(params).then(gas => {\n        const bestEstimate = utils.multiplyBigNumberByDecimal(utils.bigNumberify(gas), constructor.gasMultiplier);\n\n        // Don't go over blockLimit\n        const limit = utils.bigNumberify(blockLimit);\n        bestEstimate.gte(limit) ? accept(limit.sub(1).toHexString()) : accept(bestEstimate.toHexString());\n\n        // We need to let txs that revert through.\n        // Often that's exactly what you are testing.\n      }).catch(() => accept());\n    });\n  },\n  /**\n   * Prepares simple wrapped calls by checking network and organizing the method inputs into\n   * objects web3 can consume.\n   * @param  {Object} constructor   TruffleContract constructor\n   * @param  {Object} methodABI     Function ABI segment w/ inputs & outputs keys.\n   * @param  {Array}  _arguments    Arguments passed to method invocation\n   * @return {Promise}              Resolves object w/ tx params disambiguated from arguments\n   */\n  prepareCall: function (constructor, methodABI, _arguments) {\n    var args = Array.prototype.slice.call(_arguments);\n    var params = utils.getTxParams.call(constructor, methodABI, args);\n    args = utils.convertToEthersBN(args);\n    return constructor.detectNetwork().then(network => {\n      return {\n        args: args,\n        params: params,\n        network: network\n      };\n    });\n  },\n  /**\n   * Disambiguates between transaction parameter objects and BN / BigNumber objects\n   * @param  {Any}  arg\n   * @return {Boolean}\n   */\n  hasTxParams: function (arg) {\n    return utils.is_object(arg) && !utils.is_big_number(arg);\n  },\n  /**\n   * Parses function arguments to discover if the terminal argument specifies the `defaultBlock`\n   * to execute a call at.\n   * @param  {Array}  args      `arguments` that were passed to method\n   * @param  {Any}    lastArg    terminal argument passed to method\n   * @param  {Array}  inputs     ABI segment defining method arguments\n   * @return {Boolean}           true if final argument is `defaultBlock`\n   */\n  hasDefaultBlock: function (args, lastArg, inputs) {\n    var hasDefaultBlock = !execute.hasTxParams(lastArg) && args.length > inputs.length;\n    var hasDefaultBlockWithParams = execute.hasTxParams(lastArg) && args.length - 1 > inputs.length;\n    return hasDefaultBlock || hasDefaultBlockWithParams;\n  },\n  // -----------------------------------  Methods --------------------------------------------------\n\n  /**\n   * Executes method as .call and processes optional `defaultBlock` argument.\n   * @param  {Function} fn         method\n   * @param  {Object}   methodABI  Function ABI segment w/ inputs & outputs keys.\n   * @return {Promise}             Return value of the call.\n   */\n  call: function (fn, methodABI, address) {\n    var constructor = this;\n    return function () {\n      var defaultBlock = \"latest\";\n      var args = Array.prototype.slice.call(arguments);\n      var lastArg = args[args.length - 1];\n      var promiEvent = new Web3PromiEvent();\n\n      // Extract defaultBlock parameter\n      if (execute.hasDefaultBlock(args, lastArg, methodABI.inputs)) {\n        defaultBlock = args.pop();\n      }\n      execute.prepareCall(constructor, methodABI, args).then(async _ref => {\n        let {\n          args,\n          params\n        } = _ref;\n        let result;\n        params.to = address;\n        promiEvent.eventEmitter.emit(\"execute:call:method\", {\n          fn: fn,\n          args: args,\n          address: address,\n          abi: methodABI,\n          contract: constructor\n        });\n        result = await fn(...args).call(params, defaultBlock);\n        result = reformat.numbers.call(constructor, result, methodABI.outputs);\n        return promiEvent.resolve(result);\n      }).catch(promiEvent.reject);\n      return promiEvent.eventEmitter;\n    };\n  },\n  /**\n   * Executes method as .send\n   * @param  {Function} fn         Method to invoke\n   * @param  {Object}   methodABI  Function ABI segment w/ inputs & outputs keys.\n   * @param  {String}   address    Deployed address of the targeted instance\n   * @return {PromiEvent}          Resolves a transaction receipt (via the receipt handler)\n   */\n  send: function (fn, methodABI, address) {\n    var constructor = this;\n    var web3 = constructor.web3;\n    return function () {\n      var deferred;\n      var promiEvent = new Web3PromiEvent();\n      execute.prepareCall(constructor, methodABI, arguments).then(async _ref2 => {\n        let {\n          args,\n          params,\n          network\n        } = _ref2;\n        var context = {\n          contract: constructor,\n          // Can't name this field `constructor` or `_constructor`\n          promiEvent: promiEvent,\n          params: params\n        };\n        params.to = address;\n        params.data = fn ? fn(...args).encodeABI() : params.data;\n        promiEvent.eventEmitter.emit(\"execute:send:method\", {\n          fn,\n          args,\n          address,\n          abi: methodABI,\n          contract: constructor\n        });\n        try {\n          params.gas = await execute.getGasEstimate.call(constructor, params, network.blockLimit);\n        } catch (error) {\n          promiEvent.reject(error);\n          return;\n        }\n        deferred = web3.eth.sendTransaction(params);\n        deferred.catch(override.start.bind(constructor, context));\n        handlers.setup(deferred, context);\n      }).catch(promiEvent.reject);\n      return promiEvent.eventEmitter;\n    };\n  },\n  /**\n   * Deploys an instance\n   * @param  {Object} constructorABI  Constructor ABI segment w/ inputs & outputs keys\n   * @return {PromiEvent}             Resolves a TruffleContract instance\n   */\n  deploy: function (constructorABI) {\n    var constructor = this;\n    var web3 = constructor.web3;\n    return function () {\n      var deferred;\n      const promiEvent = new Web3PromiEvent();\n      execute.prepareCall(constructor, constructorABI, arguments).then(async _ref3 => {\n        let {\n          args,\n          params,\n          network\n        } = _ref3;\n        const {\n          blockLimit\n        } = network;\n        utils.checkLibraries.apply(constructor);\n\n        // Promievent and flag that allows instance to resolve (rather than just receipt)\n        const context = {\n          contract: constructor,\n          promiEvent,\n          onlyEmitReceipt: true\n        };\n        var options = {\n          data: constructor.binary,\n          arguments: args\n        };\n        var contract = new web3.eth.Contract(constructor.abi);\n        params.data = contract.deploy(options).encodeABI();\n        params.gas = await execute.getGasEstimate.call(constructor, params, blockLimit);\n        context.params = params;\n        promiEvent.eventEmitter.emit(\"execute:deploy:method\", {\n          args,\n          abi: constructorABI,\n          contract: constructor\n        });\n        deferred = web3.eth.sendTransaction(params);\n        handlers.setup(deferred, context);\n        try {\n          const receipt = await deferred;\n          if (receipt.status !== undefined && !receipt.status) {\n            var reason = await Reason.get(params, web3);\n            var error = new StatusError(params, context.transactionHash, receipt, reason);\n            return context.promiEvent.reject(error);\n          }\n          var web3Instance = new web3.eth.Contract(constructor.abi, receipt.contractAddress);\n          web3Instance.transactionHash = context.transactionHash;\n          context.promiEvent.resolve(new constructor(web3Instance));\n        } catch (web3Error) {\n          // Manage web3's 50 blocks' timeout error.\n          // Web3's own subscriptions go dead here.\n          await override.start.call(constructor, context, web3Error);\n        }\n      }).catch(promiEvent.reject);\n      return promiEvent.eventEmitter;\n    };\n  },\n  /**\n   * Begins listening for an event OR manages the event callback\n   * @param  {Function} fn  Solidity event method\n   * @return {Emitter}      Event emitter\n   */\n  event: function (fn) {\n    var constructor = this;\n    var decode = utils.decodeLogs;\n    var currentLogID = null;\n\n    // Someone upstream is firing duplicates :/\n    function dedupe(id) {\n      return id === currentLogID ? false : currentLogID = id;\n    }\n    return function (params, callback) {\n      if (typeof params === \"function\") {\n        callback = params;\n        params = {};\n      }\n\n      // As callback\n      if (callback !== undefined) {\n        var intermediary = function (err, e) {\n          if (err) return callback(err);\n          if (!dedupe(e.id)) return;\n          callback(null, decode.call(constructor, e, true)[0]);\n        };\n        return constructor.detectNetwork().then(() => fn.call(constructor.events, params, intermediary));\n      }\n\n      // As EventEmitter\n      var emitter = new EventEmitter();\n      constructor.detectNetwork().then(() => {\n        var event = fn(params);\n        event.on(\"data\", e => dedupe(e.id) && emitter.emit(\"data\", decode.call(constructor, e, true)[0]));\n        event.on(\"changed\", e => dedupe(e.id) && emitter.emit(\"changed\", decode.call(constructor, e, true)[0]));\n        event.on(\"error\", e => emitter.emit(\"error\", e));\n      });\n      return emitter;\n    };\n  },\n  /**\n   * Wraps web3 `allEvents`, with additional log decoding\n   * @return {PromiEvent}  EventEmitter\n   */\n  allEvents: function (web3Instance) {\n    var constructor = this;\n    var decode = utils.decodeLogs;\n    var currentLogID = null;\n\n    // Someone upstream is firing duplicates :/\n    function dedupe(id) {\n      return id === currentLogID ? false : currentLogID = id;\n    }\n    return function (params) {\n      var emitter = new EventEmitter();\n      constructor.detectNetwork().then(() => {\n        var event = web3Instance.events.allEvents(params);\n        event.on(\"data\", e => dedupe(e.id) && emitter.emit(\"data\", decode.call(constructor, e, true)[0]));\n        event.on(\"changed\", e => dedupe(e.id) && emitter.emit(\"changed\", decode.call(constructor, e, true)[0]));\n        event.on(\"error\", e => emitter.emit(\"error\", e));\n      });\n      return emitter;\n    };\n  },\n  /**\n   * Wraps web3 `getPastEvents`, with additional log decoding\n   * @return {Promise}  Resolves array of event objects\n   */\n  getPastEvents: function (web3Instance) {\n    var constructor = this;\n    var decode = utils.decodeLogs;\n    return function (event, options) {\n      return web3Instance.getPastEvents(event, options).then(events => decode.call(constructor, events, false));\n    };\n  },\n  /**\n   * Estimates gas cost of a method invocation\n   * @param  {Function} fn  Method to target\n   * @param  {Object}   methodABI  Function ABI segment w/ inputs & outputs keys.\n   * @return {Promise}\n   */\n  estimate: function (fn, methodABI) {\n    var constructor = this;\n    return function () {\n      return execute.prepareCall(constructor, methodABI, arguments).then(res => fn(...res.args).estimateGas(res.params));\n    };\n  },\n  /**\n   *\n   * @param  {Function} fn  Method to target\n   * @param  {Object}   methodABI  Function ABI segment w/ inputs & outputs keys.\n   * @return {Promise}\n   */\n  request: function (fn, methodABI) {\n    var constructor = this;\n    return function () {\n      return execute.prepareCall(constructor, methodABI, arguments).then(res => fn(...res.args).request(res.params));\n    };\n  },\n  // This gets attached to `.new` (declared as a static_method in `contract`)\n  // during bootstrapping as `estimate`\n  estimateDeployment: function () {\n    var constructor = this;\n    var constructorABI = constructor.abi.filter(i => i.type === \"constructor\")[0];\n    return execute.prepareCall(constructor, constructorABI, arguments).then(res => {\n      var options = {\n        data: constructor.binary,\n        arguments: res.args\n      };\n      delete res.params[\"data\"]; // Is this necessary?\n\n      var instance = new constructor.web3.eth.Contract(constructor.abi, res.params);\n      return instance.deploy(options).estimateGas(res.params);\n    });\n  }\n};\nmodule.exports = execute;","map":{"version":3,"names":["debug","require","Web3PromiEvent","EventEmitter","utils","StatusError","Reason","handlers","override","reformat","execute","getGasEstimate","params","blockLimit","constructor","web3","Promise","accept","gas","autoGas","eth","estimateGas","then","bestEstimate","multiplyBigNumberByDecimal","bigNumberify","gasMultiplier","limit","gte","sub","toHexString","catch","prepareCall","methodABI","_arguments","args","Array","prototype","slice","call","getTxParams","convertToEthersBN","detectNetwork","network","hasTxParams","arg","is_object","is_big_number","hasDefaultBlock","lastArg","inputs","length","hasDefaultBlockWithParams","fn","address","defaultBlock","arguments","promiEvent","pop","result","to","eventEmitter","emit","abi","contract","numbers","outputs","resolve","reject","send","deferred","context","data","encodeABI","error","sendTransaction","start","bind","setup","deploy","constructorABI","checkLibraries","apply","onlyEmitReceipt","options","binary","Contract","receipt","status","undefined","reason","get","transactionHash","web3Instance","contractAddress","web3Error","event","decode","decodeLogs","currentLogID","dedupe","id","callback","intermediary","err","e","events","emitter","on","allEvents","getPastEvents","estimate","res","request","estimateDeployment","filter","i","type","instance","module","exports"],"sources":["/home/peilunnn/Downloads/Internship Projects/gcp-dapp-auction/client/node_modules/truffle-contract/lib/execute.js"],"sourcesContent":["const debug = require(\"debug\")(\"contract:execute\"); // eslint-disable-line no-unused-vars\nvar Web3PromiEvent = require(\"web3-core-promievent\");\nvar EventEmitter = require(\"events\");\nvar utils = require(\"./utils\");\nvar StatusError = require(\"./statuserror\");\nvar Reason = require(\"./reason\");\nvar handlers = require(\"./handlers\");\nvar override = require(\"./override\");\nvar reformat = require(\"./reformat\");\n\nvar execute = {\n  // -----------------------------------  Helpers --------------------------------------------------\n  /**\n   * Retrieves gas estimate multiplied by the set gas multiplier for a `sendTransaction` call.\n   * @param  {Object} params     `sendTransaction` parameters\n   * @param  {Number} blockLimit  most recent network block.blockLimit\n   * @return {Number}             gas estimate\n   */\n  getGasEstimate: function(params, blockLimit) {\n    var constructor = this;\n    var web3 = this.web3;\n\n    return new Promise(function(accept) {\n      // Always prefer specified gas - this includes gas set by class_defaults\n      if (params.gas) return accept(params.gas);\n      if (!constructor.autoGas) return accept();\n\n      web3.eth\n        .estimateGas(params)\n        .then(gas => {\n          const bestEstimate = utils.multiplyBigNumberByDecimal(\n            utils.bigNumberify(gas),\n            constructor.gasMultiplier\n          );\n\n          // Don't go over blockLimit\n          const limit = utils.bigNumberify(blockLimit);\n          bestEstimate.gte(limit)\n            ? accept(limit.sub(1).toHexString())\n            : accept(bestEstimate.toHexString());\n\n          // We need to let txs that revert through.\n          // Often that's exactly what you are testing.\n        })\n        .catch(() => accept());\n    });\n  },\n\n  /**\n   * Prepares simple wrapped calls by checking network and organizing the method inputs into\n   * objects web3 can consume.\n   * @param  {Object} constructor   TruffleContract constructor\n   * @param  {Object} methodABI     Function ABI segment w/ inputs & outputs keys.\n   * @param  {Array}  _arguments    Arguments passed to method invocation\n   * @return {Promise}              Resolves object w/ tx params disambiguated from arguments\n   */\n  prepareCall: function(constructor, methodABI, _arguments) {\n    var args = Array.prototype.slice.call(_arguments);\n    var params = utils.getTxParams.call(constructor, methodABI, args);\n\n    args = utils.convertToEthersBN(args);\n\n    return constructor.detectNetwork().then(network => {\n      return { args: args, params: params, network: network };\n    });\n  },\n\n  /**\n   * Disambiguates between transaction parameter objects and BN / BigNumber objects\n   * @param  {Any}  arg\n   * @return {Boolean}\n   */\n  hasTxParams: function(arg) {\n    return utils.is_object(arg) && !utils.is_big_number(arg);\n  },\n\n  /**\n   * Parses function arguments to discover if the terminal argument specifies the `defaultBlock`\n   * to execute a call at.\n   * @param  {Array}  args      `arguments` that were passed to method\n   * @param  {Any}    lastArg    terminal argument passed to method\n   * @param  {Array}  inputs     ABI segment defining method arguments\n   * @return {Boolean}           true if final argument is `defaultBlock`\n   */\n  hasDefaultBlock: function(args, lastArg, inputs) {\n    var hasDefaultBlock =\n      !execute.hasTxParams(lastArg) && args.length > inputs.length;\n    var hasDefaultBlockWithParams =\n      execute.hasTxParams(lastArg) && args.length - 1 > inputs.length;\n    return hasDefaultBlock || hasDefaultBlockWithParams;\n  },\n\n  // -----------------------------------  Methods --------------------------------------------------\n\n  /**\n   * Executes method as .call and processes optional `defaultBlock` argument.\n   * @param  {Function} fn         method\n   * @param  {Object}   methodABI  Function ABI segment w/ inputs & outputs keys.\n   * @return {Promise}             Return value of the call.\n   */\n  call: function(fn, methodABI, address) {\n    var constructor = this;\n\n    return function() {\n      var defaultBlock = \"latest\";\n      var args = Array.prototype.slice.call(arguments);\n      var lastArg = args[args.length - 1];\n      var promiEvent = new Web3PromiEvent();\n\n      // Extract defaultBlock parameter\n      if (execute.hasDefaultBlock(args, lastArg, methodABI.inputs)) {\n        defaultBlock = args.pop();\n      }\n\n      execute\n        .prepareCall(constructor, methodABI, args)\n        .then(async ({ args, params }) => {\n          let result;\n\n          params.to = address;\n\n          promiEvent.eventEmitter.emit(\"execute:call:method\", {\n            fn: fn,\n            args: args,\n            address: address,\n            abi: methodABI,\n            contract: constructor\n          });\n\n          result = await fn(...args).call(params, defaultBlock);\n          result = reformat.numbers.call(\n            constructor,\n            result,\n            methodABI.outputs\n          );\n          return promiEvent.resolve(result);\n        })\n        .catch(promiEvent.reject);\n\n      return promiEvent.eventEmitter;\n    };\n  },\n\n  /**\n   * Executes method as .send\n   * @param  {Function} fn         Method to invoke\n   * @param  {Object}   methodABI  Function ABI segment w/ inputs & outputs keys.\n   * @param  {String}   address    Deployed address of the targeted instance\n   * @return {PromiEvent}          Resolves a transaction receipt (via the receipt handler)\n   */\n  send: function(fn, methodABI, address) {\n    var constructor = this;\n    var web3 = constructor.web3;\n\n    return function() {\n      var deferred;\n      var promiEvent = new Web3PromiEvent();\n\n      execute\n        .prepareCall(constructor, methodABI, arguments)\n        .then(async ({ args, params, network }) => {\n          var context = {\n            contract: constructor, // Can't name this field `constructor` or `_constructor`\n            promiEvent: promiEvent,\n            params: params\n          };\n\n          params.to = address;\n          params.data = fn ? fn(...args).encodeABI() : params.data;\n\n          promiEvent.eventEmitter.emit(\"execute:send:method\", {\n            fn,\n            args,\n            address,\n            abi: methodABI,\n            contract: constructor\n          });\n\n          try {\n            params.gas = await execute.getGasEstimate.call(\n              constructor,\n              params,\n              network.blockLimit\n            );\n          } catch (error) {\n            promiEvent.reject(error);\n            return;\n          }\n\n          deferred = web3.eth.sendTransaction(params);\n          deferred.catch(override.start.bind(constructor, context));\n          handlers.setup(deferred, context);\n        })\n        .catch(promiEvent.reject);\n\n      return promiEvent.eventEmitter;\n    };\n  },\n\n  /**\n   * Deploys an instance\n   * @param  {Object} constructorABI  Constructor ABI segment w/ inputs & outputs keys\n   * @return {PromiEvent}             Resolves a TruffleContract instance\n   */\n  deploy: function(constructorABI) {\n    var constructor = this;\n    var web3 = constructor.web3;\n\n    return function() {\n      var deferred;\n      const promiEvent = new Web3PromiEvent();\n\n      execute\n        .prepareCall(constructor, constructorABI, arguments)\n        .then(async ({ args, params, network }) => {\n          const { blockLimit } = network;\n\n          utils.checkLibraries.apply(constructor);\n\n          // Promievent and flag that allows instance to resolve (rather than just receipt)\n          const context = {\n            contract: constructor,\n            promiEvent,\n            onlyEmitReceipt: true\n          };\n\n          var options = {\n            data: constructor.binary,\n            arguments: args\n          };\n\n          var contract = new web3.eth.Contract(constructor.abi);\n          params.data = contract.deploy(options).encodeABI();\n\n          params.gas = await execute.getGasEstimate.call(\n            constructor,\n            params,\n            blockLimit\n          );\n\n          context.params = params;\n\n          promiEvent.eventEmitter.emit(\"execute:deploy:method\", {\n            args,\n            abi: constructorABI,\n            contract: constructor\n          });\n\n          deferred = web3.eth.sendTransaction(params);\n          handlers.setup(deferred, context);\n\n          try {\n            const receipt = await deferred;\n            if (receipt.status !== undefined && !receipt.status) {\n              var reason = await Reason.get(params, web3);\n\n              var error = new StatusError(\n                params,\n                context.transactionHash,\n                receipt,\n                reason\n              );\n\n              return context.promiEvent.reject(error);\n            }\n\n            var web3Instance = new web3.eth.Contract(\n              constructor.abi,\n              receipt.contractAddress\n            );\n            web3Instance.transactionHash = context.transactionHash;\n\n            context.promiEvent.resolve(new constructor(web3Instance));\n          } catch (web3Error) {\n            // Manage web3's 50 blocks' timeout error.\n            // Web3's own subscriptions go dead here.\n            await override.start.call(constructor, context, web3Error);\n          }\n        })\n        .catch(promiEvent.reject);\n\n      return promiEvent.eventEmitter;\n    };\n  },\n\n  /**\n   * Begins listening for an event OR manages the event callback\n   * @param  {Function} fn  Solidity event method\n   * @return {Emitter}      Event emitter\n   */\n  event: function(fn) {\n    var constructor = this;\n    var decode = utils.decodeLogs;\n    var currentLogID = null;\n\n    // Someone upstream is firing duplicates :/\n    function dedupe(id) {\n      return id === currentLogID ? false : (currentLogID = id);\n    }\n\n    return function(params, callback) {\n      if (typeof params === \"function\") {\n        callback = params;\n        params = {};\n      }\n\n      // As callback\n      if (callback !== undefined) {\n        var intermediary = function(err, e) {\n          if (err) return callback(err);\n          if (!dedupe(e.id)) return;\n          callback(null, decode.call(constructor, e, true)[0]);\n        };\n\n        return constructor\n          .detectNetwork()\n          .then(() => fn.call(constructor.events, params, intermediary));\n      }\n\n      // As EventEmitter\n      var emitter = new EventEmitter();\n\n      constructor.detectNetwork().then(() => {\n        var event = fn(params);\n\n        event.on(\n          \"data\",\n          e =>\n            dedupe(e.id) &&\n            emitter.emit(\"data\", decode.call(constructor, e, true)[0])\n        );\n        event.on(\n          \"changed\",\n          e =>\n            dedupe(e.id) &&\n            emitter.emit(\"changed\", decode.call(constructor, e, true)[0])\n        );\n        event.on(\"error\", e => emitter.emit(\"error\", e));\n      });\n\n      return emitter;\n    };\n  },\n\n  /**\n   * Wraps web3 `allEvents`, with additional log decoding\n   * @return {PromiEvent}  EventEmitter\n   */\n  allEvents: function(web3Instance) {\n    var constructor = this;\n    var decode = utils.decodeLogs;\n    var currentLogID = null;\n\n    // Someone upstream is firing duplicates :/\n    function dedupe(id) {\n      return id === currentLogID ? false : (currentLogID = id);\n    }\n\n    return function(params) {\n      var emitter = new EventEmitter();\n\n      constructor.detectNetwork().then(() => {\n        var event = web3Instance.events.allEvents(params);\n\n        event.on(\n          \"data\",\n          e =>\n            dedupe(e.id) &&\n            emitter.emit(\"data\", decode.call(constructor, e, true)[0])\n        );\n        event.on(\n          \"changed\",\n          e =>\n            dedupe(e.id) &&\n            emitter.emit(\"changed\", decode.call(constructor, e, true)[0])\n        );\n        event.on(\"error\", e => emitter.emit(\"error\", e));\n      });\n\n      return emitter;\n    };\n  },\n\n  /**\n   * Wraps web3 `getPastEvents`, with additional log decoding\n   * @return {Promise}  Resolves array of event objects\n   */\n  getPastEvents: function(web3Instance) {\n    var constructor = this;\n    var decode = utils.decodeLogs;\n\n    return function(event, options) {\n      return web3Instance\n        .getPastEvents(event, options)\n        .then(events => decode.call(constructor, events, false));\n    };\n  },\n\n  /**\n   * Estimates gas cost of a method invocation\n   * @param  {Function} fn  Method to target\n   * @param  {Object}   methodABI  Function ABI segment w/ inputs & outputs keys.\n   * @return {Promise}\n   */\n  estimate: function(fn, methodABI) {\n    var constructor = this;\n    return function() {\n      return execute\n        .prepareCall(constructor, methodABI, arguments)\n        .then(res => fn(...res.args).estimateGas(res.params));\n    };\n  },\n\n  /**\n   *\n   * @param  {Function} fn  Method to target\n   * @param  {Object}   methodABI  Function ABI segment w/ inputs & outputs keys.\n   * @return {Promise}\n   */\n  request: function(fn, methodABI) {\n    var constructor = this;\n    return function() {\n      return execute\n        .prepareCall(constructor, methodABI, arguments)\n        .then(res => fn(...res.args).request(res.params));\n    };\n  },\n\n  // This gets attached to `.new` (declared as a static_method in `contract`)\n  // during bootstrapping as `estimate`\n  estimateDeployment: function() {\n    var constructor = this;\n\n    var constructorABI = constructor.abi.filter(\n      i => i.type === \"constructor\"\n    )[0];\n\n    return execute\n      .prepareCall(constructor, constructorABI, arguments)\n      .then(res => {\n        var options = {\n          data: constructor.binary,\n          arguments: res.args\n        };\n\n        delete res.params[\"data\"]; // Is this necessary?\n\n        var instance = new constructor.web3.eth.Contract(\n          constructor.abi,\n          res.params\n        );\n        return instance.deploy(options).estimateGas(res.params);\n      });\n  }\n};\n\nmodule.exports = execute;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}