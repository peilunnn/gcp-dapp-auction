{"ast":null,"code":"const Web3Shim = require(\"truffle-interface-adapter\").Web3Shim;\nconst utils = require(\"../utils\");\nconst execute = require(\"../execute\");\nconst bootstrap = require(\"./bootstrap\");\nmodule.exports = Contract => ({\n  setProvider(provider) {\n    if (!provider) {\n      throw new Error(`Invalid provider passed to setProvider(); provider is ${provider}`);\n    }\n    this.web3.setProvider(provider);\n    this.currentProvider = provider;\n  },\n  new() {\n    utils.checkProvider(this);\n    if (!this.bytecode || this.bytecode === \"0x\") {\n      throw new Error(`${this.contractName} error: contract binary not set. Can't deploy new instance.\\n` + `This contract may be abstract, not implement an abstract parent's methods completely\\n` + `or not invoke an inherited contract's constructor correctly\\n`);\n    }\n    var constructorABI = this.abi.filter(i => i.type === \"constructor\")[0];\n    return execute.deploy.call(this, constructorABI)(...arguments);\n  },\n  async at(address) {\n    if (address == null || typeof address !== \"string\" || address.length !== 42) {\n      throw new Error(`Invalid address passed to ${this.contractName}.at(): ${address}`);\n    }\n    try {\n      await this.detectNetwork();\n      const onChainCode = await this.web3.eth.getCode(address);\n      await utils.checkCode(onChainCode, this.contractName, address);\n      return new this(address);\n    } catch (error) {\n      throw error;\n    }\n  },\n  async deployed() {\n    try {\n      utils.checkProvider(this);\n      await this.detectNetwork();\n      utils.checkNetworkArtifactMatch(this);\n      utils.checkDeployment(this);\n      return new this(this.address);\n    } catch (error) {\n      throw error;\n    }\n  },\n  defaults(class_defaults) {\n    if (this.class_defaults == null) {\n      this.class_defaults = {};\n    }\n    if (class_defaults == null) {\n      class_defaults = {};\n    }\n    Object.keys(class_defaults).forEach(key => {\n      const value = class_defaults[key];\n      this.class_defaults[key] = value;\n    });\n    return this.class_defaults;\n  },\n  hasNetwork(network_id) {\n    return this._json.networks[`${network_id}`] != null;\n  },\n  isDeployed() {\n    if (this.network_id == null) {\n      return false;\n    }\n    if (this._json.networks[this.network_id] == null) {\n      return false;\n    }\n    return !!this.network.address;\n  },\n  async detectNetwork() {\n    // if artifacts already have a network_id and network configuration synced,\n    // use that network and use latest block gasLimit\n    if (this.network_id && this.networks[this.network_id] != null) {\n      try {\n        const {\n          gasLimit\n        } = await this.web3.eth.getBlock(\"latest\");\n        return {\n          id: this.network_id,\n          blockLimit: gasLimit\n        };\n      } catch (error) {\n        throw error;\n      }\n    }\n    // since artifacts don't have a network_id synced with a network configuration,\n    // poll chain for network_id and sync artifacts\n    try {\n      const chainNetworkID = await this.web3.eth.net.getId();\n      const {\n        gasLimit\n      } = await this.web3.eth.getBlock(\"latest\");\n      return await utils.setInstanceNetworkID(this, chainNetworkID, gasLimit);\n    } catch (error) {\n      throw error;\n    }\n  },\n  setNetwork(network_id) {\n    if (!network_id) return;\n    this.network_id = `${network_id}`;\n  },\n  setNetworkType() {\n    let networkType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"ethereum\";\n    if (this.web3) {\n      this.web3.setNetworkType(networkType);\n    }\n    this.networkType = networkType;\n  },\n  setWallet(wallet) {\n    this.web3.eth.accounts.wallet = wallet;\n  },\n  // Overrides the deployed address to null.\n  // You must call this explicitly so you don't inadvertently do this otherwise.\n  resetAddress() {\n    delete this.network.address;\n  },\n  link(name, address) {\n    // Case: Contract.link(instance)\n    if (typeof name === \"function\") {\n      const contract = name;\n      if (contract.isDeployed() === false) {\n        throw new Error(\"Cannot link contract without an address.\");\n      }\n      this.link(contract.contractName, contract.address);\n\n      // Merge events so this contract knows about library's events\n      Object.keys(contract.events).forEach(topic => {\n        this.network.events[topic] = contract.events[topic];\n      });\n      return;\n    }\n\n    // Case: Contract.link({<libraryName>: <address>, ... })\n    if (typeof name === \"object\") {\n      const obj = name;\n      Object.keys(obj).forEach(name => {\n        const a = obj[name];\n        this.link(name, a);\n      });\n      return;\n    }\n\n    // Case: Contract.link(<libraryName>, <address>)\n    if (this._json.networks[this.network_id] == null) {\n      this._json.networks[this.network_id] = {\n        events: {},\n        links: {}\n      };\n    }\n    this.network.links[name] = address;\n  },\n  // Note, this function can be called with two input types:\n  // 1. Object with a bunch of data; this data will be merged with the json data of contract being cloned.\n  // 2. network id; this will clone the contract and set a specific network id upon cloning.\n  clone(json) {\n    json = json || {};\n    const temp = function TruffleContract() {\n      this.constructor = temp;\n      return Contract.apply(this, arguments);\n    };\n    temp.prototype = Object.create(this.prototype);\n    let network_id;\n\n    // If we have a network id passed\n    if (typeof json !== \"object\") {\n      network_id = json;\n      json = this._json;\n    }\n    json = utils.merge({}, this._json || {}, json);\n    temp._constructorMethods = this._constructorMethods;\n    temp._properties = this._properties;\n    temp._property_values = {};\n    temp._json = json;\n    bootstrap(temp);\n    temp.web3 = new Web3Shim({\n      type: temp.networkType\n    });\n    temp.class_defaults = temp.prototype.defaults || {};\n    if (network_id) {\n      temp.setNetwork(network_id);\n    }\n\n    // Copy over custom key/values to the contract class\n    Object.keys(json).forEach(key => {\n      if (key.indexOf(\"x-\") !== 0) return;\n      temp[key] = json[key];\n    });\n    return temp;\n  },\n  addProp(key, fn) {\n    const getter = () => {\n      if (fn.get != null) {\n        return fn.get.call(this);\n      }\n      return this._property_values[key] || fn.call(this);\n    };\n    const setter = val => {\n      if (fn.set != null) {\n        fn.set.call(this, val);\n        return;\n      }\n\n      // If there's not a setter, then the property is immutable.\n      throw new Error(`${key} property is immutable`);\n    };\n    const definition = {};\n    definition.enumerable = false;\n    definition.configurable = false;\n    definition.get = getter;\n    definition.set = setter;\n    Object.defineProperty(this, key, definition);\n  },\n  toJSON() {\n    return this._json;\n  },\n  decodeLogs: utils.decodeLogs\n});","map":{"version":3,"names":["Web3Shim","require","utils","execute","bootstrap","module","exports","Contract","setProvider","provider","Error","web3","currentProvider","new","checkProvider","bytecode","contractName","constructorABI","abi","filter","i","type","deploy","call","arguments","at","address","length","detectNetwork","onChainCode","eth","getCode","checkCode","error","deployed","checkNetworkArtifactMatch","checkDeployment","defaults","class_defaults","Object","keys","forEach","key","value","hasNetwork","network_id","_json","networks","isDeployed","network","gasLimit","getBlock","id","blockLimit","chainNetworkID","net","getId","setInstanceNetworkID","setNetwork","setNetworkType","networkType","setWallet","wallet","accounts","resetAddress","link","name","contract","events","topic","obj","a","links","clone","json","temp","TruffleContract","constructor","apply","prototype","create","merge","_constructorMethods","_properties","_property_values","indexOf","addProp","fn","getter","get","setter","val","set","definition","enumerable","configurable","defineProperty","toJSON","decodeLogs"],"sources":["/home/peilunnn/Downloads/Internship Projects/gcp-dapp-auction/client/node_modules/truffle-contract/lib/contract/constructorMethods.js"],"sourcesContent":["const Web3Shim = require(\"truffle-interface-adapter\").Web3Shim;\nconst utils = require(\"../utils\");\nconst execute = require(\"../execute\");\nconst bootstrap = require(\"./bootstrap\");\n\nmodule.exports = Contract => ({\n  setProvider(provider) {\n    if (!provider) {\n      throw new Error(\n        `Invalid provider passed to setProvider(); provider is ${provider}`\n      );\n    }\n\n    this.web3.setProvider(provider);\n    this.currentProvider = provider;\n  },\n\n  new() {\n    utils.checkProvider(this);\n\n    if (!this.bytecode || this.bytecode === \"0x\") {\n      throw new Error(\n        `${\n          this.contractName\n        } error: contract binary not set. Can't deploy new instance.\\n` +\n          `This contract may be abstract, not implement an abstract parent's methods completely\\n` +\n          `or not invoke an inherited contract's constructor correctly\\n`\n      );\n    }\n\n    var constructorABI = this.abi.filter(i => i.type === \"constructor\")[0];\n\n    return execute.deploy.call(this, constructorABI)(...arguments);\n  },\n\n  async at(address) {\n    if (\n      address == null ||\n      typeof address !== \"string\" ||\n      address.length !== 42\n    ) {\n      throw new Error(\n        `Invalid address passed to ${this.contractName}.at(): ${address}`\n      );\n    }\n\n    try {\n      await this.detectNetwork();\n      const onChainCode = await this.web3.eth.getCode(address);\n      await utils.checkCode(onChainCode, this.contractName, address);\n      return new this(address);\n    } catch (error) {\n      throw error;\n    }\n  },\n\n  async deployed() {\n    try {\n      utils.checkProvider(this);\n      await this.detectNetwork();\n      utils.checkNetworkArtifactMatch(this);\n      utils.checkDeployment(this);\n      return new this(this.address);\n    } catch (error) {\n      throw error;\n    }\n  },\n\n  defaults(class_defaults) {\n    if (this.class_defaults == null) {\n      this.class_defaults = {};\n    }\n\n    if (class_defaults == null) {\n      class_defaults = {};\n    }\n\n    Object.keys(class_defaults).forEach(key => {\n      const value = class_defaults[key];\n      this.class_defaults[key] = value;\n    });\n\n    return this.class_defaults;\n  },\n\n  hasNetwork(network_id) {\n    return this._json.networks[`${network_id}`] != null;\n  },\n\n  isDeployed() {\n    if (this.network_id == null) {\n      return false;\n    }\n\n    if (this._json.networks[this.network_id] == null) {\n      return false;\n    }\n\n    return !!this.network.address;\n  },\n\n  async detectNetwork() {\n    // if artifacts already have a network_id and network configuration synced,\n    // use that network and use latest block gasLimit\n    if (this.network_id && this.networks[this.network_id] != null) {\n      try {\n        const { gasLimit } = await this.web3.eth.getBlock(\"latest\");\n        return { id: this.network_id, blockLimit: gasLimit };\n      } catch (error) {\n        throw error;\n      }\n    }\n    // since artifacts don't have a network_id synced with a network configuration,\n    // poll chain for network_id and sync artifacts\n    try {\n      const chainNetworkID = await this.web3.eth.net.getId();\n      const { gasLimit } = await this.web3.eth.getBlock(\"latest\");\n      return await utils.setInstanceNetworkID(this, chainNetworkID, gasLimit);\n    } catch (error) {\n      throw error;\n    }\n  },\n\n  setNetwork(network_id) {\n    if (!network_id) return;\n    this.network_id = `${network_id}`;\n  },\n\n  setNetworkType(networkType = \"ethereum\") {\n    if (this.web3) {\n      this.web3.setNetworkType(networkType);\n    }\n\n    this.networkType = networkType;\n  },\n\n  setWallet(wallet) {\n    this.web3.eth.accounts.wallet = wallet;\n  },\n\n  // Overrides the deployed address to null.\n  // You must call this explicitly so you don't inadvertently do this otherwise.\n  resetAddress() {\n    delete this.network.address;\n  },\n\n  link(name, address) {\n    // Case: Contract.link(instance)\n    if (typeof name === \"function\") {\n      const contract = name;\n\n      if (contract.isDeployed() === false) {\n        throw new Error(\"Cannot link contract without an address.\");\n      }\n\n      this.link(contract.contractName, contract.address);\n\n      // Merge events so this contract knows about library's events\n      Object.keys(contract.events).forEach(topic => {\n        this.network.events[topic] = contract.events[topic];\n      });\n\n      return;\n    }\n\n    // Case: Contract.link({<libraryName>: <address>, ... })\n    if (typeof name === \"object\") {\n      const obj = name;\n      Object.keys(obj).forEach(name => {\n        const a = obj[name];\n        this.link(name, a);\n      });\n      return;\n    }\n\n    // Case: Contract.link(<libraryName>, <address>)\n    if (this._json.networks[this.network_id] == null) {\n      this._json.networks[this.network_id] = {\n        events: {},\n        links: {}\n      };\n    }\n\n    this.network.links[name] = address;\n  },\n\n  // Note, this function can be called with two input types:\n  // 1. Object with a bunch of data; this data will be merged with the json data of contract being cloned.\n  // 2. network id; this will clone the contract and set a specific network id upon cloning.\n  clone(json) {\n    json = json || {};\n\n    const temp = function TruffleContract() {\n      this.constructor = temp;\n      return Contract.apply(this, arguments);\n    };\n\n    temp.prototype = Object.create(this.prototype);\n\n    let network_id;\n\n    // If we have a network id passed\n    if (typeof json !== \"object\") {\n      network_id = json;\n      json = this._json;\n    }\n\n    json = utils.merge({}, this._json || {}, json);\n\n    temp._constructorMethods = this._constructorMethods;\n    temp._properties = this._properties;\n\n    temp._property_values = {};\n    temp._json = json;\n\n    bootstrap(temp);\n\n    temp.web3 = new Web3Shim({\n      type: temp.networkType\n    });\n    temp.class_defaults = temp.prototype.defaults || {};\n\n    if (network_id) {\n      temp.setNetwork(network_id);\n    }\n\n    // Copy over custom key/values to the contract class\n    Object.keys(json).forEach(key => {\n      if (key.indexOf(\"x-\") !== 0) return;\n      temp[key] = json[key];\n    });\n\n    return temp;\n  },\n\n  addProp(key, fn) {\n    const getter = () => {\n      if (fn.get != null) {\n        return fn.get.call(this);\n      }\n\n      return this._property_values[key] || fn.call(this);\n    };\n\n    const setter = val => {\n      if (fn.set != null) {\n        fn.set.call(this, val);\n        return;\n      }\n\n      // If there's not a setter, then the property is immutable.\n      throw new Error(`${key} property is immutable`);\n    };\n\n    const definition = {};\n    definition.enumerable = false;\n    definition.configurable = false;\n    definition.get = getter;\n    definition.set = setter;\n\n    Object.defineProperty(this, key, definition);\n  },\n\n  toJSON() {\n    return this._json;\n  },\n\n  decodeLogs: utils.decodeLogs\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}