{"ast":null,"code":"var TruffleError = require(\"@truffle/error\");\nvar inherits = require(\"util\").inherits;\nvar utils = require(\"./utils\");\ninherits(StatusError, TruffleError);\nvar defaultGas = 90000;\nfunction StatusError(args, tx, receipt, reason) {\n  var message;\n  var gasLimit = args.gas || defaultGas;\n  var reasonString = \"\";\n  if (reason) reasonString = `Reason given: ${reason}.`;\n  if (utils.bigNumberify(receipt.gasUsed).eq(utils.bigNumberify(gasLimit))) {\n    message = \"Transaction: \" + tx + \" exited with an error (status 0) after consuming all gas.\\n\" + \"     Please check that the transaction:\\n\" + \"     - satisfies all conditions set by Solidity `assert` statements.\\n\" + \"     - has enough gas to execute the full transaction.\\n\" + \"     - does not trigger an invalid opcode by other means (ex: accessing an array out of bounds).\";\n  } else {\n    message = `Transaction: ${tx} exited with an error (status 0). ${reasonString}\\n` + \"     Please check that the transaction:\\n\" + \"     - satisfies all conditions set by Solidity `require` statements.\\n\" + \"     - does not trigger a Solidity `revert` statement.\\n\";\n  }\n  StatusError.super_.call(this, message);\n  this.tx = tx;\n  this.receipt = receipt;\n  this.reason = reason;\n}\nmodule.exports = StatusError;","map":{"version":3,"names":["TruffleError","require","inherits","utils","StatusError","defaultGas","args","tx","receipt","reason","message","gasLimit","gas","reasonString","bigNumberify","gasUsed","eq","super_","call","module","exports"],"sources":["/home/peilunnn/Downloads/Internship Projects/gcp-dapp-auction/client/node_modules/truffle-contract/lib/statuserror.js"],"sourcesContent":["var TruffleError = require(\"@truffle/error\");\nvar inherits = require(\"util\").inherits;\nvar utils = require(\"./utils\");\n\ninherits(StatusError, TruffleError);\n\nvar defaultGas = 90000;\n\nfunction StatusError(args, tx, receipt, reason) {\n  var message;\n  var gasLimit = args.gas || defaultGas;\n  var reasonString = \"\";\n\n  if (reason) reasonString = `Reason given: ${reason}.`;\n\n  if (utils.bigNumberify(receipt.gasUsed).eq(utils.bigNumberify(gasLimit))) {\n    message =\n      \"Transaction: \" +\n      tx +\n      \" exited with an error (status 0) after consuming all gas.\\n\" +\n      \"     Please check that the transaction:\\n\" +\n      \"     - satisfies all conditions set by Solidity `assert` statements.\\n\" +\n      \"     - has enough gas to execute the full transaction.\\n\" +\n      \"     - does not trigger an invalid opcode by other means (ex: accessing an array out of bounds).\";\n  } else {\n    message =\n      `Transaction: ${tx} exited with an error (status 0). ${reasonString}\\n` +\n      \"     Please check that the transaction:\\n\" +\n      \"     - satisfies all conditions set by Solidity `require` statements.\\n\" +\n      \"     - does not trigger a Solidity `revert` statement.\\n\";\n  }\n\n  StatusError.super_.call(this, message);\n  this.tx = tx;\n  this.receipt = receipt;\n  this.reason = reason;\n}\n\nmodule.exports = StatusError;\n"],"mappings":"AAAA,IAAIA,YAAY,GAAGC,OAAO,CAAC,gBAAgB,CAAC;AAC5C,IAAIC,QAAQ,GAAGD,OAAO,CAAC,MAAM,CAAC,CAACC,QAAQ;AACvC,IAAIC,KAAK,GAAGF,OAAO,CAAC,SAAS,CAAC;AAE9BC,QAAQ,CAACE,WAAW,EAAEJ,YAAY,CAAC;AAEnC,IAAIK,UAAU,GAAG,KAAK;AAEtB,SAASD,WAAW,CAACE,IAAI,EAAEC,EAAE,EAAEC,OAAO,EAAEC,MAAM,EAAE;EAC9C,IAAIC,OAAO;EACX,IAAIC,QAAQ,GAAGL,IAAI,CAACM,GAAG,IAAIP,UAAU;EACrC,IAAIQ,YAAY,GAAG,EAAE;EAErB,IAAIJ,MAAM,EAAEI,YAAY,GAAI,iBAAgBJ,MAAO,GAAE;EAErD,IAAIN,KAAK,CAACW,YAAY,CAACN,OAAO,CAACO,OAAO,CAAC,CAACC,EAAE,CAACb,KAAK,CAACW,YAAY,CAACH,QAAQ,CAAC,CAAC,EAAE;IACxED,OAAO,GACL,eAAe,GACfH,EAAE,GACF,6DAA6D,GAC7D,2CAA2C,GAC3C,wEAAwE,GACxE,0DAA0D,GAC1D,kGAAkG;EACtG,CAAC,MAAM;IACLG,OAAO,GACJ,gBAAeH,EAAG,qCAAoCM,YAAa,IAAG,GACvE,2CAA2C,GAC3C,yEAAyE,GACzE,0DAA0D;EAC9D;EAEAT,WAAW,CAACa,MAAM,CAACC,IAAI,CAAC,IAAI,EAAER,OAAO,CAAC;EACtC,IAAI,CAACH,EAAE,GAAGA,EAAE;EACZ,IAAI,CAACC,OAAO,GAAGA,OAAO;EACtB,IAAI,CAACC,MAAM,GAAGA,MAAM;AACtB;AAEAU,MAAM,CAACC,OAAO,GAAGhB,WAAW"},"metadata":{},"sourceType":"script"}